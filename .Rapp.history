ice.extent
ice.extent <- ggplot(seaice) +#
geom_line(aes(as.Date(Day, format="%m-%d"), area, colour=as.numeric(Decade)), alpha=0.5)  +#
scale_colour_gradientn(colours= topo.colors(30)) +#
theme_light()
ice.extent
ice.extent <- ggplot(seaice) +#
geom_area(aes(as.Date(Day, format="%m-%d"), area, colour=as.numeric(Decade)), alpha=0.5)  +#
scale_colour_gradientn(colours= topo.colors(30)) +#
theme_light()
ice.extent
ice.extent <- ggplot(seaice) +#
geom_point(aes(as.Date(Day, format="%m-%d"), area, colour=as.numeric(Decade)), alpha=0.5)  +#
scale_colour_gradientn(colours= topo.colors(30)) +#
theme_light()
ice.extent
ice.extent <- ggplot(seaice) +#
geom_point(aes(as.Date(Day, format="%m-%d"), area, colour=as.numeric(Decade)), alpha=0.5)  +#
scale_colour_gradientn(colours= rainbow(30)) +#
theme_light()
ice.extent
ice.extent <- ggplot(seaice) +#
geom_line(aes(as.Date(Day, format="%m-%d"), area, colour=as.numeric(Decade)), alpha=0.5)  +#
scale_colour_gradientn(colours= rainbow(30)) +#
theme_light()
v
ice.extent
ice.extent <- ggplot(seaice) +#
geom_line(aes(as.Date(Day, format="%m-%d"), area, colour=as.numeric(Decade)), alpha=0.5)  +#
scale_colour_gradientn(colours= cm.colors(30)) +#
theme_light()
ice.extent
ice.extent <- ggplot(seaice) +#
geom_point(aes(as.Date(Day, format="%m-%d"), area, colour=as.numeric(Decade)), alpha=0.5)  +#
scale_colour_gradientn(colours= cm.colors(30)) +#
theme_light()
ice.extent
ice.extent <- ggplot(seaice) +#
geom_point(aes(as.Date(Day, format="%m-%d"), area, colour=as.numeric(Year)), alpha=0.5)  +#
scale_colour_gradientn(colours= cm.colors(30)) +#
theme_light()
ice.extent
ice.extent <- ggplot(seaice) +#
geom_point(aes(as.Date(Day, format="%m-%d"), area, colour=as.numeric(Year)), alpha=0.8)  +#
scale_colour_gradientn(colours= cm.colors(30)) +#
theme_light()
ice.extent
ice.extent <- ggplot(seaice) +#
geom_point(aes(as.Date(Day, format="%m-%d"), area, colour=as.numeric(Year)), alpha=0.8)  +#
geom_line(aes(as.Date(Day, format="%m-%d"), area, colour=as.numeric(Year)), alpha=0.8)  +#
scale_colour_gradientn(colours= cm.colors(30)) +#
theme_light()
ice.extent
ice.extent <- ggplot(seaice) +#
geom_point(aes(as.Date(Day, format="%m-%d"), area, colour=as.numeric(Year)), alpha=0.8)  +#
geom_line(aes(as.Date(Day, format="%m-%d"), area, colour=as.numeric(Day)), alpha=0.8)  +#
scale_colour_gradientn(colours= cm.colors(30)) +#
theme_light()
ice.extent
ice.extent <- ggplot(seaice) +#
geom_point(aes(as.Date(Day, format="%m-%d"), area, colour=as.factor(Year)), alpha=0.8)  +#
scale_colour_gradientn(colours= cm.colors(30)) +#
theme_light()
ice.extent
ice.extent <- ggplot(seaice) +#
geom_point(aes(as.Date(Day, format="%m-%d"), area, colour=as.factor(Year)), alpha=0.8)  +#
scale_colour_discrete(colours= cm.colors(30)) +#
theme_light()
unique(ice.extent$Year)
length(unique(seaice$Year))
ice.extent <- ggplot(seaice) +#
geom_point(aes(as.Date(Day, format="%m-%d"), area, colour=as.factor(Year)), alpha=0.8)  +#
scale_colour_discrete(colours= cm.colors(41)) +#
theme_light()
ice.extent <- ggplot(seaice) +#
geom_point(aes(as.Date(Day, format="%m-%d"), area, colour=as.factor(Year)), alpha=0.8)  +#
#scale_colour_discrete(colours= cm.colors(41)) +#
theme_light()
ice.extent
ice.extent <- ggplot(seaice) +#
geom_line(aes(as.Date(Day, format="%m-%d"), area, colour=as.factor(Year)), alpha=0.8)  +#
#scale_colour_discrete(colours= cm.colors(41)) +#
theme_light()
ice.extent
ice.extent <- ggplot(seaice) +#
geom_line(aes(as.Date(Day, format="%m-%d"), area, colour=as.factor(Year)), alpha=0.8)  +#
#scale_colour_discrete(colours= cm.colors(41)) +#
stat_smooth() +#
theme_light()
ice.extent
ice.extent <- ggplot(seaice) +#
geom_line(aes(as.Date(Day, format="%m-%d"), area, colour=as.factor(Year)), alpha=0.8)  +#
#scale_colour_discrete(colours= cm.colors(41)) +#
stat_smooth(aes(as.Date(Day, format="%m-%d"), area)) +#
theme_light()
ice.extent
ice.extent <- ggplot(seaice, aes(as.Date(Day, format="%m-%d"), area)) +#
geom_line(aes(colour=as.factor(Year)), alpha=0.8)  +#
#scale_colour_discrete(colours= cm.colors(41)) +#
stat_smooth() +#
theme_light()
ice.extent
ice.extent <- ggplot(seaice, aes(as.Date(Day, format="%m-%d"), area)) +#
stat_smooth() +#
geom_line(aes(colour=as.factor(Year)), alpha=0.8)  +#
#scale_colour_discrete(colours= cm.colors(41)) +#
theme_light()
ice.extent
ice.extent <- ggplot(seaice, aes(as.Date(Day, format="%m-%d"), area)) +#
geom_smooth() +#
geom_line(aes(colour=as.factor(Year)), alpha=0.8)  +#
#scale_colour_discrete(colours= cm.colors(41)) +#
theme_light()
ice.extent
ice.extent <- ggplot(seaice, aes(as.Date(Day, format="%m-%d"), area)) +#
geom_smooth(span=0.3) +#
geom_line(aes(colour=as.factor(Year)), alpha=0.8)  +#
#scale_colour_discrete(colours= cm.colors(41)) +#
theme_light()
ice.extent
ice.extent <- ggplot(seaice, aes(as.Date(Day, format="%m-%d"), area)) +#
geom_smooth(method="lm") +#
geom_line(aes(colour=as.factor(Year)), alpha=0.8)  +#
#scale_colour_discrete(colours= cm.colors(41)) +#
theme_light()
ice.extent
ice.extent <- ggplot(seaice, aes(as.Date(Day, format="%m-%d"), area)) +#
geom_smooth(method="loess") +#
geom_line(aes(colour=as.factor(Year)), alpha=0.8)  +#
#scale_colour_discrete(colours= cm.colors(41)) +#
theme_light()
ice.extent
ice.extent <- ggplot(seaice, aes(as.Date(Day, format="%m-%d"), area)) +#
geom_smooth(linetype=0) +#
geom_line(aes(colour=as.factor(Year)), alpha=0.8)  +#
#scale_colour_discrete(colours= cm.colors(41)) +#
theme_light()
ice.extent
ice.extent <- ggplot(seaice, aes(as.Date(Day, format="%m-%d"), area)) +#
geom_point() +#
geom_smooth(linetype=0) +#
geom_line(aes(colour=as.factor(Year)), alpha=0.8)  +#
#scale_colour_discrete(colours= cm.colors(41)) +#
theme_light()
ice.extent
ice.extent <- ggplot(seaice, aes(as.Date(Day, format="%m-%d"), area)) +#
geom_point(alpha=0) +#
geom_smooth(linetype=0) +#
geom_line(aes(colour=as.factor(Year)), alpha=0.8)  +#
#scale_colour_discrete(colours= cm.colors(41)) +#
theme_light()#
ice.extent
ice.extent <- ggplot(seaice, aes(as.Date(Day, format="%m-%d"), area)) +#
geom_point(alpha=0) +#
geom_smooth(linetype=0, method="sd") +#
geom_line(aes(colour=as.factor(Year)), alpha=0.8)  +#
#scale_colour_discrete(colours= cm.colors(41)) +#
theme_light()#
ice.extent
library(reshape2)
ice.melt <- melt(seaice, id="Day")
head(ice.melt)
ice.melt <- melt(seaice, id="Day", variable="Year", value="area")
head(ice.melt)
ice.sub <- data.frame(seaice$Day, seaice$Year, seaice$area)
head(ice.sub)
colnames(ice.sub) <- c("Day", "Year", "Area")
ice.melt <- melt(ice.sub, id="Day")
head(ice.melt)
ice.melt <- melt(ice.sub, id="Day", variable="Year")
head(ice.melt)
ice.extent <- ggplot(seaice, aes(as.Date(Day, format="%m-%d"), area)) +#
geom_point(alpha=0) +#
geom_smooth(linetype=0, method="sd") +#
#geom_line(aes(colour=as.factor(Year)), alpha=0.8)  +#
#scale_colour_discrete(colours= cm.colors(41)) +#
theme_light()#
ice.extent
ice.extent <- ggplot(seaice, aes(as.Date(Day, format="%m-%d"), area)) +#
geom_point(alpha=0) +#
geom_smooth(linetype=0) +#
#geom_line(aes(colour=as.factor(Year)), alpha=0.8)  +#
#scale_colour_discrete(colours= cm.colors(41)) +#
theme_light()#
ice.extent
ice.extent <- ggplot(seaice, aes(as.Date(Day, format="%m-%d"), area)) +#
geom_point(alpha=0, span=0.9) +#
geom_smooth(linetype=0) +#
#geom_line(aes(colour=as.factor(Year)), alpha=0.8)  +#
#scale_colour_discrete(colours= cm.colors(41)) +#
theme_light()#
ice.extent
ice.extent <- ggplot(seaice, aes(as.Date(Day, format="%m-%d"), area)) +#
geom_point(alpha=0, span=20) +#
geom_smooth(linetype=0) +#
#geom_line(aes(colour=as.factor(Year)), alpha=0.8)  +#
#scale_colour_discrete(colours= cm.colors(41)) +#
theme_light()#
ice.extent
ice.extent <- ggplot(seaice, aes(as.Date(Day, format="%m-%d"), area)) +#
geom_point(alpha=0, span=0.1) +#
geom_smooth(linetype=0) +#
#geom_line(aes(colour=as.factor(Year)), alpha=0.8)  +#
#scale_colour_discrete(colours= cm.colors(41)) +#
theme_light()#
ice.extent
ice.extent <- ggplot(seaice, aes(as.Date(Day, format="%m-%d"), area)) +#
geom_point(alpha=0) +#
geom_smooth(linetype=0, span=0.9) +#
#geom_line(aes(colour=as.factor(Year)), alpha=0.8)  +#
#scale_colour_discrete(colours= cm.colors(41)) +#
theme_light()#
ice.extent
ice.extent <- ggplot(seaice, aes(as.Date(Day, format="%m-%d"), area)) +#
geom_point(alpha=0) +#
geom_smooth(linetype=0, span=0.1) +#
#geom_line(aes(colour=as.factor(Year)), alpha=0.8)  +#
#scale_colour_discrete(colours= cm.colors(41)) +#
theme_light()#
ice.extent
ice.extent <- ggplot(seaice, aes(as.Date(Day, format="%m-%d"), area)) +#
geom_point(alpha=0) +#
geom_smooth(linetype=0, method="glm") +#
#geom_line(aes(colour=as.factor(Year)), alpha=0.8)  +#
#scale_colour_discrete(colours= cm.colors(41)) +#
theme_light()#
ice.extent
ice.extent <- ggplot(seaice, aes(as.Date(Day, format="%m-%d"), area)) +#
geom_point(alpha=0) +#
geom_smooth(linetype=0, method="gam") +#
#geom_line(aes(colour=as.factor(Year)), alpha=0.8)  +#
#scale_colour_discrete(colours= cm.colors(41)) +#
theme_light()#
ice.extent
ice.extent <- ggplot(seaice, aes(as.Date(Day, format="%m-%d"), area)) +#
geom_point(alpha=0) +#
stat_smooth(linetype=0, method="gam") +#
#geom_line(aes(colour=as.factor(Year)), alpha=0.8)  +#
#scale_colour_discrete(colours= cm.colors(41)) +#
theme_light()#
ice.extent
ice.extent <- ggplot(seaice, aes(as.Date(Day, format="%m-%d"), area)) +#
geom_point(alpha=0) +#
stat_smooth(linetype=0, span=0.9) +#
#geom_line(aes(colour=as.factor(Year)), alpha=0.8)  +#
#scale_colour_discrete(colours= cm.colors(41)) +#
theme_light()#
ice.extent
ice.extent <- ggplot(seaice, aes(as.Date(Day, format="%m-%d"), area)) +#
geom_point(alpha=0) +#
stat_smooth(linetype=0, span=0.1) +#
#geom_line(aes(colour=as.factor(Year)), alpha=0.8)  +#
#scale_colour_discrete(colours= cm.colors(41)) +#
theme_light()#
ice.extent
ice.extent <- ggplot(seaice, aes(as.Date(Day, format="%m-%d"), area)) +#
geom_point(alpha=0) +#
stat_smooth(linetype=0, span=0.2) +#
#geom_line(aes(colour=as.factor(Year)), alpha=0.8)  +#
#scale_colour_discrete(colours= cm.colors(41)) +#
theme_light()#
ice.extent
ice.extent <- ggplot(seaice, aes(as.Date(Day, format="%m-%d"), area)) +#
geom_point(alpha=0) +#
stat_smooth(linetype=0, span=0.2, se=FALSE) +#
#geom_line(aes(colour=as.factor(Year)), alpha=0.8)  +#
#scale_colour_discrete(colours= cm.colors(41)) +#
theme_light()#
ice.extent
ice.extent <- ggplot(seaice, aes(as.Date(Day, format="%m-%d"), area)) +#
geom_point(alpha=0) +#
stat_smooth(linetype=0,  se=FALSE) +#
#geom_line(aes(colour=as.factor(Year)), alpha=0.8)  +#
#scale_colour_discrete(colours= cm.colors(41)) +#
theme_light()#
ice.extent
mean_se <- function(x, mult = 1) {  #
  x <- na.omit(x)#
  se <- mult * sqrt(var(x) / length(x))#
  mean <- mean(x)#
  data.frame(y = mean, ymin = mean - se, ymax = mean + se)#
}
ice.extent <- ggplot(seaice, aes(as.Date(Day, format="%m-%d"), area)) +#
geom_point(alpha=0) +#
stat_smooth(linetype=0,  se=FALSE) +#
#geom_line(aes(colour=as.factor(Year)), alpha=0.8)  +#
#scale_colour_discrete(colours= cm.colors(41)) +#
theme_light() +#
  stat_summary(fun.data=mean_se, geom="ribbon", alpha=0.25)#
ice.extent
mean_se <- function(x, mult = 1) {  #
  x <- na.omit(x)#
  sd.x <- sd(x)* mult#
  se <- mult * sqrt(var(x) / length(x))#
  mean <- mean(x)#
  data.frame(y = mean, ymin = mean - se, ymax = mean + se)#
}
ice.extent <- ggplot(seaice, aes(as.Date(Day, format="%m-%d"), area)) +#
geom_point(alpha=0) +#
stat_smooth(linetype=0,  se=FALSE) +#
#geom_line(aes(colour=as.factor(Year)), alpha=0.8)  +#
#scale_colour_discrete(colours= cm.colors(41)) +#
theme_light() +#
  stat_summary(fun.data=mean_se, geom="ribbon", alpha=0.25)#
ice.extent
de <- as.numeric(gsub(c(2017), 2010, seaice$Decade))#
#
mean_se <- function(x, mult = 2) {  #
  x <- na.omit(x)#
  sd.x <- sd(x)* mult#
  se <- mult * sqrt(var(x) / length(x))#
  mean <- mean(x)#
  data.frame(y = mean, ymin = mean - se, ymax = mean + se)#
}#
#
ice.extent <- ggplot(seaice, aes(as.Date(Day, format="%m-%d"), area)) +#
geom_point(alpha=0) +#
stat_smooth(linetype=0,  se=FALSE) +#
#geom_line(aes(colour=as.factor(Year)), alpha=0.8)  +#
#scale_colour_discrete(colours= cm.colors(41)) +#
theme_light() +#
  stat_summary(fun.data=mean_se, geom="ribbon", alpha=0.25)#
ice.extent
mean_se <- function(x, mult = 5) {  #
  x <- na.omit(x)#
  sd.x <- sd(x)* mult#
  se <- mult * sqrt(var(x) / length(x))#
  mean <- mean(x)#
  data.frame(y = mean, ymin = mean - se, ymax = mean + se)#
}#
#
ice.extent <- ggplot(seaice, aes(as.Date(Day, format="%m-%d"), area)) +#
geom_point(alpha=0) +#
stat_smooth(linetype=0,  se=FALSE) +#
#geom_line(aes(colour=as.factor(Year)), alpha=0.8)  +#
#scale_colour_discrete(colours= cm.colors(41)) +#
theme_light() +#
  stat_summary(fun.data=mean_se, geom="ribbon", alpha=0.25)#
ice.extent
ice.extent <- ggplot(seaice, aes(as.Date(Day, format="%m-%d"), area)) +#
geom_point(alpha=0) +#
stat_smooth(linetype=0,  se=FALSE) +#
geom_line(aes(colour=as.factor(Year)), alpha=0.8)  +#
#scale_colour_discrete(colours= cm.colors(41)) +#
theme_light() +#
  stat_summary(fun.data=mean_se, geom="ribbon", alpha=0.25)#
ice.extent
mean_se <- function(x, mult = 10) {  #
  x <- na.omit(x)#
  sd.x <- sd(x)* mult#
  se <- mult * sqrt(var(x) / length(x))#
  mean <- mean(x)#
  data.frame(y = mean, ymin = mean - se, ymax = mean + se)#
}
ice.extent <- ggplot(seaice, aes(as.Date(Day, format="%m-%d"), area)) +#
geom_point(alpha=0) +#
stat_smooth(linetype=0,  se=FALSE) +#
geom_line(aes(colour=as.factor(Year)), alpha=0.8)  +#
#scale_colour_discrete(colours= cm.colors(41)) +#
theme_light() +#
  stat_summary(fun.data=mean_se, geom="ribbon", alpha=0.25)#
ice.extent
mean_se <- function(x, mult = 10) {  #
  x <- na.omit(x)#
  sd.x <- sd(x)* mult#
  se <- mult * sqrt(var(x) / length(x))#
  mean <- mean(x)#
  data.frame(y = mean, ymin = mean - se, ymax = mean + se)#
}#
#
ice.extent <- ggplot(seaice, aes(as.Date(Day, format="%m-%d"), area)) +#
geom_point(alpha=0) +#
stat_smooth(linetype=0,  se=FALSE, alpha=0.2) +#
geom_line(aes(colour=as.factor(Year)), alpha=0.8)  +#
#scale_colour_discrete(colours= cm.colors(41)) +#
theme_light() +#
  stat_summary(fun.data=mean_se, geom="ribbon", alpha=0.25)#
ice.extent
unique(seaice$Year)
seaice <- subset(seaice, !(seaice$Year=="#--"))
mean_se <- function(x, mult = 10) {  #
  x <- na.omit(x)#
  sd.x <- sd(x)* mult#
  se <- mult * sqrt(var(x) / length(x))#
  mean <- mean(x)#
  data.frame(y = mean, ymin = mean - se, ymax = mean + se)#
}#
#
ice.extent <- ggplot(seaice, aes(as.Date(Day, format="%m-%d"), area)) +#
geom_point(alpha=0) +#
stat_smooth(linetype=0,  se=FALSE, alpha=0.2) +#
geom_line(aes(colour=as.factor(Year)), alpha=0.8)  +#
#scale_colour_discrete(colours= cm.colors(41)) +#
theme_light() +#
  stat_summary(fun.data=mean_se, geom="ribbon", alpha=0.25)#
ice.extent
seaice <- subset(seaice, !(seaice$Year=="# --"))#
#
mean_se <- function(x, mult = 10) {  #
  x <- na.omit(x)#
  sd.x <- sd(x)* mult#
  se <- mult * sqrt(var(x) / length(x))#
  mean <- mean(x)#
  data.frame(y = mean, ymin = mean - se, ymax = mean + se)#
}#
#
ice.extent <- ggplot(seaice, aes(as.Date(Day, format="%m-%d"), area)) +#
geom_point(alpha=0) +#
stat_smooth(linetype=0,  se=FALSE, alpha=0.2) +#
geom_line(aes(colour=as.factor(Year)), alpha=0.8)  +#
#scale_colour_discrete(colours= cm.colors(41)) +#
theme_light() +#
  stat_summary(fun.data=mean_se, geom="ribbon", alpha=0.25)#
ice.extent
ice.extent <- ggplot(seaice, aes(as.Date(Day, format="%m-%d"), area)) +#
geom_point(alpha=0) +#
stat_smooth(linetype=0,  se=FALSE, alpha=0.5) +#
geom_line(aes(colour=as.factor(Year)), alpha=0.8)  +#
#scale_colour_discrete(colours= cm.colors(41)) +#
theme_light() +#
  stat_summary(fun.data=mean_se, geom="ribbon", alpha=0.25)#
ice.extent
ice.extent <- ggplot(seaice, aes(as.Date(Day, format="%m-%d"), area)) +#
geom_point(alpha=0) +#
stat_smooth(linetype=0,  se=FALSE, alpha=0.1) +#
geom_line(aes(colour=as.factor(Year)), alpha=0.8)  +#
#scale_colour_discrete(colours= cm.colors(41)) +#
theme_light() +#
  stat_summary(fun.data=mean_se, geom="ribbon", alpha=0.25)#
ice.extent
ice.extent <- ggplot(seaice, aes(as.Date(Day, format="%m-%d"), area)) +#
geom_point(alpha=0) +#
stat_smooth(linetype=0,  se=FALSE, aes(alpha=0.1)) +#
geom_line(aes(colour=as.factor(Year)), alpha=0.8)  +#
#scale_colour_discrete(colours= cm.colors(41)) +#
theme_light() +#
  stat_summary(fun.data=mean_se, geom="ribbon", alpha=0.25)#
ice.extent
ice.extent <- ggplot(seaice, aes(as.Date(Day, format="%m-%d"), area)) +#
geom_point(alpha=0) +#
stat_smooth(linetype=0,  se=FALSE, aes(alpha=0.1)) +#
geom_line(aes(colour=as.factor(Year)))  +#
#scale_colour_discrete(colours= cm.colors(41)) +#
theme_light() +#
  stat_summary(fun.data=mean_se, geom="ribbon", alpha=0.25)#
ice.extent
head(seaice)
head(seaice$Day)
ice.extent <- ggplot(seaice, aes(as.Date(Day, format="%m-%d"), area)) +#
geom_point(alpha=0) +#
stat_smooth(linetype=0,  se=FALSE, aes(alpha=0.1)) +#
geom_line(aes(colour=as.factor(Year)))  +#
#scale_colour_discrete(colours= cm.colors(41)) +#
theme_light() +#
  stat_summary(fun.data=mean_se, geom="ribbon", alpha=0.25) +#
scale_x_date("", format="%m-%d")#
ice.extent
ice.extent <- ggplot(seaice, aes(as.Date(Day, format="%m-%d"), area)) +#
geom_point(alpha=0) +#
stat_smooth(linetype=0,  se=FALSE, aes(alpha=0.1)) +#
geom_line(aes(colour=as.factor(Year)))  +#
#scale_colour_discrete(colours= cm.colors(41)) +#
theme_light() +#
  stat_summary(fun.data=mean_se, geom="ribbon", alpha=0.25) +#
scale_x_date("", labels = date_format("%m/%d"))#
ice.extent
ice.extent <- ggplot(seaice, aes(as.Date(Day, format="%m-%d"), area)) +#
geom_point(alpha=0) +#
stat_smooth(linetype=0,  se=FALSE, aes(alpha=0.1)) +#
geom_line(aes(colour=as.factor(Year)))  +#
#scale_colour_discrete(colours= cm.colors(41)) +#
theme_light() +#
  stat_summary(fun.data=mean_se, geom="ribbon", alpha=0.25) +#
scale_x_date("", labels = date_format("%m-%d"))#
ice.extent
ice.extent <- ggplot(seaice, aes(as.Date(Day, format="%m-%d"), area)) +#
geom_point(alpha=0) +#
stat_smooth(linetype=0,  se=FALSE, aes(alpha=0.1)) +#
geom_line(aes(colour=as.factor(Year)))  +#
#scale_colour_discrete(colours= cm.colors(41)) +#
theme_light() +#
  stat_summary(fun.data=mean_se, geom="ribbon", alpha=0.25) +#
scale_x_date("", labels = date_format("%m"))#
ice.extent
ice.extent <- ggplot(seaice, aes(as.Date(Day, format="%m-%d"), area)) +#
geom_point(alpha=0) +#
stat_smooth(linetype=0,  se=FALSE, aes(alpha=0.1)) +#
geom_line(aes(colour=as.factor(Year)))  +#
#scale_colour_discrete(colours= cm.colors(41)) +#
theme_light() +#
  stat_summary(fun.data=mean_se, geom="ribbon", alpha=0.25) +#
scale_x_date("", labels = date_labels("%m"))#
ice.extent
ice.extent <- ggplot(seaice, aes(as.Date(Day, format="%m-%d"), area)) +#
geom_point(alpha=0) +#
stat_smooth(linetype=0,  se=FALSE, aes(alpha=0.1)) +#
geom_line(aes(colour=as.factor(Year)))  +#
#scale_colour_discrete(colours= cm.colors(41)) +#
theme_light() +#
  stat_summary(fun.data=mean_se, geom="ribbon", alpha=0.25) +#
scale_x_date("", date_labels="%m")#
ice.extent
ice.extent <- ggplot(seaice, aes(as.Date(Day, format="%m-%d"), area)) +#
geom_point(alpha=0) +#
stat_smooth(linetype=0,  se=FALSE, aes(alpha=0.1)) +#
geom_line(aes(colour=as.factor(Year)))  +#
#scale_colour_discrete(colours= cm.colors(41)) +#
theme_light() +#
  stat_summary(fun.data=mean_se, geom="ribbon", alpha=0.25) +#
scale_x_date("")#
ice.extent
ice.extent <- ggplot(seaice, aes(as.Date(Day, format="%m-%d"), area)) +#
geom_point(alpha=0) +#
stat_smooth(linetype=0,  se=FALSE, aes(alpha=0.1)) +#
geom_line(aes(colour=as.factor(Year)))  +#
#scale_colour_discrete(colours= cm.colors(41)) +#
theme_light() +#
  stat_summary(fun.data=mean_se, geom="ribbon", alpha=0.25) +#
scale_x_date("", date_labels="%b")#
ice.extent
ice.extent <- ggplot(seaice, aes(as.Date(Day, format="%m-%d"), area)) +#
geom_point(alpha=0) +#
stat_smooth(linetype=0,  se=FALSE, aes(alpha=0.1)) +#
geom_line(aes(colour=as.factor(Year)))  +#
#scale_colour_discrete(colours= cm.colors(41)) +#
theme_light() +#
  stat_summary(fun.data=mean_se, geom="ribbon", alpha=0.25) +#
scale_x_date("", date_labels="%b") +#
scale_colour_factor("")#
ice.extent
ice.extent <- ggplot(seaice, aes(as.Date(Day, format="%m-%d"), area)) +#
geom_point(alpha=0) +#
stat_smooth(linetype=0,  se=FALSE, aes(alpha=0.1)) +#
geom_line(aes(colour=as.factor(Year)))  +#
#scale_colour_discrete(colours= cm.colors(41)) +#
theme_light() +#
  stat_summary(fun.data=mean_se, geom="ribbon", alpha=0.25) +#
scale_x_date("", date_labels="%b") +#
scale_colour_discrete("")#
ice.extent
ice.extent <- ggplot(seaice, aes(as.Date(Day, format="%m-%d"), area)) +#
geom_point(alpha=0) +#
stat_smooth(linetype=0,  se=FALSE, aes(alpha=0.1)) +#
geom_line(aes(colour=as.factor(Year)))  +#
#scale_colour_discrete(colours= cm.colors(41)) +#
theme_light() +#
  stat_summary(fun.data=mean_se, geom="ribbon", alpha=0.25) +#
scale_x_date("", date_labels="%b") +#
scale_y_continuous(expression(paste("Sea Ice Area (km"^2*")")))#
scale_colour_discrete("Year") #
ice.extent
ice.extent <- ggplot(seaice, aes(as.Date(Day, format="%m-%d"), area)) +#
geom_point(alpha=0) +#
stat_smooth(linetype=0,  se=FALSE, aes(alpha=0.1)) +#
geom_line(aes(colour=as.factor(Year)))  +#
#scale_colour_discrete(colours= cm.colors(41)) +#
theme_light() +#
  stat_summary(fun.data=mean_se, geom="ribbon", alpha=0.25) +#
scale_x_date("", date_labels="%b") +#
scale_y_continuous(expression(paste("Sea Ice Area (10"^6*" km"^2*")")))#
scale_colour_discrete("Year") #
ice.extent
seaice$Date <- substr(seaice$date, 1, 10)#
seaice$Day <- substr(seaice$date, 6, 10)#
seaice$Year <- substr(seaice$date, 1, 4)#
seaice$Decade <- substr(seaice$date, 1, 4)#
seaice$Decade <- as.numeric(gsub(c(1978), 1970, seaice$Decade))#
seaice$Decade <- as.numeric(gsub(c(1979), 1970, seaice$Decade))#
seaice$Decade <- as.numeric(gsub(c(1981), 1980, seaice$Decade))#
seaice$Decade <- as.numeric(gsub(c(1982), 1980, seaice$Decade))#
seaice$Decade <- as.numeric(gsub(c(1983), 1980, seaice$Decade))#
seaice$Decade <- as.numeric(gsub(c(1984), 1980, seaice$Decade))#
seaice$Decade <- as.numeric(gsub(c(1985), 1980, seaice$Decade))#
seaice$Decade <- as.numeric(gsub(c(1986), 1980, seaice$Decade))#
seaice$Decade <- as.numeric(gsub(c(1987), 1980, seaice$Decade))#
seaice$Decade <- as.numeric(gsub(c(1988), 1980, seaice$Decade))#
seaice$Decade <- as.numeric(gsub(c(1989), 1980, seaice$Decade))#
seaice$Decade <- as.numeric(gsub(c(1991), 1990, seaice$Decade))#
seaice$Decade <- as.numeric(gsub(c(1992), 1990, seaice$Decade))#
seaice$Decade <- as.numeric(gsub(c(1993), 1990, seaice$Decade))#
seaice$Decade <- as.numeric(gsub(c(1994), 1990, seaice$Decade))#
seaice$Decade <- as.numeric(gsub(c(1995), 1990, seaice$Decade))#
seaice$Decade <- as.numeric(gsub(c(1996), 1990, seaice$Decade))#
seaice$Decade <- as.numeric(gsub(c(1997), 1990, seaice$Decade))#
seaice$Decade <- as.numeric(gsub(c(1998), 1990, seaice$Decade))#
seaice$Decade <- as.numeric(gsub(c(1999), 1990, seaice$Decade))#
seaice$Decade <- as.numeric(gsub(c(2001), 2000, seaice$Decade))#
seaice$Decade <- as.numeric(gsub(c(2002), 2000, seaice$Decade))#
seaice$Decade <- as.numeric(gsub(c(2003), 2000, seaice$Decade))#
seaice$Decade <- as.numeric(gsub(c(2004), 2000, seaice$Decade))#
seaice$Decade <- as.numeric(gsub(c(2005), 2000, seaice$Decade))#
seaice$Decade <- as.numeric(gsub(c(2006), 2000, seaice$Decade))#
seaice$Decade <- as.numeric(gsub(c(2007), 2000, seaice$Decade))#
seaice$Decade <- as.numeric(gsub(c(2008), 2000, seaice$Decade))#
seaice$Decade <- as.numeric(gsub(c(2009), 2000, seaice$Decade))#
seaice$Decade <- as.numeric(gsub(c(2011), 2010, seaice$Decade))#
seaice$Decade <- as.numeric(gsub(c(2012), 2010, seaice$Decade))#
seaice$Decade <- as.numeric(gsub(c(2013), 2010, seaice$Decade))#
seaice$Decade <- as.numeric(gsub(c(2014), 2010, seaice$Decade))#
seaice$Decade <- as.numeric(gsub(c(2015), 2010, seaice$Decade))#
seaice$Decade <- as.numeric(gsub(c(2016), 2010, seaice$Decade))#
seaice$Decade <- as.numeric(gsub(c(2017), 2010, seaice$Decade))#
#
seaice <- subset(seaice, !(seaice$Year=="# --"))
head(seaice)
dataframe <- seaice
start.date <- "2016-01-01"
as.Date(start.date)
dataframe.sub <- subset(dataframe, as.Date(dataframe$Date, format="%Y-%m-%d") > as.Date(start.date, format="%Y-%m-%d))
)
dataframe.sub <- subset(dataframe, as.Date(dataframe$Date, format="%Y-%m-%d") > as.Date(start.date, format="%Y-%m-%d"))
time.seq <- dataframe.sub$Date
time.seq
date.list <- lapply(time.seq, function(x) subset(dataframe, as.Date(dataframe$Date, format="%Y-%m-%d") > as.Date(x, format="%Y-%m-%d"))))
dataframe.sub <- subset(dataframe, as.Date(dataframe$Date, format="%Y-%m-%d") >= as.Date(start.date, format="%Y-%m-%d"))
time.seq <- dataframe.sub$Date
head(time.seq)
date.list <- lapply(time.seq, function(x) subset(dataframe, as.Date(dataframe$Date, format="%Y-%m-%d") >= as.Date(x, format="%Y-%m-%d")))
library(pbapply)
date.list <- pblapply(time.seq, function(x) subset(dataframe, as.Date(dataframe$Date, format="%Y-%m-%d") >= as.Date(x, format="%Y-%m-%d")))
head(date.list[[1]])
date.list <- pblapply(time.seq, function(x) subset(dataframe, as.Date(dataframe$Date, format="%Y-%m-%d") <= as.Date(x, format="%Y-%m-%d")))
head(date.list[[1]])
tail(date.list[[1]])
tail(date.list[[100]])
timeSeriesTimed <- function(datafame, start.date) {#
    dataframe.sub <- subset(dataframe, as.Date(dataframe$Date, format="%Y-%m-%d") >= as.Date(start.date, format="%Y-%m-%d"))#
    time.seq <- dataframe.sub$Date#
    date.list <- pblapply(time.seq, function(x) subset(dataframe, as.Date(dataframe$Date, format="%Y-%m-%d") <= as.Date(x, format="%Y-%m-%d")))#
    animation::ani.options(convert="/usr/local/bin/convert")#
    animation::saveVideo(expr=for (i in seq_along(date.interval)) {#
        date.data <- date.list[[i]]#
        ice.extent <- ggplot(date.data, aes(as.Date(Day, format="%m-%d"), area)) +#
        geom_point(alpha=0) +#
        stat_smooth(linetype=0,  se=FALSE, aes(alpha=0.1)) +#
        geom_line(aes(colour=as.factor(Year)))  +#
        #scale_colour_discrete(colours= cm.colors(41)) +#
        theme_light() +#
        stat_summary(fun.data=mean_se, geom="ribbon", alpha=0.25) +#
        scale_x_date("", date_labels="%b") +#
        scale_y_continuous(expression(paste("Sea Ice Area (10"^6*" km"^2*")")))#
        scale_colour_discrete("Year")#
        ggsave(ice.extent, filename=paste("/Users/lee/Dropbox/Documents/Sea Ice Extent/Timeseries/series",num[i], ".png", sep=""), device="png")#
    }, video.name="timeseries.mp4", img.name="series")#
}
timeSeriesTimed(dataframe=seaice, start.date="2016-01-01")
head(seaice)
timeSeriesTimed(dataframe=seaice, start.date="2016-01-01")
timeSeriesTimed(seaice, start.date="2016-01-01")
timeSeriesTimed <- function(datafame, start.date) {#
    dataframe.sub <- subset(dataframe, as.Date(dataframe$Date, format="%Y-%m-%d") >= as.Date(start.date, format="%Y-%m-%d"))#
    time.seq <- dataframe.sub$Date#
    date.list <- pblapply(time.seq, function(x) subset(dataframe, as.Date(dataframe$Date, format="%Y-%m-%d") <= as.Date(x, format="%Y-%m-%d")))#
    animation::ani.options(convert="/usr/local/bin/convert")#
    animation::saveVideo(expr=for (i in seq_along(time.seq)) {#
        date.data <- date.list[[i]]#
        ice.extent <- ggplot(date.data, aes(as.Date(Day, format="%m-%d"), area)) +#
        geom_point(alpha=0) +#
        stat_smooth(linetype=0,  se=FALSE, aes(alpha=0.1)) +#
        geom_line(aes(colour=as.factor(Year)))  +#
        #scale_colour_discrete(colours= cm.colors(41)) +#
        theme_light() +#
        stat_summary(fun.data=mean_se, geom="ribbon", alpha=0.25) +#
        scale_x_date("", date_labels="%b") +#
        scale_y_continuous(expression(paste("Sea Ice Area (10"^6*" km"^2*")")))#
        scale_colour_discrete("Year")#
        ggsave(ice.extent, filename=paste("/Users/lee/Dropbox/Documents/Sea Ice Extent/Timeseries/series",num[i], ".png", sep=""), device="png")#
    }, video.name="timeseries.mp4", img.name="series")#
}
timeSeriesTimed(seaice, start.date="2016-01-01")
timeSeriesTimed <- function(datafame, start.date) {#
    dataframe.sub <- subset(dataframe, as.Date(dataframe$Date, format="%Y-%m-%d") >= as.Date(start.date, format="%Y-%m-%d"))#
    time.seq <- dataframe.sub$Date#
    date.list <- pblapply(time.seq, function(x) subset(dataframe, as.Date(dataframe$Date, format="%Y-%m-%d") <= as.Date(x, format="%Y-%m-%d")))#
    animation::ani.options(convert="/usr/local/bin/convert")#
    animation::saveVideo(expr=for (i in seq_along(time.seq)) {#
        date.data <- date.list[[i]]#
        num <- formatC(seq(1, length(time.seq), 1), width=6, format="d", flag="0")#
        ice.extent <- ggplot(date.data, aes(as.Date(Day, format="%m-%d"), area)) +#
        geom_point(alpha=0) +#
        stat_smooth(linetype=0,  se=FALSE, aes(alpha=0.1)) +#
        geom_line(aes(colour=as.factor(Year)))  +#
        #scale_colour_discrete(colours= cm.colors(41)) +#
        theme_light() +#
        stat_summary(fun.data=mean_se, geom="ribbon", alpha=0.25) +#
        scale_x_date("", date_labels="%b") +#
        scale_y_continuous(expression(paste("Sea Ice Area (10"^6*" km"^2*")")))#
        scale_colour_discrete("Year")#
        ggsave(ice.extent, filename=paste("/Users/lee/Dropbox/Documents/Sea Ice Extent/Timeseries/series",num[i], ".png", sep=""), device="png")#
    }, video.name="timeseries.mp4", img.name="series")#
}
timeSeriesTimed(seaice, start.date="2016-01-01")
timeSeriesTimed <- function(datafame, start.date) {#
    dataframe.sub <- subset(dataframe, as.Date(dataframe$Date, format="%Y-%m-%d") >= as.Date(start.date, format="%Y-%m-%d"))#
    time.seq <- dataframe.sub$Date#
    date.list <- pblapply(time.seq, function(x) subset(dataframe, as.Date(dataframe$Date, format="%Y-%m-%d") <= as.Date(x, format="%Y-%m-%d")))#
    animation::ani.options(convert="/usr/local/bin/convert")#
    animation::saveVideo(expr=for (i in seq_along(time.seq)) {#
        date.data <- date.list[[i]]#
        num <- formatC(seq(1, length(time.seq), 1), width=6, format="d", flag="0")#
        ice.extent <- ggplot(date.data, aes(as.Date(Day, format="%m-%d"), area)) +#
        geom_point(alpha=0) +#
        stat_smooth(linetype=0,  se=FALSE, aes(alpha=0.1)) +#
        geom_line(aes(colour=as.factor(Year)))  +#
        #scale_colour_discrete(colours= cm.colors(41)) +#
        theme_light() +#
        stat_summary(fun.data=mean_se, geom="ribbon", alpha=0.25) +#
        scale_x_date("", date_labels="%b") +#
        scale_y_continuous(expression(paste("Sea Ice Area (10"^6*" km"^2*")"))) +#
        scale_colour_discrete("Year")#
        ggsave(ice.extent, filename=paste("/Users/lee/Dropbox/Documents/Sea Ice Extent/Timeseries/series",num[i], ".png", sep=""), device="png", width=7, height=5)#
    }, video.name="timeseries.mp4", img.name="series")#
    #ffmpeg -f image2 -i series%06d.png -vcodec mjpeg -q:v 0 -r 25 seaIce.mov#
#
}
timeSeriesTimed(seaice, start.date="2016-01-01")
timeSeriesTimed <- function(datafame, start.date) {#
    dataframe.sub <- subset(dataframe, as.Date(dataframe$Date, format="%Y-%m-%d") >= as.Date(start.date, format="%Y-%m-%d"))#
    time.seq <- dataframe.sub$Date#
    date.list <- pblapply(time.seq, function(x) subset(dataframe, as.Date(dataframe$Date, format="%Y-%m-%d") <= as.Date(x, format="%Y-%m-%d")))#
    animation::ani.options(convert="/usr/local/bin/convert")#
    animation::saveVideo(expr=for (i in seq_along(time.seq)) {#
        date.data <- date.list[[i]]#
        num <- formatC(seq(1, length(time.seq), 1), width=6, format="d", flag="0")#
        ice.extent <- ggplot(date.data, aes(as.Date(Day, format="%m-%d"), area)) +#
        geom_point(alpha=0) +#
        stat_smooth(linetype=0,  se=FALSE +#
        geom_line(aes(colour=as.factor(Year)))  +#
        #scale_colour_discrete(colours= cm.colors(41)) +#
        theme_light() +#
        stat_summary(fun.data=mean_se, geom="ribbon", alpha=0.25) +#
        scale_x_date("", date_labels="%b") +#
        scale_y_continuous(expression(paste("Sea Ice Area (10"^6*" km"^2*")"))) +#
        scale_colour_discrete("Year") +#
        ggsave(ice.extent, filename=paste("/Users/lee/Dropbox/Documents/Sea Ice Extent/Timeseries/series",num[i], ".png", sep=""), device="png", width=7, height=4)#
    }, video.name="timeseries.mp4", img.name="series")#
    #ffmpeg -f image2 -i series%06d.png -vcodec mjpeg -q:v 0 -r 25 seaIce.mov#
#
}
timeSeriesTimed <- function(datafame, start.date) {#
    dataframe.sub <- subset(dataframe, as.Date(dataframe$Date, format="%Y-%m-%d") >= as.Date(start.date, format="%Y-%m-%d"))#
    time.seq <- dataframe.sub$Date#
    date.list <- pblapply(time.seq, function(x) subset(dataframe, as.Date(dataframe$Date, format="%Y-%m-%d") <= as.Date(x, format="%Y-%m-%d")))#
    animation::ani.options(convert="/usr/local/bin/convert")#
    animation::saveVideo(expr=for (i in seq_along(time.seq)) {#
        date.data <- date.list[[i]]#
        num <- formatC(seq(1, length(time.seq), 1), width=6, format="d", flag="0")#
        ice.extent <- ggplot(date.data, aes(as.Date(Day, format="%m-%d"), area)) +#
        geom_point(alpha=0) +#
        stat_smooth(linetype=0,  se=FALSE) +#
        geom_line(aes(colour=as.factor(Year)))  +#
        #scale_colour_discrete(colours= cm.colors(41)) +#
        theme_light() +#
        stat_summary(fun.data=mean_se, geom="ribbon", alpha=0.25) +#
        scale_x_date("", date_labels="%b") +#
        scale_y_continuous(expression(paste("Sea Ice Area (10"^6*" km"^2*")"))) +#
        scale_colour_discrete("Year") +#
        ggsave(ice.extent, filename=paste("/Users/lee/Dropbox/Documents/Sea Ice Extent/Timeseries/series",num[i], ".png", sep=""), device="png", width=7, height=4)#
    }, video.name="timeseries.mp4", img.name="series")#
    #ffmpeg -f image2 -i series%06d.png -vcodec mjpeg -q:v 0 -r 25 seaIce.mov#
#
}
timeSeriesTimed(seaice, start.date="2016-01-01")
timeSeriesTimed <- function(datafame, start.date) {#
    dataframe.sub <- subset(dataframe, as.Date(dataframe$Date, format="%Y-%m-%d") >= as.Date(start.date, format="%Y-%m-%d"))#
    time.seq <- dataframe.sub$Date#
    date.list <- pblapply(time.seq, function(x) subset(dataframe, as.Date(dataframe$Date, format="%Y-%m-%d") <= as.Date(x, format="%Y-%m-%d")))#
    animation::ani.options(convert="/usr/local/bin/convert")#
    animation::saveVideo(expr=for (i in seq_along(time.seq)) {#
        date.data <- date.list[[i]]#
        num <- formatC(seq(1, length(time.seq), 1), width=6, format="d", flag="0")#
        ice.extent <- ggplot(date.data, aes(as.Date(Day, format="%m-%d"), area)) +#
        geom_point(alpha=0) +#
        stat_smooth(linetype=0,  se=FALSE) +#
        geom_line(aes(colour=as.factor(Year)))  +#
        #scale_colour_discrete(colours= cm.colors(41)) +#
        theme_light() +#
        stat_summary(fun.data=mean_se, geom="ribbon", alpha=0.25) +#
        scale_x_date("", date_labels="%b") +#
        scale_y_continuous(expression(paste("Sea Ice Area (10"^6*" km"^2*")"))) +#
        scale_colour_discrete("Year") +#
        ggsave(ice.extent, filename=paste("/Users/lee/Dropbox/Documents/Sea Ice Extent/Timeseries/series",num[i], ".png", sep=""), device="png", width=8, height=5)#
    }, video.name="timeseries.mp4", img.name="series")#
    #ffmpeg -f image2 -i series%06d.png -vcodec mjpeg -q:v 0 -r 25 seaIce.mov#
#
}
timeSeriesTimed(seaice, start.date="2016-01-01")
quartz()
ice.extent <- ggplot(seaice, aes(as.Date(Day, format="%m-%d"), area)) +#
geom_point(alpha=0) +#
stat_smooth(linetype=0,  se=FALSE, aes(alpha=0.1)) +#
geom_line(aes(colour=as.factor(Year)))  +#
#scale_colour_discrete(colours= cm.colors(41)) +#
theme_light() +#
  stat_summary(fun.data=mean_se, geom="ribbon", alpha=0.25) +#
scale_x_date("", date_labels="%b") +#
scale_y_continuous(expression(paste("Sea Ice Area (10"^6*" km"^2*")")))#
scale_colour_discrete("Year") #
ice.extent
ice.extent <- ggplot(seaice, aes(as.Date(Day, format="%m-%d"), area)) +#
geom_point(alpha=0) +#
stat_smooth(linetype=0,  se=FALSE) +#
geom_line(aes(colour=as.factor(Year)))  +#
#scale_colour_discrete(colours= cm.colors(41)) +#
theme_light() +#
  stat_summary(fun.data=mean_se, geom="ribbon", alpha=0.25) +#
scale_x_date("", date_labels="%b") +#
scale_y_continuous(expression(paste("Sea Ice Area (10"^6*" km"^2*")")))#
scale_colour_discrete("Year") #
ice.extent
ice.extent <- ggplot(seaice, aes(as.Date(Day, format="%m-%d"), area)) +#
geom_point(alpha=0) +#
stat_smooth(linetype=0,  se=FALSE) +#
geom_line(aes(colour=as.factor(Year)))  +#
#scale_colour_discrete(colours= cm.colors(41)) +#
theme_light() +#
  stat_summary(fun.data=mean_se, geom="ribbon", alpha=0.25) +#
scale_x_date("", date_labels="%b") +#
scale_y_continuous(expression(paste("Sea Ice Area (10"^6*" km"^2*")"))) +#
scale_colour_discrete("Year") #
ice.extent
timeSeriesTimed <- function(datafame, start.date) {#
    dataframe.sub <- subset(dataframe, as.Date(dataframe$Date, format="%Y-%m-%d") >= as.Date(start.date, format="%Y-%m-%d"))#
    time.seq <- dataframe.sub$Date#
    date.list <- pblapply(time.seq, function(x) subset(dataframe, as.Date(dataframe$Date, format="%Y-%m-%d") <= as.Date(x, format="%Y-%m-%d")))#
    animation::ani.options(convert="/usr/local/bin/convert")#
    animation::saveVideo(expr=for (i in seq_along(time.seq)) {#
        date.data <- date.list[[i]]#
        num <- formatC(seq(1, length(time.seq), 1), width=6, format="d", flag="0")#
        ice.extent <- ggplot(date.data, aes(as.Date(Day, format="%m-%d"), area)) +#
        geom_point(alpha=0) +#
        stat_smooth(linetype=0,  se=FALSE) +#
        geom_line(aes(colour=as.factor(Year)))  +#
        #scale_colour_discrete(colours= cm.colors(41)) +#
        theme_light() +#
        stat_summary(fun.data=mean_se, geom="ribbon", alpha=0.25) +#
        scale_x_date("", date_labels="%b") +#
        scale_y_continuous(expression(paste("Sea Ice Area (10"^6*" km"^2*")"))) +#
        scale_colour_discrete("Year")#
        ggsave(ice.extent, filename=paste("/Users/lee/Dropbox/Documents/Sea Ice Extent/Timeseries/series",num[i], ".png", sep=""), device="png", width=8, height=5)#
    }, video.name="timeseries.mp4", img.name="series")#
    #ffmpeg -f image2 -i series%06d.png -vcodec mjpeg -q:v 0 -r 25 seaIce.mov#
#
}
timeSeriesTimed(seaice, start.date="2016-01-01")
timeSeriesTimed <- function(datafame, start.date) {#
    dataframe.sub <- subset(dataframe, as.Date(dataframe$Date, format="%Y-%m-%d") >= as.Date(start.date, format="%Y-%m-%d"))#
    time.seq <- dataframe.sub$Date#
    date.list <- pblapply(time.seq, function(x) subset(dataframe, as.Date(dataframe$Date, format="%Y-%m-%d") <= as.Date(x, format="%Y-%m-%d")))#
    animation::ani.options(convert="/usr/local/bin/convert")#
    animation::saveVideo(expr=for (i in seq_along(time.seq)) {#
        date.data <- date.list[[i]]#
        num <- formatC(seq(1, length(time.seq), 1), width=6, format="d", flag="0")#
        ice.extent <- ggplot(date.data, aes(as.Date(Day, format="%m-%d"), area)) +#
        geom_point(alpha=0) +#
        stat_smooth(linetype=0,  se=FALSE) +#
        geom_line(aes(colour=as.factor(Year)))  +#
        #scale_colour_discrete(colours= cm.colors(41)) +#
        theme_light() +#
        stat_summary(fun.data=mean_se, geom="ribbon", alpha=0.25) +#
        scale_x_date("", date_labels="%b") +#
        scale_y_continuous(expression(paste("Sea Ice Area (10"^6*" km"^2*")"))) +#
        scale_colour_discrete("Year")#
        ggsave(ice.extent, filename=paste("/Users/lee/Dropbox/Documents/Sea Ice Extent/Timeseries/series",num[i], ".png", sep=""), device="png", width=9, height=6)#
    }, video.name="timeseries.mp4", img.name="series")#
    #ffmpeg -f image2 -i series%06d.png -vcodec mjpeg -q:v 0 -r 25 seaIce.mov#
#
}
timeSeriesTimed(seaice, start.date="2016-01-01")
timeSeriesTimed(seaice, start.date="2016-07-01")
timeSeriesTimed(seaice, start.date="2016-09-01")
timeSeriesTimed(seaice, start.date="2016-08-01")
timeSeriesTimed <- function(datafame, start.date) {#
    dataframe.sub <- subset(dataframe, as.Date(dataframe$Date, format="%Y-%m-%d") >= as.Date(start.date, format="%Y-%m-%d"))#
    time.seq <- dataframe.sub$Date#
    date.list <- pblapply(time.seq, function(x) subset(dataframe, as.Date(dataframe$Date, format="%Y-%m-%d") <= as.Date(x, format="%Y-%m-%d")))#
    animation::ani.options(convert="/usr/local/bin/convert")#
    animation::saveVideo(expr=for (i in seq_along(time.seq)) {#
        date.data <- date.list[[i]]#
        num <- formatC(seq(1, length(time.seq), 1), width=6, format="d", flag="0")#
        ice.extent <- ggplot(date.data, aes(as.Date(Day, format="%m-%d"), area)) +#
        geom_point(alpha=0) +#
        stat_smooth(linetype=0,  se=FALSE) +#
        geom_line(aes(colour=as.factor(Year)), lwd=1.2)  +#
        #scale_colour_discrete(colours= cm.colors(41)) +#
        theme_light() +#
        stat_summary(fun.data=mean_se, geom="ribbon", alpha=0.25) +#
        scale_x_date("", date_labels="%b") +#
        scale_y_continuous(expression(paste("Sea Ice Area (10"^6*" km"^2*")"))) +#
        scale_colour_discrete("Year")#
        ggsave(ice.extent, filename=paste("/Users/lee/Dropbox/Documents/Sea Ice Extent/Timeseries/series",num[i], ".png", sep=""), device="png", width=9, height=6)#
    }, video.name="timeseries.mp4", img.name="series")#
    #ffmpeg -f image2 -i series%06d.png -vcodec mjpeg -q:v 0 -r 25 seaIce.mov#
#
}
timeSeriesTimed(seaice, start.date="2016-08-01")
test <- c("Ca", "K", "Ti")
test.list <- as.list(test)
test.list
names(test.list) <- test
test.list
#Erase everything that comes before#
rm(list = ls(all = TRUE))#
#
#packrat::init("~/Dropbox/4.2 ky event/Data Analysis/R Code/For Distribution/Neolithic")#
#
#Compatibility#
if(.Platform$OS.type=="windows") {#
  quartz<-function() windows()#
}#
#
###Load Packages#
library(TTR)#
library(ggplot2)#
library(gridExtra)#
library(scales)#
library(gtable)#
library(wq)#
library(Bchron)#
library(plyr)#
library(bcp)#
#library(mgcv)#
library(reshape2)#
library(pbapply)#
library(xlsx)#
library(data.table)#
library(dplyr)#
library(akima)#
library(ggmap)#
library(ggthemes)#
library(rgdal)#
library(sp)#
library(rgeos)#
library(maptools)#
library(PBSmapping)#
library(raster)#
####################################################
#######Calibration & Confidence Band Function#######
####################################################
#####Collapse Dates#
collapse.the.dates.begin <- function(sites, biogeo, general, dates, sigma) {#
    date.frame <- data.frame(sites, biogeo, general, dates, sigma)#
    names(date.frame) <- c("Site", "Biogeo_Uni", "St_Area_NE", "CYrBPunc", "Sigma")#
    date.frame <- date.frame[complete.cases(date.frame),]#
    date.sub <- subset(date.frame, (xmin-500) < Date & Date < (xmax + 500))#
    n.t <- rep(100, length(date.sub$Site))#
    df <- data.frame(date.frame$Site, date.frame$Biogeo_Uni, general, dates, sigma)#
    colnames(df) <- c("Site", "Biogeo_Uni", "St_Area_NE", "CYrBPunc", "Sigma")#
    df <- arrange(df, desc(CYrBPunc))#
    df <- arrange(df, desc(Site))#
    df <- arrange(df, desc(Biogeo_Uni))#
    df <- arrange(df, desc(St_Area_NE))#
    df$Ttest <- c(#
    (abs(df[1:(nrow(df)-1),4]-df[2:nrow(df), 4]))/((sqrt(df[2:nrow(df), 5]^2 + df[1:(nrow(df)-1),5]^2)*sqrt(1/100))), NA)#
    df$pvalue <- c((2*pt(df[1:nrow(df),6], 100, lower=FALSE)))#
    df$Collapse <- rep("No", length(sites))#
    df <- transform(df, Collapse = ifelse(pvalue > 0.05, "Yes", Collapse))#
    df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
    df <- as.data.frame(df)#
    df <- df[complete.cases(df),]#
    return(df)#
}#
####Function to organize plots in a window#
layOut = function(...) {#
    require(grid)#
    x <- list(...)#
    n <- max(sapply(x, function(x) max(x[[2]])))#
    p <- max(sapply(x, function(x) max(x[[3]])))#
    pushViewport(viewport(layout = grid.layout(n, p)))#
    for (i in seq_len(length(x))) {#
        print(x[[i]][[1]], vp = viewport(layout.pos.row = x[[i]][[2]],#
        layout.pos.col = x[[i]][[3]]))#
    }#
}#
#
####Function to maintain significant digits in plot#
fmt <- function(){#
    function(x) format(x,nsmall = 4,scientific = FALSE)#
}#
####################################################
#######Calibration & Confidence Band Function#######
####################################################
#
###Multicore apply function with status bar#
mcpblapply <- function (X, FUN, ..., mc.preschedule = TRUE, mc.set.seed = TRUE,#
mc.silent = FALSE, mc.cores = getOption("mc.cores", 2L),#
mc.cleanup = TRUE, mc.allow.recursive = TRUE, USE.NAMES = TRUE, simplify = TRUE)#
{#
    FUN <- match.fun(FUN)#
    if (!is.vector(X) || is.object(X))#
    X <- as.list(X)#
    B <- length(X)#
    if (!(interactive() && dopb() && B >= 1))#
    return(mclapply(X, FUN, ...#
    ))#
    pb <- startpb(0, B)#
    rval <- vector("list", B)#
    for (i in 1:B) {#
        rval[i] <- list(FUN(X[[i]], ...))#
        setpb(pb, i)#
    }#
    close(pb)#
    names(rval) <- names(X)#
    rval#
}#
#
mcpbsapply <- function (X, FUN, ..., mc.preschedule = TRUE, mc.set.seed = TRUE,#
mc.silent = FALSE, mc.cores = getOption("mc.cores", 2L),#
mc.cleanup = TRUE, mc.allow.recursive = TRUE, USE.NAMES = TRUE, simplify = TRUE)#
{#
    FUN <- match.fun(FUN)#
    answer <- mcpblapply(X = X, FUN = FUN,  ..., USE.NAMES = TRUE)#
    if (USE.NAMES && is.character(X) && is.null(names(answer)))#
    names(answer) <- X#
    if (!identical(simplify, FALSE) && length(answer))#
    simplify2array(answer, higher = (simplify == "array"))#
    else answer#
}#
#
mcreplicate <- function(n, expr, simplify = "array", mc.cores = getOption("mc.cores", 2L)) {#
    mcpbsapply(integer(n), eval.parent(substitute(function(...) expr)), mc.cores = getOption("mc.cores", 2L),#
    simplify = simplify)#
}#
conf.loess <- function(x, sigma, n, reps, xmin, xmax) {#
    samp.intcal <- rep("intcal13", length(x))#
    samp.slugdens <- BchronCalibrate(x, sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    res.by <- by(samp.ages$ageGrid, samp.ages$.id, median)#
    res.t <- t(res.by)#
    samp.age.grid <- c(samp.ages$ageGrid, xmin, xmax)#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.grid <- sort(samp.age.grid, decreasing=TRUE)#
    samp.grid <- samp.grid[samp.grid < xmax & samp.grid > xmin]#
    samp.hist <- hist(samp.grid, breaks=length(time))#
    samp.hist <- data.frame(time, samp.hist$counts, samp.hist$counts/sum(samp.hist$counts))#
    colnames(samp.hist) <- c("Age", "Counts", "Density")#
    #samp.hist <- arrange(samp.all, desc(Age))#
    makeloess <- function(x, n){#
        time <- seq(xmin+5, xmax-5, 10)#
        samp.age <- sample(x, size=n, replace=TRUE)#
        samp.dist <- sapply(1:n, function(x) rnorm(500, samp.age, 85))#
        samp.dist <- as.vector(samp.dist)#
        samp.dist <- c(xmax, xmin, samp.dist)#
        samp.date <- tapply(samp.dist, cut(samp.dist, length(time)), length)#
        samp.loess <- lowess(time, samp.date, f=0.15)#
        samp.fitted <- samp.loess$y#
        return(samp.fitted)#
    }#
    samp.replicate <- (replicate(reps, makeloess(res.t, n)))#
    samp.replicate <- as.data.frame(samp.replicate)#
    samp.replicate[is.na(samp.replicate)] <- 0#
    samp.replicate <- sweep(samp.replicate,2,colSums(samp.replicate),`/`)#
    samp.results.replicate <- transform(samp.replicate, MEAN=apply(samp.replicate,1, mean, na.rm = TRUE))#
    samp.results.replicate <- transform(samp.results.replicate, SD=apply(samp.results.replicate,1, sd, na.rm = TRUE))#
    samp.descriptive <- data.frame(time, samp.results.replicate$MEAN, samp.results.replicate$SD)#
    colnames(samp.descriptive) <- c("Age", "Mean", "SD")#
    #samp.descriptive <- arrange(samp.descriptive, desc(Age))#
    samp.all <- data.frame(time, samp.hist$Density, samp.hist$Counts, samp.descriptive$Mean, samp.descriptive$SD, samp.replicate)#
    names(samp.all)[names(samp.all)=="time"] <- "Age"#
    names(samp.all)[names(samp.all)=="samp.descriptive.Mean"] <- "Mean"#
    names(samp.all)[names(samp.all)=="samp.descriptive.SD"] <- "SD"#
    names(samp.all)[names(samp.all)=="samp.hist.Density"] <- "Density"#
    names(samp.all)[names(samp.all)=="samp.hist.Counts"] <- "Counts"#
    samp.all <- arrange(samp.all, desc(Age))#
    return(samp.all)#
}#
#
########
stack.14C <- function(x, sigma, xmin, xmax){#
    samp.intcal <- rep("intcal13", length(x))#
    samp.slugdens <- BchronCalibrate(x, sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    fill <- seq(xmin, xmax, 1)#
    samp.age.grid <- c(samp.ages$ageGrid, fill)#
    samp.grid <- sort(samp.age.grid, decreasing=TRUE)#
    samp.grid <- samp.grid[samp.grid < xmax & samp.grid > xmin]#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.hist <- hist(samp.grid, breaks=length(time))#
    samp.hist <- data.frame(time, samp.hist$counts, samp.hist$counts/sum(samp.hist$counts))#
    colnames(samp.hist) <- c("Age", "Counts", "Density")#
    return(samp.hist)#
}#
median.stack.14C <- function(x, sigma, xmin, xmax){#
    samp.intcal <- rep("intcal13", length(x))#
    samp.slugdens <- BchronCalibrate(x, sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.median <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, median))#
    medians.all <-as.vector(samp.median[,1])#
    n <- length(medians.all)#
    medians <- medians.all[medians.all < xmax & medians.all > xmin]#
    return(medians)#
}#
######Function to Generate Confidence Bands around SCDRD#
conf.cal.loess <- function(dates, sigma, n, reps, sites, xmin, xmax, ..., cores = getOption("mc.cores", 2L), collapse.dates=FALSE) {#
    collapse.the.dates <- function(sites, dates, sigma) {#
        n.t <- rep(100, length(sites))#
        df <- data.frame(sites, dates, sigma)#
        colnames(df) <- c("Sites", "Date", "Sigma")#
        df <- arrange(df, desc(Date))#
        df <- arrange(df, desc(Sites))#
        df$Ttest <- c(#
        (abs(df[1:(nrow(df)-1),2]-df[2:nrow(df), 2]))/((sqrt(df[2:nrow(df), 3]^2 + df[1:(nrow(df)-1),3]^2)*sqrt(1/100))), NA)#
        df$pvalue <- c((2*pt(df[1:nrow(df),4], 100, lower=FALSE)))#
        df$Collapse <- rep("No", length(sites))#
        df <- transform(df, Collapse = ifelse(pvalue > 0.05, "Yes", Collapse))#
        df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
        df <- as.data.frame(df)#
        df <- df[complete.cases(df),]#
        return(df)#
    }#
    uncollapse.the.dates <- function(sites, dates, sigma) {#
        df <- data.frame(sites, dates, sigma)#
        colnames(df) <- c("Sites", "Date", "Sigma")#
        return(df)#
    }#
    date.data <- if(isTRUE(collapse.dates)){#
        collapse.the.dates(sites, dates, sigma)#
    } else {#
        uncollapse.the.dates(sites, dates, sigma)#
    }#
    samp.intcal <- rep("intcal13", length(date.data$Date))#
    samp.slugdens <- BchronCalibrate(date.data$Date, date.data$Sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    res.by <- by(samp.ages$ageGrid, samp.ages$.id, median)#
    res.t <- t(res.by)#
    fill <- seq(xmin, xmax, 1)#
    samp.age.grid <- c(samp.ages$ageGrid, fill)#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.grid <- sort(samp.age.grid, decreasing=TRUE)#
    samp.grid <- samp.grid[samp.grid < xmax & samp.grid > xmin]#
    samp.hist <- hist(samp.grid, breaks=length(time))#
    samp.hist <- data.frame(time, samp.hist$counts, samp.hist$counts/sum(samp.hist$counts))#
    colnames(samp.hist) <- c("Age", "Counts", "Density")#
    #samp.hist <- arrange(samp.all, desc(Age))#
    makeloess <- function(dates, n){#
        time <- seq(xmin+5, xmax-5, 10)#
        n.s <- length(dates)#
        samp.order <- sample(n.s, size=n, replace=TRUE)#
        samp.dist.n <- samp.slugdens[samp.order]#
        temp.ages <- ldply(samp.dist.n, data.frame)#
        temp.age.grid <- c(temp.ages$ageGrid, fill)#
        temp.grid <- temp.age.grid[temp.age.grid < xmax & samp.grid > xmin]#
        samp.dist <- c(fill, temp.grid)#
        samp.dist <- as.vector(samp.dist)#
        samp.dist <- c(xmax, xmin, samp.dist)#
        samp.date <- tapply(samp.dist, cut(samp.dist, length(time)), length)#
        samp.loess <- lowess(time, samp.date, f=0.15)#
        samp.fitted <- samp.loess$y#
        return(samp.fitted)#
    }#
    samp.replicate <- (mcreplicate(reps, makeloess(dates, n)))#
    samp.replicate.dat <- as.data.frame(samp.replicate)#
    samp.replicate.dat[is.na(samp.replicate.dat)] <- 0#
    samp.replicated <- sweep(samp.replicate.dat,2,colSums(samp.replicate.dat),`/`)#
    samp.results.replicated.m <- transform(samp.replicated, MEAN=apply(X=samp.replicated, MARGIN=1, FUN=mean, na.rm = TRUE))#
    samp.results.replicated.s <- transform(samp.replicated, SD=apply(X=samp.replicated, MARGIN=1, FUN=sd, na.rm = TRUE))#
    samp.descriptive <- data.frame(time, samp.results.replicated.m$MEAN, samp.results.replicated.s$SD)#
    colnames(samp.descriptive) <- c("Age", "Mean", "SD")#
    #samp.descriptive <- arrange(samp.descriptive, desc(Age))#
    samp.all <- data.frame(time, samp.hist$Density, samp.hist$Counts, samp.descriptive$Mean, samp.descriptive$SD)#
    names(samp.all)[names(samp.all)=="time"] <- "Age"#
    names(samp.all)[names(samp.all)=="samp.descriptive.Mean"] <- "Mean"#
    names(samp.all)[names(samp.all)=="samp.descriptive.SD"] <- "SD"#
    names(samp.all)[names(samp.all)=="samp.hist.Density"] <- "Density"#
    names(samp.all)[names(samp.all)=="samp.hist.Counts"] <- "Counts"#
    samp.all <- arrange(samp.all, desc(Age))#
    return(samp.all)#
}#
#
###Traditional SCDPD#
BchronDensityCollapse <- function (dates, sigma, sites,  dfs = rep(100, length(dates)), numMix = 30,#
iterations = 10000, burn = 2000, thin = 8, updateAges = FALSE, collapse.dates=FALSE)#
{#
    collapse.the.dates <- function(sites, dates, sigma) {#
        n.t <- rep(100, length(sites))#
        df <- data.frame(sites, dates, sigma)#
        colnames(df) <- c("Sites", "Date", "Sigma")#
        df <- arrange(df, desc(Date))#
        df <- arrange(df, desc(Sites))#
        df$Ttest <- c(#
        (abs(df[1:(nrow(df)-1),2]-df[2:nrow(df), 2]))/((sqrt(df[2:nrow(df), 3]^2 + df[1:(nrow(df)-1),3]^2)*sqrt(1/100))), NA)#
        df$pvalue <- c((2*pt(df[1:nrow(df),4], 100, lower=FALSE)))#
        df$Collapse <- rep("No", length(sites))#
        df <- transform(df, Collapse = ifelse(pvalue > 0.05, "Yes", Collapse))#
        df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
        return(df)#
    }#
    uncollapse.the.dates <- function(sites, dates, sigma) {#
        df <- data.frame(sites, dates, sigma)#
        colnames(df) <- c("Sites", "Date", "Sigma")#
        return(df)#
    }#
    date.data <- if(isTRUE(collapse.dates)){#
        collapse.the.dates(sites, dates, sigma)#
    } else {#
        uncollapse.the.dates(sites, dates, sigma)#
    }#
    pathToCalCurves = system.file("data",#
    package = "Bchron")#
    calCurves <- rep("intcal13", length(date.data$Date))#
    ages <- date.data$Date#
    ageSds <- date.data$Sigma#
    if (length(ages) != length(ageSds))#
    stop("ages and 1-sigma errors must be same length")#
    if (length(ages) != length(calCurves))#
    stop("ages and Calibration curves must be same length")#
    x = BchronCalibrate(ages = ages, ageSds = ageSds, calCurves = calCurves,#
    pathToCalCurves = pathToCalCurves, eps = 0, dfs = rep(100,#
    length(ages)))#
    xSmall = BchronCalibrate(ages = ages, ageSds = ageSds, calCurves = calCurves,#
    pathToCalCurves = pathToCalCurves, dfs = rep(100, length(ages)))#
    n = length(x)#
    thetaRange = range(xSmall[[1]]$ageGrid)#
    for (i in 2:n) thetaRange = range(c(thetaRange, xSmall[[i]]$ageGrid))#
    offset = vector(length = n)#
    for (i in 1:n) {#
        offset[i] = ifelse(x[[i]]$calCurve == "normal", 61, 0)#
    }#
    gauss <- function(x, mu, sig) {#
        u <- (x - mu)/sig#
        y <- exp(-u * u/2)#
        y#
    }#
    gbase <- function(x, mus) {#
        sig <- (mus[2] - mus[1])/2#
        G <- outer(x, mus, gauss, sig)#
        G#
    }#
    clrInv = function(phi) {#
        return(exp(phi)/sum(exp(phi)))#
    }#
    J = numMix#
    mu = seq(thetaRange[1], thetaRange[2], length = numMix)#
    theta = vector(length = n)#
    for (j in 1:n) theta[j] = round(stats::rnorm(1, mean = x[[j]]$ageGrid[match(max(x[[j]]$densities),#
    x[[j]]$densities)], sd = ageSds[j]), 3)#
    phi = c(stats::runif(J - 1, -10, 10), 0)#
    p = as.numeric(clrInv(phi))#
    G = gbase(theta, mu)#
    remaining = (iterations - burn)/thin#
    thetaStore = matrix(ncol = length(theta), nrow = remaining)#
    pStore = matrix(ncol = J, nrow = remaining)#
    thetaAll = matrix(NA, ncol = n, nrow = iterations)#
    for (j in 1:n) thetaAll[, j] = sample(xSmall[[j]]$ageGrid,#
    size = iterations, prob = xSmall[[j]]$densities, replace = TRUE)#
    mu2 = mu#
    sigma2 = (mu[2] - mu[1])/2#
    my_dnorm = function(x) stats::dnorm(x, mean = mu2, sd = sigma2)#
    pb = utils::txtProgressBar(min = 1, max = iterations, style = 3,#
    width = 60, title = "Running BchronDensity")#
    for (i in 1:iterations) {#
        utils::setTxtProgressBar(pb, i)#
        if (i > burn & i%%thin == 0) {#
            ind = (i - burn)/thin#
            thetaStore[ind, ] = theta#
            pStore[ind, ] = p#
        }#
        if (updateAges) {#
            for (j in 1:n) {#
                thetaNew = round(stats::rnorm(1, theta[j], 0.5),#
                3)#
                thetaNewMatch = as.integer(thetaNew + offset[j]) +#
                1#
                thetaNewLogDens = max(log(x[[j]]$densities[thetaNewMatch]),#
                -1e+06)#
                priorNew.dens = sum(p * stats::dnorm(thetaNew,#
                mean = mu2, sd = sigma2))#
                thetaMatch = as.integer(theta[j] + offset[j]) +#
                1#
                thetaLogDens = max(log(x[[j]]$densities[thetaMatch]),#
                -1e+06)#
                priorDens = sum(p * stats::dnorm(theta[j], mean = mu2,#
                sd = sigma2))#
                logRtheta = thetaNewLogDens - thetaLogDens +#
                log(priorNew.dens) - log(priorDens)#
                if (stats::runif(1) < exp(logRtheta))#
                theta[j] = thetaNew#
            }#
        }#
        else {#
            theta = thetaAll[i, ]#
        }#
        for (j in 1:(J - 1)) {#
            phiNew = stats::rnorm(1, phi[j], 1)#
            phiAllNew = phi#
            phiAllNew[j] = phiNew#
            pNew = as.numeric(clrInv(phiAllNew))#
            phiNewLogDens = sum(log(G %*% pNew))#
            phiLogDens = sum(log(G %*% p))#
            logRphi = phiNewLogDens - phiLogDens + stats::dunif(phiNew,#
            -10, 10, log = TRUE) - stats::dunif(phi[j], -10,#
            10, log = TRUE)#
            if (stats::runif(1) < exp(logRphi)) {#
                phi[j] = phiNew#
                p = as.numeric(clrInv(phi))#
            }#
        }#
    }#
    output = list(theta = thetaStore, p = pStore, mu = mu, calAges = xSmall,#
    G = G)#
    class(output) = "BchronDensityRun"#
    return(output)#
}#
#
###Function to modify existing SCDPD from BchronDensity (modified from Bchron)#
SlugDens.t <- function (x, xmin, xmax)#
{#
    n = length(x$calAges)#
    thetaRange = range(x$calAges[[1]]$ageGrid)#
    for (i in 2:n) thetaRange = range(c(thetaRange, x$calAges[[i]]$ageGrid))#
    dateGrid = seq(xmin, xmax, length = 1000)#
    gauss <- function(x, mu, sig) {#
        u <- (x - mu)/sig#
        y <- exp(-u * u/2)#
        y#
    }#
    gbase <- function(x, mus) {#
        sig <- (mus[2] - mus[1])/2#
        G <- outer(x, mus, gauss, sig)#
        G#
    }#
    Gstar = gbase(dateGrid, x$mu)#
    dens = vector(length = length(dateGrid))#
    for (i in 1:nrow(x$p)) {#
        dens = dens + Gstar %*% x$p[i, ]#
    }#
    densFinal = dens/sum(dens)#
    slugbase <- data.frame(dateGrid,densFinal)#
    colnames(slugbase) <- c("Age", "Density")#
    slugbase <- arrange(slugbase, desc(Age))#
    return(slugbase)#
}#
#
SlugSig <- function(x, sigma, n, reps, xmin, xmax) {#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.intcal <- rep("intcal13", length(x))#
    samp.slugdens <- BchronDensity(x, sigma, samp.intcal, numMix = 30, iterations=10000, burn=2000, thin=8, updateAges=FALSE)#
    samp.hist <- SlugDens.t(samp.slugdens, xmin, xmax)#
    makeloess <- function(x, n){#
        time <- seq(xmin+5, xmax-5, 10)#
        samp.14C <- sample(x, size=n, replace=TRUE)#
        samp.sig <- sample(sigma, size=n, replace=TRUE)#
        samp.dist.n <- BchronDensity(samp.14C, samp.sig, rep("intcal13", n), numMix = 30, iterations=10000, burn=2000, thin=8, updateAges=FALSE)#
        samp.dist <- SlugDens.t(samp.dist.n, xmin, xmax)#
        samp.loess <- lowess(samp.dist$Age, samp.dist$Density, f=0.15)#
        samp.fitted <- samp.loess$y#
        return(samp.fitted)#
    }#
    samp.replicate <- (pbreplicate(reps, makeloess(x, n)))#
    samp.replicate <- as.data.frame(samp.replicate)#
    samp.replicate[is.na(samp.replicate)] <- 0#
    samp.replicate <- sweep(samp.replicate,2,colSums(samp.replicate),`/`)#
    samp.results.replicate <- transform(samp.replicate, MEAN=apply(samp.replicate,1, mean, na.rm = TRUE))#
    samp.results.replicate <- transform(samp.results.replicate, SD=apply(samp.results.replicate,1, sd, na.rm = TRUE))#
    samp.descriptive <- data.frame(samp.hist$Age, samp.results.replicate$MEAN, samp.results.replicate$SD)#
    colnames(samp.descriptive) <- c("Age", "Mean", "SD")#
    #samp.descriptive <- arrange(samp.descriptive, desc(Age))#
    samp.all <- data.frame(samp.hist$Age, samp.hist$Density, samp.descriptive$Mean, samp.descriptive$SD, samp.replicate)#
    names(samp.all)[names(samp.all)=="samp.hist.Age"] <- "Age"#
    names(samp.all)[names(samp.all)=="samp.descriptive.Mean"] <- "Mean"#
    names(samp.all)[names(samp.all)=="samp.descriptive.SD"] <- "SD"#
    names(samp.all)[names(samp.all)=="samp.hist.Density"] <- "Density"#
    samp.all <- arrange(samp.all, desc(Age))#
    return(samp.all)#
}#
####Function to maintain significant digits in plot#
fmt <- function(){#
    function(x) format(x,nsmall = 4,scientific = FALSE)#
}#
site.median <- function(sites, region, dates, sigma) {#
    n.t <- rep(100, length(sites))#
    df <- data.frame(sites, region, dates, sigma)#
    colnames(df) <- c("Site", "Region", "X14C.year", "Sigma")#
    df <- arrange(df, desc(X14C.year))#
    df <- arrange(df, desc(Region))#
    df <- arrange(df, desc(Site))#
       df$Collapse <- rep("No", length(sites))#
    df <- transform(df, Collapse = ifelse(df[nrow(df)] > 0.05, "Yes", Collapse))#
    df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
    df <- as.data.frame(df)#
    df <- df[complete.cases(df),]#
    return(df)#
}#
site.time <- function(sites, dates, sigma, xmin, xmax, time) {#
    df <- data.frame(sites, dates, sigma)#
    colnames(df) <- c("Site",  "X14C.year", "Sigma")#
    df <- arrange(df, desc(X14C.year))#
    df <- arrange(df, desc(Site))#
    site.frame <- aggregate(x=df$X14C.year, by=list(df$Site), FUN=mean)#
    site.vector <- site.frame$x#
    site.frame.sig <- aggregate(x=df$Sigma, by=list(df$Site), FUN=mean)#
    site.vector.sig <- site.frame.sig$x#
    samp.intcal <- rep("intcal13", length(site.vector))#
    samp.slugdens <- BchronCalibrate(site.vector, site.vector.sig, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.median <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, median))#
    medians.all <-as.vector(samp.median[,1])#
    medians <- medians.all[medians.all < xmax & medians.all > xmin]#
    median.simple <- round((medians/100000), digits=2)*100000#
    median.table <- table(median.simple)#
    median.values <- as.numeric(paste(median.table))#
    median.frame <- data.frame(t(median.values))#
    colnames(median.frame) <- names(median.table)#
    median.t <- data.frame(t(median.frame))#
    median.df <- data.frame(add_rownames(median.t, "VALUE"))#
    colnames(median.df) <- c("Millenium", "Site")#
    median.df <- median.df[with(median.df, order(as.numeric(Millenium))), ]#
    null <- rep(0, length(time))#
    null.frame <- t(data.frame(null))#
    colnames(null.frame) <- time#
    null.t <- data.frame(t(null.frame))#
    null.df <- data.frame(add_rownames(null.t, "VALUE"))#
    colnames(null.df) <- c("Millenium", "Site")#
    all.frame <- merge(null.df, median.df, all=TRUE, by="Millenium")#
    all.frame[is.na(all.frame)] <- 0#
    all.frame <- all.frame[with(all.frame, order(as.numeric(Millenium))), ]#
    the.result <- data.frame(all.frame$Millenium, all.frame$Site.y)#
    colnames(the.result) <- c("Millenium", "Sites")#
    scaled <- as.vector(apply(data.frame(the.result$Sites), 2, function(x) scale(x)))#
    scaled.mean <- mean(scaled)#
    scaled.sd <- sd(scaled)#
    the.result$z.score <- (scaled-scaled.mean)/scaled.sd#
    the.result$p.value <- pnorm(the.result$z.score, lower.tail=FALSE)#
    return(format(the.result, digits=2))#
#
}#
median.stack.14C <- function(dates, sigma, sites, xmin, xmax, time){#
    samp.intcal <- rep("intcal13", length(dates))#
    samp.slugdens <- BchronCalibrate(dates, sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.median <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, median))#
    medians.all <-as.vector(samp.median[,1])#
    medians <- medians.all[medians.all < xmax & medians.all > xmin]#
    median.simple <- round((medians/100000), digits=2)*100000#
    median.table <- table(median.simple)#
    median.values <- as.numeric(paste(median.table))#
    median.frame <- data.frame(t(median.values))#
    colnames(median.frame) <- names(median.table)#
    median.t <- data.frame(t(median.frame))#
    median.df <- data.frame(add_rownames(median.t, "VALUE"))#
    colnames(median.df) <- c("Millenium", "Site")#
    median.df <- median.df[with(median.df, order(as.numeric(Millenium))), ]#
    null <- rep(0, length(time))#
    null.frame <- t(data.frame(null))#
    colnames(null.frame) <- time#
    null.t <- data.frame(t(null.frame))#
    null.df <- data.frame(add_rownames(null.t, "VALUE"))#
    colnames(null.df) <- c("Millenium", "Site")#
    all.frame <- merge(null.df, median.df, all=TRUE, by="Millenium")#
    all.frame[is.na(all.frame)] <- 0#
    all.frame <- all.frame[with(all.frame, order(as.numeric(Millenium))), ]#
    the.result <- data.frame(all.frame$Millenium, all.frame$Site.y)#
    colnames(the.result) <- c("Millenium", "Sites")#
#
    scaled <- as.vector(apply(data.frame(the.result$Sites), 2, function(x) scale(x)))#
    scaled.mean <- mean(scaled)#
    scaled.sd <- sd(scaled)#
    the.result$z.score <- (scaled-scaled.mean)/scaled.sd#
    the.result$p.value <- pnorm(the.result$z.score, lower.tail=FALSE)#
    return(format(the.result, digits=2))#
}#
site.time.half <- function(sites, dates, sigma, xmin, xmax, time) {#
    df <- data.frame(sites, dates, sigma)#
    colnames(df) <- c("Site",  "X14C.year", "Sigma")#
    df <- arrange(df, desc(X14C.year))#
    df <- arrange(df, desc(Site))#
    site.frame <- aggregate(x=df$X14C.year, by=list(df$Site), FUN=mean)#
    site.vector <- site.frame$x#
    site.frame.sig <- aggregate(x=df$Sigma, by=list(df$Site), FUN=mean)#
    site.vector.sig <- site.frame.sig$x#
    samp.intcal <- rep("intcal13", length(site.vector))#
    samp.slugdens <- BchronCalibrate(site.vector, site.vector.sig, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.median <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, median))#
    medians.all <-as.vector(samp.median[,1])#
    medians <- medians.all[medians.all < xmax & medians.all > xmin]#
    return(medians)#
}#
median.stack.14C.half <- function(x, sigma, sites, xmin, xmax){#
    samp.intcal <- rep("intcal13", length(x))#
    samp.slugdens <- BchronCalibrate(x, sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.median <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, median))#
    medians.all <-as.vector(samp.median[,1])#
    medians <- medians.all[medians.all < xmax & medians.all > xmin]#
    return(medians)#
}#
stack.14C.4D <- function(date, sigma, xmin, xmax, lat, long){#
    date.frame <- data.frame(date, sigma, lat, long)#
    names(date.frame) <- c("Date", "Sigma", "Lat", "Long")#
    date.sub <- subset(date.frame, xmin < Date & Date < xmax)#
    ids.cus = paste("Date", 1:length(date.sub$Date), sep = "")#
    coord.sub <- data.frame(ids.cus, date.sub$Lat, date.sub$Long)#
    names(coord.sub) <- c(".id", "Lat", "Long")#
    samp.intcal <- rep("intcal13", length(date.sub$Date))#
    samp.slugdens <- BchronCalibrate(date.sub$Date, date.sub$Sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.ages.dt <- data.table(samp.ages)#
    coord.sub.dt <- data.table(coord.sub)#
    samp.coord <- merge(samp.ages, coord.sub, by.x=".id", by.y=".id")#
    return(samp.coord)#
}#
mapGenPoint <- function(map, date, sigma, xmin, xmax, lat, long, interval, x.res, y.res) {#
    calibrated.date.frame <- stack.14C.4D(date=date, sigma=sigma, xmin=xmin, xmax=xmax, lat=lat, long=long)#
    date.interval <- seq(from=xmin, to=xmax, by=interval)#
    date.interval <- rev(date.interval)#
    date.list <- pbapply::pblapply(date.interval, function(x) subset(calibrated.date.frame, calibrated.date.frame$ageGrid > x & calibrated.date.frame$ageGrid < x+interval))#
    animation::ani.options(convert="/usr/local/bin/convert")#
    animation::saveVideo(expr=for (i in seq_along(date.interval)) {#
        num.f <- formatC(seq(xmin, xmax, interval), width=5, format="d", flag="0")#
        num <- rev(num.f)#
        #num <- formatC(seq(1, length(date.interval), 1), width=6, format="d", flag="0")#
        plots <- ggmap(map, alpha=0.2) +#
        geom_point(data=data.frame(date.list[i]), aes(x=Long, y=Lat), colour="red", alpha=0.05, size=7, shape=15)+#
        coord_equal() +#
        scale_y_continuous("Latitude", limits = c(35, 46)) +#
        scale_x_continuous("Longitude", limits = c(-10, 5)) +#
        coord_map() +#
        theme_tufte() +#
        ggtitle(paste(date.interval[i], " cal BP", sep="")) +#
        guides(size=FALSE, colour=FALSE, alpha=FALSE, shape=FALSE)#
        ggsave(plots, filename=paste("map",num[i], ".png", sep=""))#
    }, video.name="iberia.mp4", img.name="map")#
    #ffmpeg -f image2 -i map%06d.png -vcodec mjpeg -q:v 0 -r 25 iberia.avi#
}#
#
mapGenPointDual <- function(map, human.date, megafauna.date, human.sigma, megafauna.sigma, xmin, xmax, human.lat, human.long, megafauna.lat, megafauna.long, interval, x.res, y.res) {#
    human.calibrated.date.frame <- stack.14C.4D(date=human.date, sigma=human.sigma, xmin=xmin, xmax=xmax, lat=human.lat, long=human.long)#
    human.calibrated.date.frame$Legend <- rep("Human", length(human.calibrated.date.frame$ageGrid))#
    megafauna.calibrated.date.frame <- stack.14C.4D(date=megafauna.date, sigma=megafauna.sigma, xmin=xmin, xmax=xmax, lat=megafauna.lat, long=megafauna.long)#
    megafauna.calibrated.date.frame$Legend <- rep("Megafauna", length(megafauna.calibrated.date.frame$ageGrid))#
    all.ageGrid <- c(human.calibrated.date.frame$ageGrid,megafauna.calibrated.date.frame$ageGrid)#
    all.lat <- c(human.calibrated.date.frame$Lat,megafauna.calibrated.date.frame$Lat)#
    all.long <- c(human.calibrated.date.frame$Long,megafauna.calibrated.date.frame$Long)#
    all.legend <- c(human.calibrated.date.frame$Legend,megafauna.calibrated.date.frame$Legend)#
    calibrated.date.frame <- data.frame(all.ageGrid,all.lat,all.long,all.legend)#
    colnames(calibrated.date.frame) <- c("ageGrid", "Lat", "Long", "Legend")#
    date.interval <- seq(from=xmin, to=xmax, by=interval)#
    date.interval <- rev(date.interval)#
    date.list <- pbapply::pblapply(date.interval, function(x) subset(calibrated.date.frame, calibrated.date.frame$ageGrid > x & calibrated.date.frame$ageGrid < x+interval))#
    animation::ani.options(convert="/usr/local/bin/convert")#
    animation::saveVideo(expr=for (i in seq_along(date.interval)) {#
        #num.f <- formatC(seq(xmin, xmax, interval), width=5, format="d", flag="0")#
        #num <- rev(num.f)#
        num <- formatC(seq(1, length(date.interval), 1), width=6, format="d", flag="0")#
        plots <- ggmap(map, alpha=0.2) +#
        geom_point(data=data.frame(date.list[i]), aes(x=Long, y=Lat, colour=Legend), alpha=0.2, size=4, shape=15)+#
        coord_equal() +#
        coord_map() +#
        theme_tufte() +#
        ggtitle(paste(date.interval[i], " cal BP", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE)#
        ggsave(plots, filename=paste("map",num[i], ".png", sep=""))#
    }, video.name="iberia.mp4", img.name="map")#
    #ffmpeg -f image2 -i map%06d.png -vcodec mjpeg -q:v 0 -r 25 iberia.avi#
}#
collapse.the.dates.begin <- function(sites, region, dates, sigma, lat, long, taxa, xmin, xmax) {#
    date.frame <- data.frame(sites, region, dates, sigma, lat, long, taxa)#
    names(date.frame) <- c("Sites", "Region", "Date", "Sigma", "Lat", "Long", "Taxa")#
    date.frame <- date.frame[complete.cases(date.frame),]#
    date.sub <- subset(date.frame, (xmin-500) < Date & Date < (xmax + 500))#
    n.t <- rep(100, length(sites))#
    df <- data.frame(date.sub$Sites, date.sub$Region, date.sub$Date, date.sub$Sigma, date.sub$Lat, date.sub$Long, date.sub$Taxa)#
    colnames(df) <- c("Site", "Region", "X14C.year", "Sigma", "Lat", "Long", "Taxa")#
    df <- arrange(df, desc(X14C.year))#
    df <- arrange(df, desc(Site))#
    df <- arrange(df, desc(Region))#
    df$Ttest <- c(#
    (abs(df[1:(nrow(df)-1),3]-df[2:nrow(df), 3]))/((sqrt(df[2:nrow(df), 4]^2 + df[1:(nrow(df)-1),4]^2)*sqrt(1/100))), NA)#
    df$pvalue <- c((2*pt(df[1:nrow(df),8], 100, lower=FALSE)))#
    df$Collapse <- rep("No", length(df$Site))#
    df <- transform(df, Collapse = ifelse(pvalue > 0.05, "Yes", Collapse))#
    df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
    df <- as.data.frame(df)#
    df <- df[complete.cases(df),]#
    return(df)#
}#
dateScrub <- function(dataframe, age.min, age.max) {#
    dataframe$point <- 0#
    dataframe$point[findInterval(dataframe$Age, c(age.min,age.max)) == 1L] <- 1#
    return(dataframe)#
}#
#
dateScrubVector <- function(dataframe, interval) {#
    date.interval <- seq(from=mind(dataframe$Age, to=dataframe$Age, by=interval)#
    date.interval <- rev(date.interval)#
    date.min <- date.interval-interval/2#
    date.max <- date.interval+interval/2#
    dataframe$point <- 0#
    dataframe$point[findInterval(dataframe$Age, c(date.min,date.max)) == 1L] <- 1#
    return(dataframe)#
}#
###Load Data#
#megafauna.data <- read.csv(file="http://www.bleedrake.com/megafauna/megafauna.csv")#
#human.data <- read.csv(file="http://www.bleedrake.com/megafauna/humansaudited.csv")#
#
megafauna.data <- read.csv(file="~/Dropbox/Documents/SCDPD/Megafauna Database/Megafauna Sigma Purge-Table 1.csv")#
human.data <- read.csv(file="~/Dropbox/Documents/SCDPD/Humans Audited.csv")#
megafauna.data <- collapse.the.dates.begin(sites=megafauna.data$Site, region=megafauna.data$Region, dates=megafauna.data$X14C.year, sigma=megafauna.data$Sigma, lat=megafauna.data$Lat, long=megafauna.data$Long, taxa=megafauna.data$Simple.Taxon, xmin=2000, xmax=40000)#
human.data <- collapse.the.dates.begin(sites=human.data$Site_name, region=human.data$Region, dates=human.data$X14C.year, sigma=human.data$Sigma, lat=human.data$Lat, long=human.data$Long, taxa=rep("Human", length(human.data$Site_name)), xmin=2000, xmax=40000)#
gisp2 <- read.csv(file="http://www.bleedrake.com/megafauna/gisp2.csv")#
epica <- read.csv(file="http://www.bleedrake.com/megafauna/epica.csv")#
#
###Load Calibration Curves#
intcal.13 <- read.csv(file="http://www.bleedrake.com/megafauna/intcal13.csv")#
intcal.13 <- read.csv(file="~/Dropbox/Documents/SCDPD/Data/intcal13.csv")#
########MEGAFAUNA##########
western.megafauna.14C <- subset(megafauna.data$X14C.year, megafauna.data$Region=="Western North America")#
central.megafauna.14C <- subset(megafauna.data$X14C.year, megafauna.data$Region=="Central North America")#
eastern.megafauna.14C <- subset(megafauna.data$X14C.year, megafauna.data$Region=="Eastern North America")#
all.eastern.megafauna.14C <- c(as.numeric(central.megafauna.14C), as.numeric(eastern.megafauna.14C))#
south.america.megafauna.14C <- subset(megafauna.data$X14C.year, megafauna.data$Region=="South America")#
siberia.megafauna.14C <- subset(megafauna.data$X14C.year, megafauna.data$Region=="Siberia")#
east.beringia.megafauna.14C <- subset(megafauna.data$X14C.year, megafauna.data$Region=="East Beringia")#
europe.megafauna.14C <- subset(megafauna.data$X14C.year, megafauna.data$Region=="Europe")#
oceania.megafauna.14C <- subset(megafauna.data$X14C.year, megafauna.data$Region=="Oceania")#
oceania.megafauna.14C <- subset(megafauna.data$X14C.year, megafauna.data$Region=="Oceania")#
africa.megafauna.14C <- subset(megafauna.data$X14C.year, megafauna.data$Region=="Africa")#
western.megafauna.sig<- subset(megafauna.data$Sigma, megafauna.data$Region=="Western North America")#
central.megafauna.sig <- subset(megafauna.data$Sigma, megafauna.data$Region=="Central North America")#
eastern.megafauna.sig <- subset(megafauna.data$Sigma, megafauna.data$Region=="Eastern North America")#
all.eastern.megafauna.sig <- c(central.megafauna.sig, eastern.megafauna.sig)#
south.america.megafauna.sig <- subset(megafauna.data$Sigma, megafauna.data$Region=="South America")#
siberia.megafauna.sig <- subset(megafauna.data$Sigma, megafauna.data$Region=="Siberia")#
east.beringia.megafauna.sig <- subset(megafauna.data$Sigma, megafauna.data$Region=="East Beringia")#
europe.megafauna.sig <- subset(megafauna.data$Sigma, megafauna.data$Region=="Europe")#
oceania.megafauna.sig <- subset(megafauna.data$Sigma, megafauna.data$Region=="Oceania")#
africa.megafauna.sig <- subset(megafauna.data$Sigma, megafauna.data$Region=="Africa")#
western.megafauna.intcal <- rep("intcal13", length(western.megafauna.14C))#
central.megafauna.intcal <- rep("intcal13", length(central.megafauna.14C))#
eastern.megafauna.intcal <- rep("intcal13", length(eastern.megafauna.14C))#
all.eastern.megafauna.intcal <- c(central.megafauna.intcal, eastern.megafauna.intcal)#
south.america.megafauna.intcal <- rep("intcal13", length(south.america.megafauna.14C))#
siberia.megafauna.intcal <- rep("intcal13", length(siberia.megafauna.14C))#
east.beringia.megafauna.intcal <- rep("intcal13", length(east.beringia.megafauna.14C))#
europe.megafauna.intcal <- rep("intcal13", length(europe.megafauna.14C))#
oceania.megafauna.intcal <- rep("intcal13", length(oceania.megafauna.14C))#
africa.megafauna.intcal <- rep("intcal13", length(africa.megafauna.14C))#
western.megafauna.sites<- subset(megafauna.data$Site, megafauna.data$Region=="Western North America")#
central.megafauna.sites <- subset(megafauna.data$Site, megafauna.data$Region=="Central North America")#
eastern.megafauna.sites <- subset(megafauna.data$Site, megafauna.data$Region=="Eastern North America")#
all.eastern.megafauna.sites <- c(as.vector(central.megafauna.sites), as.vector(eastern.megafauna.sites))#
south.america.megafauna.sites <- subset(megafauna.data$Site, megafauna.data$Region=="South America")#
siberia.megafauna.sites <- subset(megafauna.data$Site, megafauna.data$Region=="Siberia")#
east.beringia.megafauna.sites <- subset(megafauna.data$Site, megafauna.data$Region=="East Beringia")#
europe.megafauna.sites <- subset(megafauna.data$Site, megafauna.data$Region=="Europe")#
oceania.megafauna.sites <- subset(megafauna.data$Site, megafauna.data$Region=="Oceania")#
africa.megafauna.sites <- subset(megafauna.data$Site, megafauna.data$Region=="Africa")#
western.megafauna.site.count <- length(unique(western.megafauna.sites))#
eastern.megafauna.site.count <- length(unique(eastern.megafauna.sites))#
central.megafauna.site.count <- length(unique(central.megafauna.sites))#
all.eastern.megafauna.site.count <- eastern.megafauna.site.count + central.megafauna.site.count#
south.america.megafauna.site.count <- length(unique(south.america.megafauna.sites))#
siberia.megafauna.site.count <- length(unique(siberia.megafauna.sites))#
east.beringia.megafauna.site.count <- length(unique(east.beringia.megafauna.sites))#
europe.megafauna.site.count <- length(unique(europe.megafauna.sites))#
oceania.megafauna.site.count <- length(unique(oceania.megafauna.sites))#
africa.megafauna.site.count <- length(unique(africa.megafauna.sites))#
#
western.megafauna.sites<- subset(megafauna.data$Site, megafauna.data$Region=="Western North America")#
central.megafauna.sites <- subset(megafauna.data$Site, megafauna.data$Region=="Central North America")#
eastern.megafauna.sites <- subset(megafauna.data$Site, megafauna.data$Region=="Eastern North America")#
all.eastern.megafauna.sites <- c(central.megafauna.sites, eastern.megafauna.sites)#
south.america.megafauna.sites <- subset(megafauna.data$Site, megafauna.data$Region=="South America")#
siberia.megafauna.sites <- subset(megafauna.data$Site, megafauna.data$Region=="Siberia")#
east.beringia.megafauna.sites <- subset(megafauna.data$Site, megafauna.data$Region=="East Beringia")#
europe.megafauna.sites <- subset(megafauna.data$Site, megafauna.data$Region=="Europe")#
oceania.megafauna.sites <- subset(megafauna.data$Site, megafauna.data$Region=="Oceania")#
africa.megafauna.sites <- subset(megafauna.data$Site, megafauna.data$Region=="Africa")#
western.megafauna.lat<- as.numeric(as.vector(subset(megafauna.data$Lat, megafauna.data$Region=="Western North America")))#
central.megafauna.lat <- as.numeric(as.vector(subset(megafauna.data$Lat, megafauna.data$Region=="Central North America")))#
eastern.megafauna.lat <- as.numeric(as.vector(subset(megafauna.data$Lat, megafauna.data$Region=="Eastern North America")))#
all.eastern.megafauna.lat <- c(as.numeric(as.vector(central.megafauna.lat)), as.numeric(as.vector(eastern.megafauna.lat)))#
south.america.megafauna.lat <- as.numeric(as.vector(subset(megafauna.data$Lat, megafauna.data$Region=="South America")))#
siberia.megafauna.lat <- subset(as.numeric(as.vector(megafauna.data$Lat)), megafauna.data$Region=="Siberia")#
east.beringia.megafauna.lat <- as.numeric(as.vector(subset(megafauna.data$Lat, megafauna.data$Region=="East Beringia")))#
europe.megafauna.lat <- as.numeric(as.vector(subset(megafauna.data$Lat, megafauna.data$Region=="Europe")))#
oceania.megafauna.lat <- as.numeric(as.vector(subset(megafauna.data$Lat, megafauna.data$Region=="Oceania")))#
africa.megafauna.lat <- as.numeric(as.vector(subset(megafauna.data$Lat, megafauna.data$Region=="Africa")))#
western.megafauna.long<- as.numeric(as.vector(subset(megafauna.data$Long, megafauna.data$Region=="Western North America")))#
central.megafauna.long <- as.numeric(as.vector(subset(megafauna.data$Long, megafauna.data$Region=="Central North America")))#
eastern.megafauna.long <- as.numeric(as.vector(subset(megafauna.data$Long, megafauna.data$Region=="Eastern North America")))#
all.eastern.megafauna.long <- c(as.numeric(as.vector(central.megafauna.long)), as.numeric(as.vector(eastern.megafauna.long)))#
south.america.megafauna.long <- as.numeric(as.vector(subset(megafauna.data$Long, megafauna.data$Region=="South America")))#
siberia.megafauna.long <- as.numeric(as.vector(subset(megafauna.data$Long, megafauna.data$Region=="Siberia")))#
east.beringia.megafauna.long <- as.numeric(as.vector(subset(megafauna.data$Long, megafauna.data$Region=="East Beringia")))#
europe.megafauna.long <- as.numeric(as.vector(subset(megafauna.data$Long, megafauna.data$Region=="Europe")))#
oceania.megafauna.long <- as.numeric(as.vector(subset(megafauna.data$Long, megafauna.data$Region=="Oceania")))#
africa.megafauna.long <- as.numeric(as.vector(subset(megafauna.data$Long, megafauna.data$Region=="Africa")))#
#western.megafauna.slugdens <- BchronDensity(western.megafauna.14C, western.megafauna.sig, western.megafauna.intcal, numMix = 30, iterations = 10000, burn = 2000, thin = 8, updateAges = FALSE)#
#central.megafauna.slugdens <- BchronDensity(central.megafauna.14C, central.megafauna.sig, central.megafauna.intcal, numMix = 30, iterations = 10000, burn = 2000, thin = 8, updateAges = FALSE)#
#eastern.megafauna.slugdens <- BchronDensity(eastern.megafauna.14C, eastern.megafauna.sig, eastern.megafauna.intcal, numMix = 30, iterations = 10000, burn = 2000, thin = 8, updateAges = FALSE)#
#all.eastern.megafauna.slugdens <-  BchronDensity(all.eastern.megafauna.14C, all.eastern.megafauna.sig, all.eastern.megafauna.intcal, numMix = 30, iterations = 10000, burn = 2000, thin = 8, updateAges = FALSE)#
#south.america.megafauna.slugdens <- BchronDensity(south.america.megafauna.14C, south.america.megafauna.sig, south.america.megafauna.intcal, numMix = 30, iterations = 10000, burn = 2000, thin = 8, updateAges = FALSE)#
#east.beringia.megafauna.slugdens <- BchronDensity(east.beringia.megafauna.14C, east.beringia.megafauna.sig, east.beringia.megafauna.intcal, numMix = 30, iterations = 10000, burn = 2000, thin = 8, updateAges = FALSE)#
#siberia.megafauna.slugdens <- BchronDensity(siberia.megafauna.14C, siberia.megafauna.sig, siberia.megafauna.intcal, numMix = 30, iterations = 10000, burn = 2000, thin = 8, updateAges = FALSE)#
#europe.megafauna.slugdens <- BchronDensity(europe.megafauna.14C, europe.megafauna.sig, europe.megafauna.intcal, numMix = 30, iterations = 10000, burn = 2000, thin = 8, updateAges = FALSE)#
#
#western.megafauna.slug <- SlugDens.t(western.megafauna.slugdens, xmin=0, xmax=50000)#
#all.eastern.megafauna.slug <- SlugDens.t(all.eastern.megafauna.slugdens, xmin=0, xmax=50000)#
#south.america.megafauna.slug <- SlugDens.t(south.america.megafauna.slugdens, xmin=0, xmax=50000)#
#alaska.megafauna.slug <- SlugDens.t(east.beringia.megafauna.slugdens, xmin=0, xmax=50000)#
#siberia.megafauna.slug <- SlugDens.t(siberia.megafauna.slugdens, xmin=0, xmax=50000)#
#europe.megafauna.slug <- SlugDens.t(europe.megafauna.slugdens, xmin=0, xmax=50000)#
#
#megafauna.slug <- data.frame(western.megafauna.slug$Age, western.megafauna.slug$Density, all.eastern.megafauna.slug$Density, south.america.megafauna.slug$Density, alaska.megafauna.slug$Density, siberia.megafauna.slug$Density, europe.megafauna.slug$Density)#
#colnames(megafauna.slug) <- c("Age", "Western North America", "Eastern North America", "South America", "Alaska", "Siberia", "Europe")#
#megafauna.slug <- arrange(megafauna.slug, desc(Age))#
#
#megafauna.slug.melt <- melt(megafauna.slug, id="Age")#
#
#all.megafauna.density <- qplot(Age, value, data=megafauna.slug.melt, colour=variable, linetype=variable, xlab = "Cal yr BP", ylab = "Density", geom="line") + theme_classic() + theme(legend.title=element_blank())#
#
########HUMANS##########
###Create vectors from data set by region#
#
western.human.14C <- subset(human.data$X14C.year, human.data$Region=="Western North America")#
central.human.14C <- subset(human.data$X14C.year, human.data$Region=="Central North America")#
eastern.human.14C <- subset(human.data$X14C.year, human.data$Region=="Eastern North America")#
all.eastern.human.14C <- c(central.human.14C, eastern.human.14C)#
south.america.human.14C <- subset(human.data$X14C.year, human.data$Region=="South America")#
siberia.human.14C <- subset(human.data$X14C.year, human.data$Region=="Siberia")#
east.beringia.human.14C <- subset(human.data$X14C.year, human.data$Region=="East Beringia")#
europe.human.14C <- subset(human.data$X14C.year, human.data$Region=="Europe")#
oceania.human.14C <- subset(human.data$X14C.year, human.data$Region=="Oceania")#
africa.human.14C <- subset(human.data$X14C.year, human.data$Region=="Africa")#
western.human.sig<- subset(human.data$Sigma, human.data$Region=="Western North America")#
central.human.sig <- subset(human.data$Sigma, human.data$Region=="Central North America")#
eastern.human.sig <- subset(human.data$Sigma, human.data$Region=="Eastern North America")#
all.eastern.human.sig <- c(central.human.sig, eastern.human.sig)#
south.america.human.sig <- subset(human.data$Sigma, human.data$Region=="South America")#
siberia.human.sig <- subset(human.data$Sigma, human.data$Region=="Siberia")#
east.beringia.human.sig <- subset(human.data$Sigma, human.data$Region=="East Beringia")#
europe.human.sig <- subset(human.data$Sigma, human.data$Region=="Europe")#
oceania.human.sig <- subset(human.data$Sigma, human.data$Region=="Oceania")#
africa.human.sig <- subset(human.data$Sigma, human.data$Region=="Africa")#
western.human.intcal <- rep("intcal13", length(western.human.14C))#
central.human.intcal <- rep("intcal13", length(central.human.14C))#
eastern.human.intcal <- rep("intcal13", length(eastern.human.14C))#
all.eastern.human.intcal <- c(central.human.intcal, eastern.human.intcal)#
south.america.human.intcal <- rep("intcal13", length(south.america.human.14C))#
siberia.human.intcal <- rep("intcal13", length(siberia.human.14C))#
east.beringia.human.intcal <- rep("intcal13", length(east.beringia.human.14C))#
europe.human.intcal <- rep("intcal13", length(europe.human.14C))#
oceania.human.intcal <- rep("intcal13", length(oceania.human.14C))#
africa.human.intcal <- rep("intcal13", length(africa.human.14C))#
western.human.sites<- subset(human.data$Site, human.data$Region=="Western North America")#
central.human.sites <- subset(human.data$Site, human.data$Region=="Central North America")#
eastern.human.sites <- subset(human.data$Site, human.data$Region=="Eastern North America")#
all.eastern.human.sites <- c(central.human.sites, eastern.human.sites)#
south.america.human.sites <- subset(human.data$Site, human.data$Region=="South America")#
siberia.human.sites <- subset(human.data$Site, human.data$Region=="Siberia")#
east.beringia.human.sites <- subset(human.data$Site, human.data$Region=="East Beringia")#
europe.human.sites <- subset(human.data$Site, human.data$Region=="Europe")#
oceania.human.sites <- subset(human.data$Site, human.data$Region=="Oceania")#
africa.human.sites <- subset(human.data$Site, human.data$Region=="Africa")#
western.human.site.count <- length(unique(western.human.sites))#
eastern.human.site.count <- length(unique(western.human.sites))#
central.human.site.count <- length(unique(western.human.sites))#
all.eastern.human.site.count <- sum(eastern.human.site.count, central.human.site.count)#
south.america.human.site.count <- length(unique(eastern.human.sites))#
siberia.human.site.count <- length(unique(siberia.human.sites))#
east.beringia.human.site.count <- length(unique(east.beringia.human.sites))#
europe.human.site.count <- length(unique(europe.human.sites))#
oceania.human.site.count <- length(unique(oceania.human.sites))#
africa.human.site.count <- length(unique(africa.human.sites))#
western.human.lat<- as.numeric(as.vector(subset(human.data$Lat, human.data$Region=="Western North America")))#
central.human.lat <- as.numeric(as.vector(subset(human.data$Lat, human.data$Region=="Central North America")))#
eastern.human.lat <- as.numeric(as.vector(subset(human.data$Lat, human.data$Region=="Eastern North America")))#
all.eastern.human.lat <- c(as.numeric(as.vector(central.human.lat)), as.numeric(as.vector(eastern.human.lat)))#
south.america.human.lat <- as.numeric(as.vector(subset(human.data$Lat, human.data$Region=="South America")))#
siberia.human.lat <- as.numeric(as.vector(subset(human.data$Lat, human.data$Region=="Siberia")))#
east.beringia.human.lat <- as.numeric(as.vector(subset(human.data$Lat, human.data$Region=="East Beringia")))#
europe.human.lat <- as.numeric(as.vector(subset(human.data$Lat, human.data$Region=="Europe")))#
oceania.human.lat <- as.numeric(as.vector(subset(human.data$Lat, human.data$Region=="Oceania")))#
africa.human.lat <- as.numeric(as.vector(subset(human.data$Lat, human.data$Region=="Africa")))#
western.human.long<- as.numeric(as.vector(subset(human.data$Long, human.data$Region=="Western North America")))#
central.human.long <- as.numeric(as.vector(subset(human.data$Long, human.data$Region=="Central North America")))#
eastern.human.long <- as.numeric(as.vector(subset(human.data$Long, human.data$Region=="Eastern North America")))#
all.eastern.human.long <- c(as.numeric(as.vector(central.human.long)), as.numeric(as.vector(eastern.human.long)))#
south.america.human.long <- as.numeric(as.vector(subset(human.data$Long, human.data$Region=="South America")))#
siberia.human.long <- as.numeric(as.vector(subset(human.data$Long, human.data$Region=="Siberia")))#
east.beringia.human.long <- as.numeric(as.vector(subset(human.data$Long, human.data$Region=="East Beringia")))#
europe.human.long <- as.numeric(as.vector(subset(human.data$Long, human.data$Region=="Europe")))#
oceania.human.long <- as.numeric(as.vector(subset(human.data$Long, human.data$Region=="Oceania")))#
africa.human.long <- as.numeric(as.vector(subset(human.data$Long, human.data$Region=="Africa")))#
stack.14C.4D <- function(date, sigma, xmin, xmax, lat, long){#
    date.frame <- data.frame(date, sigma, lat, long)#
    names(date.frame) <- c("Date", "Sigma", "Lat", "Long")#
    date.sub <- subset(date.frame, xmin < Date & Date < xmax)#
    ids.cus = paste("Date", 1:length(date.sub$Date), sep = "")#
    coord.sub <- data.frame(ids.cus, date.sub$Lat, date.sub$Long)#
    names(coord.sub) <- c(".id", "Lat", "Long")#
    samp.intcal <- rep("intcal13", length(date.sub$Date))#
    samp.slugdens <- BchronCalibrate(date.sub$Date, date.sub$Sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.coord <- merge(samp.ages, coord.sub, by.x=".id")#
    return(samp.coord)#
}#
#
median.stack.14C.4d <- function(x, sigma, sites, xmin, xmax){#
    samp.intcal <- rep("intcal13", length(x))#
    samp.slugdens <- BchronCalibrate(x, sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.median <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, median))#
    medians.all <-as.vector(samp.median[,1])#
    medians <- medians.all[medians.all < xmax & medians.all > xmin]#
    return(medians)#
}#
stack.14C.4D.old <- function(date, sigma, xmin, xmax, lat, long){#
    date <- c(date, 100)#
    sigma <- c(sigma, 50)#
    lat <- c(lat, 0)#
    long <- c(long, 0)#
    date.frame <- data.frame(date, sigma, lat, long)#
    names(date.frame) <- c("Date", "Sigma", "Lat", "Long")#
    date.frame <- date.frame[complete.cases(date.frame),]#
    date.sub <- subset(date.frame, (xmin-500) < Date & Date < (xmax + 500))#
    ids.cus = paste("date", 1:length(date.sub$Date), sep = "")#
    coord.sub <- data.frame(ids.cus, date.sub$Lat, date.sub$Long)#
    names(coord.sub) <- c(".id", "Lat", "Long")#
    samp.intcal <- rep("intcal13", length(date.sub$Date))#
    samp.slugdens <- BchronCalibrate(date.sub$Date, date.sub$Sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.mean <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, mean))#
    samp.sd <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, sd))#
    samp.frame <- data.frame(samp.mean, samp.sd)#
    colnames(samp.frame) <- c("Mean", "Sd")#
    samp.frame$Min <- samp.frame$Mean-date.sub$Sigma#
    samp.frame$Max <- samp.frame$Mean+date.sub$Sigma#
    samp.frame$Lat <- coord.sub$Lat#
    samp.frame$Long <- coord.sub$Long#
    samp.frame <- data.table(samp.frame)#
    lat.frame <- samp.frame[, list(Lat=Lat, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
    long.frame <- samp.frame[, list(Long=Long, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
    fin.frame <- data.frame(lat.frame$Lat, long.frame$Long, lat.frame$ageGrid)#
    colnames(fin.frame) <- c("Lat", "Long", "ageGrid")#
    return(fin.frame)#
}#
stack.14C.4D <- function(date, sigma, xmin, xmax, lat, long){#
    date <- c(date, 100)#
    sigma <- c(sigma, 50)#
    lat <- c(lat, 0)#
    long <- c(long, 0)#
    date.frame <- data.frame(date, sigma, lat, long)#
    names(date.frame) <- c("Date", "Sigma", "Lat", "Long")#
    date.frame <- date.frame[complete.cases(date.frame),]#
    date.sub <- subset(date.frame, (xmin-500) < Date & Date < (xmax + 500))#
    ids.cus = paste("date", 1:length(date.sub$Date), sep = "")#
    coord.sub <- data.frame(ids.cus, date.sub$Lat, date.sub$Long)#
    names(coord.sub) <- c(".id", "Lat", "Long")#
    samp.intcal <- rep("intcal13", length(date.sub$Date))#
    samp.slugdens <- BchronCalibrate(date.sub$Date, date.sub$Sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.mean <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, mean))#
    samp.sd <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, sd))#
    samp.frame <- data.frame(samp.mean, samp.sd)#
    colnames(samp.frame) <- c("Mean", "Sd")#
    samp.frame$Min <- samp.frame$Mean-date.sub$Sigma#
    samp.frame$Max <- samp.frame$Mean+date.sub$Sigma#
    samp.frame$Lat <- coord.sub$Lat#
    samp.frame$Long <- coord.sub$Long#
    samp.frame <- data.table(samp.frame)#
    lat.frame <- samp.frame[, list(Lat=Lat, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
    long.frame <- samp.frame[, list(Long=Long, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
    fin.frame <- data.frame(lat.frame$Lat, long.frame$Long, lat.frame$ageGrid)#
    colnames(fin.frame) <- c("Lat", "Long", "ageGrid")#
    return(fin.frame)#
}#
mapGenPointDual <- function(map, human.date, megafauna.date, human.sigma, megafauna.sigma, xmin, xmax, human.lat, human.long, megafauna.lat, megafauna.long, interval, x.res, y.res) {#
    human.calibrated.date.frame <- stack.14C.4D(date=human.date, sigma=human.sigma, xmin=xmin, xmax=xmax, lat=human.lat, long=human.long)#
    #human.calibrated.date.frame <- subset(human.calibrated.date.frame, human.calibrated.date.frame$ageGrid < 16500)#
    human.calibrated.date.frame$Legend <- rep("Human", length(human.calibrated.date.frame$ageGrid))#
    megafauna.calibrated.date.frame <- stack.14C.4D(date=megafauna.date, sigma=megafauna.sigma, xmin=xmin, xmax=xmax, lat=megafauna.lat, long=megafauna.long)#
    megafauna.calibrated.date.frame$Legend <- rep("Megafauna", length(megafauna.calibrated.date.frame$ageGrid))#
    blank <- seq(1, 50000, 1)#
    blank.lat <- rep(0, length(blank))#
    blank.long <- rep(0, length(blank))#
    blank.human <- rep("Human", length(blank))#
    blank.megafauna <- rep("Megafauna", length(blank))#
    all.ageGrid <- c(human.calibrated.date.frame$ageGrid,megafauna.calibrated.date.frame$ageGrid, blank, blank)#
    all.lat <- c(human.calibrated.date.frame$Lat,megafauna.calibrated.date.frame$Lat, blank.lat, blank.lat)#
    all.long <- c(human.calibrated.date.frame$Long,megafauna.calibrated.date.frame$Long, blank.long, blank.long)#
    all.legend <- c(human.calibrated.date.frame$Legend,megafauna.calibrated.date.frame$Legend, blank.human, blank.megafauna)#
    calibrated.date.frame <- data.frame(all.ageGrid,all.lat,all.long,all.legend)#
    colnames(calibrated.date.frame) <- c("ageGrid", "Lat", "Long", "Legend")#
    date.interval <- seq(from=xmin, to=xmax, by=interval)#
    date.interval <- rev(date.interval)#
    date.list <- pbapply::pblapply(date.interval, function(x) subset(calibrated.date.frame, calibrated.date.frame$ageGrid > x & calibrated.date.frame$ageGrid < x+interval))#
    animation::ani.options(convert="/usr/local/bin/convert")#
    animation::saveVideo(expr=for (i in seq_along(date.interval)) {#
        #num.f <- formatC(seq(xmin, xmax, interval), width=5, format="d", flag="0")#
        #num <- rev(num.f)#
        num <- formatC(seq(1, length(date.interval), 1), width=6, format="d", flag="0")#
        plots <- ggmap(map, alpha=0.2) +#
        geom_point(data=data.frame(date.list[i]), aes(x=Long, y=Lat, colour=Legend), alpha=0.5, size=4, shape=15)+#
        coord_equal() +#
        coord_map() +#
        theme_tufte() +#
        ggtitle(paste(date.interval[i], " cal BP", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE)#
        ggsave(plots, filename=paste("map",num[i], ".png", sep=""))#
    }, video.name="iberia.mp4", img.name="map")#
    #ffmpeg -f image2 -i map%06d.png -vcodec mjpeg -q:v 0 -r 25 iberia.avi#
}#
#
# addalpha()#
addalpha <- function(colors, alpha=1.0) {#
    r <- col2rgb(colors, alpha=T)#
    # Apply alpha#
    r[4,] <- alpha*255#
    r <- r/255.0#
    return(rgb(r[1,], r[2,], r[3,], r[4,]))#
}#
#
# colorRampPaletteAlpha()#
colorRampPaletteAlpha <- function(colors, n=32, interpolate='linear') {#
    # Create the color ramp normally#
    cr <- colorRampPalette(colors, interpolate=interpolate)(n)#
    # Find the alpha channel#
    a <- col2rgb(colors, alpha=T)[4,]#
    # Interpolate#
    if (interpolate=='linear') {#
        l <- approx(a, n=n)#
    } else {#
        l <- spline(a, n=n)#
    }#
    l$y[l$y > 255] <- 255 # Clamp if spline is > 255#
    cr <- addalpha(cr, l$y/255.0)#
    return(cr)#
}#
mapGenHeatDual <- function(map, human.date, megafauna.date, human.sigma, megafauna.sigma, xmin, xmax, human.lat, human.long, megafauna.lat, megafauna.long, interval, x.res, y.res, land.file) {#
    stack.14C.4D.old <- function(date, sigma, xmin, xmax, lat, long){#
        date <- c(date, 100)#
        sigma <- c(sigma, 50)#
        lat <- c(lat, 0)#
        long <- c(long, 0)#
        date.frame <- data.frame(date, sigma, lat, long)#
        names(date.frame) <- c("Date", "Sigma", "Lat", "Long")#
        date.frame <- date.frame[complete.cases(date.frame),]#
        date.sub <- subset(date.frame, (xmin-500) < Date & Date < (xmax + 500))#
        ids.cus = paste("date", 1:length(date.sub$Date), sep = "")#
        coord.sub <- data.frame(ids.cus, date.sub$Lat, date.sub$Long)#
        names(coord.sub) <- c(".id", "Lat", "Long")#
        samp.intcal <- rep("intcal13", length(date.sub$Date))#
        samp.slugdens <- BchronCalibrate(date.sub$Date, date.sub$Sigma, samp.intcal)#
        samp.ages <- ldply(samp.slugdens, data.frame)#
        samp.mean <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, mean))#
        samp.sd <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, sd))#
        samp.dens <- data.frame(tapply(samp.ages$densities, samp.ages$.id, sum))#
        samp.frame <- data.frame(samp.mean, samp.sd, samp.dens)#
        colnames(samp.frame) <- c("Mean", "Sd", "Density")#
        samp.frame$Min <- samp.frame$Mean-date.sub$Sigma#
        samp.frame$Max <- samp.frame$Mean+date.sub$Sigma#
        samp.frame$Lat <- coord.sub$Lat#
        samp.frame$Long <- coord.sub$Long#
        samp.frame <- data.table(samp.frame)#
        lat.frame <- samp.frame[, list(Lat=Lat, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
        long.frame <- samp.frame[, list(Long=Long, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
        density.frame <- samp.frame[, list(Density=Density, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
#
        fin.frame <- data.frame(lat.frame$Lat, long.frame$Long, lat.frame$ageGrid, density.frame$Density)#
        colnames(fin.frame) <- c("Lat", "Long", "ageGrid", "Density")#
        return(fin.frame)#
    }#
    stack.14C.4D <- function(date, sigma, xmin, xmax, lat, long){#
        date <- c(date, 100)#
        sigma <- c(sigma, 50)#
        lat <- c(lat, 0)#
        long <- c(long, 0)#
        date.frame <- data.frame(date, sigma, lat, long)#
        names(date.frame) <- c("Date", "Sigma", "Lat", "Long")#
        date.frame <- date.frame[complete.cases(date.frame),]#
        date.sub <- subset(date.frame, (xmin-500) < Date & Date < (xmax + 500))#
        ids.cus = paste("Date", 1:length(date.sub$Date), sep = "")#
        coord.sub <- data.frame(ids.cus, date.sub$Lat, date.sub$Long)#
        names(coord.sub) <- c(".id", "Lat", "Long")#
        samp.intcal <- rep("intcal13", length(date.sub$Date))#
        samp.slugdens <- BchronCalibrate(date.sub$Date, date.sub$Sigma, samp.intcal)#
        samp.ages <- ldply(samp.slugdens, data.frame)#
        samp.test <- merge(x=samp.ages, y=coord.sub, by.x=".id", by.y=".id")#
        samp.test$DensityScale <- reshape::rescaler.default(samp.test$densities, type = "range")#
        return(samp.test)#
    }#
    land <- readOGR(land.file)#
    list_of_Lines <- slot(land, "lines")#
    land2 <-  SpatialPolygons(lapply(list_of_Lines, function(x) {#
        Polygons(list(Polygon(slot(slot(x, "Lines")[[1]], "coords"))),#
        ID=slot(x, "ID"))#
    }),#
    proj4string=CRS("+proj=longlat +ellps=WGS84"))#
    landset <- SpatialLines2PolySet(land)#
    polyland <- PolySet2SpatialPolygons(landset)#
    human.calibrated.date.frame <- stack.14C.4D(date=human.date, sigma=human.sigma, xmin=xmin, xmax=xmax, lat=human.lat, long=human.long)#
    #human.calibrated.date.frame <- subset(human.calibrated.date.frame, human.calibrated.date.frame$ageGrid < 16500)#
    human.calibrated.date.frame$Legend <- rep("Human", length(human.calibrated.date.frame$ageGrid))#
    megafauna.calibrated.date.frame <- stack.14C.4D(date=megafauna.date, sigma=megafauna.sigma, xmin=xmin, xmax=xmax, lat=megafauna.lat, long=megafauna.long)#
    megafauna.calibrated.date.frame$Legend <- rep("Megafauna", length(megafauna.calibrated.date.frame$ageGrid))#
    blank <- seq(xmin, xmax, 1)#
    blank.lat <- rep(0, length(blank))#
    blank.long <- rep(0, length(blank))#
    blank.human <- rep("Human", length(blank))#
    blank.megafauna <- rep("Megafauna", length(blank))#
    all.ageGrid <- c(human.calibrated.date.frame$ageGrid,megafauna.calibrated.date.frame$ageGrid, blank, blank)#
    all.lat <- c(human.calibrated.date.frame$Lat,megafauna.calibrated.date.frame$Lat, blank.lat, blank.lat)#
    all.long <- c(human.calibrated.date.frame$Long,megafauna.calibrated.date.frame$Long, blank.long, blank.long)#
    all.legend <- c(human.calibrated.date.frame$Legend,megafauna.calibrated.date.frame$Legend, blank.human, blank.megafauna)#
    calibrated.date.frame <- data.frame(all.ageGrid,all.lat,all.long,all.legend)#
    colnames(calibrated.date.frame) <- c("ageGrid", "Lat", "Long", "Legend")#
    calibrated.date.frame <- calibrated.date.frame[complete.cases(calibrated.date.frame),]#
    dateScrub <- function(dataframe, age.min, age.max) {#
        dataframe$point <- 0#
        dataframe$point[findInterval(dataframe$ageGrid, c(age.min,age.max)) == 1L] <- 1#
        return(dataframe)#
    }#
    date.interval <- seq(from=xmin, to=xmax, by=interval)#
    date.interval <- rev(date.interval)#
    date.min <- date.interval-interval/2#
    date.max <- date.interval+interval/2#
    date.list <- pbapply::pblapply(date.interval, function(x) dateScrub(dataframe=calibrated.date.frame, age.min=x-interval/2, age.max=x+interval/2))#
    heat.function.min <- function(data.frame, x.res, y.res) {#
        data.frame <- data.frame[complete.cases(data.frame),]#
        data.frame.int <- with(data.frame, interp(x=Long, y=Lat, z=point, duplicate="user", dupfun="max", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))#
        land.clip <- crop(data.map, polyland)#
        results <- land.clip@data#
        return(results)#
    }#
    heat.function.max <- function(data.frame, x.res, y.res) {#
        data.frame <- data.frame[complete.cases(data.frame),]#
#
        data.frame.int <- with(data.frame, interp(x=Long, y=Lat, z=point, duplicate="user", dupfun="max", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))#
        land.clip <- crop(data.map, polyland)#
        results <- land.clip@data#
        return(results)#
    }#
    heat.function.mean <- function(data.frame, x.res, y.res) {#
        data.frame <- data.frame[complete.cases(data.frame),]#
        data.frame.int <- with(data.frame, interp(x=Long, y=Lat, z=point, duplicate="user", dupfun="mean", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))#
        land.clip <- crop(data.map, polyland)#
        results <- land.clip@data#
        return(results)#
    }#
    animation::ani.options(convert="/usr/local/bin/convert")#
    animation::saveVideo(expr=for (i in seq_along(date.interval)) {#
        human.data <- subset(date.list[[i]], date.list[[i]]$Legend=="Human")#
        megafauna.data <- subset(date.list[[i]], date.list[[i]]$Legend=="Megafauna")#
        human.small <- subset(human.data, ageGrid < 15000)#
        human.int <- heat.function.mean(human.data, x.res=x.res, y.res=y.res)#
        megafauna.int <- heat.function.mean(megafauna.data, x.res=x.res, y.res=y.res)#
        human.names <- rep("Human", length(human.int$x))#
        megafauna.names <- rep("Megafauna", length(megafauna.int$x))#
        x.vector <- c(human.int$x, megafauna.int$x)#
        y.vector <- c(human.int$y, megafauna.int$y)#
        z.vector <- c(human.int$z/max(human.int$z), megafauna.int$z/max(megafauna.int$z))#
        name.vector <- c(human.names, megafauna.names)#
        total.frame <- data.frame(x.vector, y.vector, z.vector, name.vector)#
        colnames(total.frame) <- c("x", "y", "z", "Legend")#
        #num.f <- formatC(seq(xmin, xmax, interval), width=5, format="d", flag="0")#
        #num <- rev(num.f)#
        num <- formatC(seq(1, length(date.interval), 1), width=6, format="d", flag="0")#
        human.plot <- ggmap(map) +#
        geom_tile(data=human.int, aes(x=x, y=y, fill=z,  alpha=z))+#
        coord_equal() +#
        coord_map() +#
        scale_alpha_continuous(range=c(0.2, 1), guide="none") +#
        scale_fill_gradientn(name = "Latest Date", colors=rev(heat.colors(17)), na.value="white") +#
        scale_y_continuous("Latitude", limits = c(25, 73)) +#
        scale_x_continuous("Longitude", limits = c(-165, -60), breaks=seq(-165, -60, 30)) +#
        theme_tufte() +#
        ggtitle("North America Humans") +#
        ggtitle(paste(date.interval[i], " cal BP | Humans", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE, fill=FALSE)#
        megafauna.plot <- ggmap(map, alpha=0.2) +#
        geom_tile(data=megafauna.int, aes(x=x, y=y, fill=z,  alpha=z))+#
        coord_equal() +#
        coord_map() +#
        scale_alpha_continuous(range=c(0.2, 1), guide="none") +#
        scale_fill_gradient(name = "Latest Date", low="white", high="blue", na.value="white") +#
        scale_y_continuous("Latitude", limits = c(25, 73)) +#
        scale_x_continuous("Longitude", limits = c(-165, -60), breaks=seq(-165, -60, 30)) +#
        theme_tufte() +#
        ggtitle("North America Megafauna") +#
        ggtitle(paste(date.interval[i], " cal BP | Megafauna", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE, fill=FALSE)#
        ggsave(layOut(list(human.plot, 1:50, 1:50),#
        list(megafauna.plot, 1:50, 51:100)), filename=paste("/Users/lee/Dropbox/Documents/SCDPD/Map Runs/map",num[i], ".tiff", sep=""), device="tiff", dpi=320, width=7, height=3.7)#
    }, video.name="iberia.mp4", img.name="map")#
    #ffmpeg -f image2 -i map%06d.png -vcodec mjpeg -q:v 0 -r 25 iberia.avi#
}
mapGenHeatDualDensity <- function(map, human.date, megafauna.date, human.sigma, megafauna.sigma, xmin, xmax, human.lat, human.long, megafauna.lat, megafauna.long, interval, x.res, y.res, land.file, lat.min, lat.max, long.min, long.max) {#
    stack.14C.4D <- function(date, sigma, xmin, xmax, lat, long){#
        date <- c(date, 100)#
        sigma <- c(sigma, 50)#
        lat <- c(lat, 0)#
        long <- c(long, 0)#
        date.frame <- data.frame(date, sigma, lat, long)#
        names(date.frame) <- c("Date", "Sigma", "Lat", "Long")#
        date.frame <- date.frame[complete.cases(date.frame),]#
        date.sub <- subset(date.frame, (xmin-500) < Date & Date < (xmax + 500))#
        ids.cus = paste("Date", 1:length(date.sub$Date), sep = "")#
        coord.sub <- data.frame(ids.cus, date.sub$Lat, date.sub$Long)#
        names(coord.sub) <- c(".id", "Lat", "Long")#
        samp.intcal <- rep("intcal13", length(date.sub$Date))#
        samp.slugdens <- BchronCalibrate(date.sub$Date, date.sub$Sigma, samp.intcal)#
        samp.ages <- ldply(samp.slugdens, data.frame)#
        samp.ages <- subset(samp.ages, samp.ages$densities > .0015)#
        samp.test <- merge(x=samp.ages, y=coord.sub, by.x=".id", by.y=".id")#
        samp.test$DensityScale <- reshape::rescaler.default(samp.test$densities, type = "range")#
        return(samp.test)#
    }#
    land <- readOGR(land.file)#
    list_of_Lines <- slot(land, "lines")#
    land2 <-  SpatialPolygons(lapply(list_of_Lines, function(x) {#
        Polygons(list(Polygon(slot(slot(x, "Lines")[[1]], "coords"))),#
        ID=slot(x, "ID"))#
    }),#
    proj4string=CRS("+proj=longlat +ellps=WGS84"))#
    landset <- SpatialLines2PolySet(land)#
    polyland <- PolySet2SpatialPolygons(landset)#
    human.calibrated.date.frame <- stack.14C.4D(date=human.date, sigma=human.sigma, xmin=xmin, xmax=xmax, lat=human.lat, long=human.long)#
    #human.calibrated.date.frame <- subset(human.calibrated.date.frame, human.calibrated.date.frame$ageGrid < 16500)#
    human.calibrated.date.frame$Legend <- rep("Human", length(human.calibrated.date.frame$ageGrid))#
    megafauna.calibrated.date.frame <- stack.14C.4D(date=megafauna.date, sigma=megafauna.sigma, xmin=xmin, xmax=xmax, lat=megafauna.lat, long=megafauna.long)#
    megafauna.calibrated.date.frame$Legend <- rep("Megafauna", length(megafauna.calibrated.date.frame$ageGrid))#
    blank <- seq(xmin, xmax, 1)#
    blank.lat <- rep(0, length(blank))#
    blank.long <- rep(0, length(blank))#
    blank.human <- rep("Human", length(blank))#
    blank.megafauna <- rep("Megafauna", length(blank))#
    blank.0 <- rep(0, length(blank))#
    all.ageGrid <- c(human.calibrated.date.frame$ageGrid,megafauna.calibrated.date.frame$ageGrid, blank, blank)#
    all.lat <- c(human.calibrated.date.frame$Lat,megafauna.calibrated.date.frame$Lat, blank.lat, blank.lat)#
    all.long <- c(human.calibrated.date.frame$Long,megafauna.calibrated.date.frame$Long, blank.long, blank.long)#
    all.densities <- c(human.calibrated.date.frame$densities,megafauna.calibrated.date.frame$densities, blank.0, blank.0)#
#
    all.densityscale <- c(human.calibrated.date.frame$DensityScale,megafauna.calibrated.date.frame$DensityScale, blank.0, blank.0)#
#
    all.legend <- c(human.calibrated.date.frame$Legend,megafauna.calibrated.date.frame$Legend, blank.human, blank.megafauna)#
    calibrated.date.frame <- data.frame(all.ageGrid,all.lat,all.long,all.densities, all.densityscale,all.legend)#
    colnames(calibrated.date.frame) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale", "Legend")#
    calibrated.date.frame <- calibrated.date.frame[complete.cases(calibrated.date.frame),]#
    dateScrubOld <- function(dataframe, age.min, age.max) {#
        dataframe$point <- 0.1#
        dataframe$point[findInterval(dataframe$ageGrid, c(age.min,age.max)) == 1L] <- 1#
        dataframe$DensityPlot <- dataframe$DensityScale*dataframe$point#
        return(dataframe)#
    }#
    dateScrubBad <- function(dataframe, age.min, age.max) {#
        dataframe <- dataframe[complete.cases(dataframe),]#
        dataframe$point <- 0#
        dataframe$point[findInterval(dataframe$ageGrid, c(age.min,age.max)) == 1L] <- 1#
        dataframe.val <- subset(dataframe, dataframe$point==1)#
        dataframe.blank <- dataframe#
        dataframe.blank$densities <- dataframe.blank$densities*0#
        dataframe.blank$DensityScale <- dataframe.blank$DensityScale*0#
        dataframe.blank <- subset(dataframe.blank, dataframe$point==0)#
        all.ageGrid <- c(dataframe.val$ageGrid, dataframe.blank$ageGrid)#
        all.lat <- c(dataframe.val$Lat, dataframe.blank$Lat)#
        all.long <- c(dataframe.val$Long, dataframe.blank$Long)#
        all.densities <- c(dataframe.val$densities, dataframe.blank$densities)#
        all.densityscale <- c(dataframe.val$DensityScale, dataframe.blank$DensityScale)#
        all.legend <- c(as.vector(dataframe.val$Legend), as.vector(dataframe.blank$Legend))#
        full.date.frame <- data.frame(all.ageGrid,all.lat,all.long,all.densities, all.densityscale,all.legend)#
        colnames(full.date.frame) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale", "Legend")#
        full.date.frame <- full.date.frame[complete.cases(full.date.frame),]#
#
        return(full.date.frame)#
    }#
    dateScrub <- function(dataframe, age.min, age.max) {#
        dataframe$point <- 0#
        dataframe$point[findInterval(dataframe$ageGrid, c(age.min,age.max)) == 1L] <- 1#
        dataframe.val <- subset(dataframe, dataframe$point==1)#
        return(dataframe.val)#
    }#
    date.interval <- seq(from=xmin, to=xmax, by=interval)#
    date.interval <- rev(date.interval)#
    date.min <- date.interval-interval/2#
    date.max <- date.interval+interval/2#
    date.list <- pbapply::pblapply(date.interval, function(x) dateScrub(dataframe=calibrated.date.frame, age.min=x-interval/2, age.max=x+interval/2))#
    heat.function.min <- function(data.frame, x.res, y.res) {#
        data.frame <- data.frame[complete.cases(data.frame),]#
        data.frame.int <- with(data.frame, interp(x=Long, y=Lat, z=densities, duplicate="user", dupfun="max", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))#
        land.clip <- crop(data.map, polyland)#
        results <- land.clip@data#
        return(results)#
    }#
    heat.function.max <- function(data.frame, x.res, y.res) {#
        data.frame <- data.frame[complete.cases(data.frame),]#
        data.frame.int <- with(data.frame, interp(x=Long, y=Lat, z=densities, duplicate="user", dupfun="max", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))#
        land.clip <- crop(data.map, polyland)#
        results <- land.clip@data#
        return(results)#
    }#
    heat.function.mean <- function(data.frame, x.res, y.res) {#
        data.frame <- data.frame[complete.cases(data.frame),]#
        data.frame.int <- with(data.frame, interp(x=Long, y=Lat, z=DensityScale, duplicate="user", dupfun="mean", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))#
        land.clip <- crop(data.map, polyland)#
        results <- land.clip@data#
        #results$zmod <- reshape::rescaler.default(results$z, type = "range")#
        return(results)#
    }#
    animation::ani.options(convert="/usr/local/bin/convert")#
    animation::saveVideo(expr=for (i in seq_along(date.interval)) {#
        human.data <- subset(date.list[[i]], date.list[[i]]$Legend=="Human")#
        megafauna.data <- subset(date.list[[i]], date.list[[i]]$Legend=="Megafauna")#
        #human.data <- subset(human.data, ageGrid < 15000)#
        blank.ageGrid <- c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0)#
        blank.lat <- c(70.5,58.31,50.58,40.2,26.8,27.13,34.95,47.78,71.3,42.6)#
        blank.long <- c(-159, -154.64,-125.25,-124,-98,-81,-76.7,-54.33,-76.44,-100)#
        blank.densities <- c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0)#
        blank.point <- c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0)#
        blank.legend.human <- rep("Human", 10)#
        blank.legend.megafauna <- rep("Megafauna", 10)#
        blank.megafauna.frame <- data.frame(blank.ageGrid, blank.lat, blank.long, blank.densities, blank.densities,blank.legend.megafauna, blank.point)#
        colnames(blank.megafauna.frame) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale", "Legend", "point")#
        blank.human.frame <- data.frame(blank.ageGrid, blank.lat, blank.long, blank.densities, blank.densities,blank.legend.human, blank.point)#
        colnames(blank.human.frame) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale", "Legend", "point")#
        human.data <- rbind(human.data, blank.human.frame)#
        megafauna.data <- rbind(megafauna.data, blank.megafauna.frame)#
        human.int <- heat.function.mean(human.data, x.res=x.res, y.res=y.res)#
        megafauna.int <- heat.function.mean(megafauna.data, x.res=x.res, y.res=y.res)#
        human.names <- rep("Human", length(human.int$x))#
        megafauna.names <- rep("Megafauna", length(megafauna.int$x))#
        x.vector <- c(human.int$x, megafauna.int$x)#
        y.vector <- c(human.int$y, megafauna.int$y)#
        z.vector <- c(human.int$z/max(human.int$z), megafauna.int$z/max(megafauna.int$z))#
        name.vector <- c(human.names, megafauna.names)#
        total.frame <- data.frame(x.vector, y.vector, z.vector, name.vector)#
        colnames(total.frame) <- c("x", "y", "z", "Legend")#
        #num.f <- formatC(seq(xmin, xmax, interval), width=5, format="d", flag="0")#
        #num <- rev(num.f)#
        num <- formatC(seq(1, length(date.interval), 1), width=6, format="d", flag="0")#
        blank.human.plot <- ggmap(map) +#
        coord_equal() +#
        coord_map() +#
        scale_y_continuous("Latitude", limits = c(lat.min, lat.max)) +#
        scale_x_continuous("Longitude", limits = c(long.min, long.max)) +#
        theme_tufte() +#
        ggtitle(paste(date.interval[i], " cal BP | Humans", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE, fill=FALSE)#
        blank.megafauna.plot <- ggmap(map) +#
        coord_equal() +#
        coord_map() +#
        scale_y_continuous("Latitude", limits = c(lat.min, lat.max)) +#
        scale_x_continuous("Longitude", limits = c(long.min, long.max)) +#
        theme_tufte() +#
        ggtitle(paste(date.interval[i], " cal BP | Megafauna", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE, fill=FALSE)#
        val.human.plot <- ggmap(map) +#
        geom_contour(data=human.int, aes(x=x, y=y, z=z), colour="red", alpha=0.2, binwidth=0.001)+#
        geom_tile(data=human.int, aes(x=x, y=y, fill=z,  alpha=z))+#
        coord_equal() +#
        coord_map() +#
        scale_alpha_continuous(range=c(0, 1), guide="none") +#
        scale_fill_gradient(name = "Latest Date", low="pink", high="red",  limits=c(0, 1)) +#
        scale_y_continuous("Latitude", limits = c(lat.min, lat.max)) +#
        scale_x_continuous("Longitude", limits = c(long.min, long.max)) +#
        theme_tufte() +#
        ggtitle(paste(date.interval[i], " cal BP | Humans", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE, fill=FALSE)#
        val.megafauna.plot <- ggmap(map) +#
        geom_contour(data=megafauna.int, aes(x=x, y=y, z=z), colour="blue", alpha=0.2, binwidth=0.001)+#
        geom_tile(data=megafauna.int, aes(x=x, y=y, fill=z,  alpha=z))+#
        coord_equal() +#
        coord_map() +#
        scale_alpha_continuous(range=c(0, 1), guide="none") +#
        scale_fill_gradient(name = "Latest Date", low="light blue", high="blue",  limits=c(0, 1)) +#
        scale_y_continuous("Latitude", limits = c(lat.min, lat.max)) +#
        scale_x_continuous("Longitude", limits = c(long.min, long.max)) +#
        theme_tufte() +#
        ggtitle(paste(date.interval[i], " cal BP | Megafauna", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE, fill=FALSE)#
        megafauna.z <- sum(megafauna.int$z)#
        human.z <- sum(human.int$z)#
        human.plot <- if(human.z==0) {#
            blank.human.plot#
        } else {#
            val.human.plot#
        }#
        megafauna.plot <- if(megafauna.z==0) {#
            blank.megafauna.plot#
        } else {#
            val.megafauna.plot#
        }#
        ggsave(layOut(list(human.plot, 1:50, 1:50),#
        list(megafauna.plot, 1:50, 51:100)), filename=paste("/Users/lee/Dropbox/Documents/SCDPD/Map Runs/map",num[i], ".tiff", sep=""), device="tiff", dpi=320, width=7, height=3.7)#
    }, video.name="iberia.mp4", img.name="map")#
    #ffmpeg -f image2 -i map%06d.png -vcodec mjpeg -q:v 0 -r 25 iberia.avi#
}
Eu <- get_map(location="europe", zoom=4, maptype="terrain")
ggmap(Eu)
mapGenHeatDualDensity <- function(map, human.date, megafauna.date, human.sigma, megafauna.sigma, xmin, xmax, human.lat, human.long, megafauna.lat, megafauna.long, interval, x.res, y.res, land.file, lat.min, lat.max, long.min, long.max, frame.width, frame.height) {#
    stack.14C.4D <- function(date, sigma, xmin, xmax, lat, long){#
        date <- c(date, 100)#
        sigma <- c(sigma, 50)#
        lat <- c(lat, 0)#
        long <- c(long, 0)#
        date.frame <- data.frame(date, sigma, lat, long)#
        names(date.frame) <- c("Date", "Sigma", "Lat", "Long")#
        date.frame <- date.frame[complete.cases(date.frame),]#
        date.sub <- subset(date.frame, (xmin-500) < Date & Date < (xmax + 500))#
        ids.cus = paste("Date", 1:length(date.sub$Date), sep = "")#
        coord.sub <- data.frame(ids.cus, date.sub$Lat, date.sub$Long)#
        names(coord.sub) <- c(".id", "Lat", "Long")#
        samp.intcal <- rep("intcal13", length(date.sub$Date))#
        samp.slugdens <- BchronCalibrate(date.sub$Date, date.sub$Sigma, samp.intcal)#
        samp.ages <- ldply(samp.slugdens, data.frame)#
        samp.ages <- subset(samp.ages, samp.ages$densities > .0015)#
        samp.test <- merge(x=samp.ages, y=coord.sub, by.x=".id", by.y=".id")#
        samp.test$DensityScale <- reshape::rescaler.default(samp.test$densities, type = "range")#
        return(samp.test)#
    }#
    land <- readOGR(land.file)#
    list_of_Lines <- slot(land, "lines")#
    land2 <-  SpatialPolygons(lapply(list_of_Lines, function(x) {#
        Polygons(list(Polygon(slot(slot(x, "Lines")[[1]], "coords"))),#
        ID=slot(x, "ID"))#
    }),#
    proj4string=CRS("+proj=longlat +ellps=WGS84"))#
    landset <- SpatialLines2PolySet(land)#
    polyland <- PolySet2SpatialPolygons(landset)#
    human.calibrated.date.frame <- stack.14C.4D(date=human.date, sigma=human.sigma, xmin=xmin, xmax=xmax, lat=human.lat, long=human.long)#
    #human.calibrated.date.frame <- subset(human.calibrated.date.frame, human.calibrated.date.frame$ageGrid < 16500)#
    human.calibrated.date.frame$Legend <- rep("Human", length(human.calibrated.date.frame$ageGrid))#
    megafauna.calibrated.date.frame <- stack.14C.4D(date=megafauna.date, sigma=megafauna.sigma, xmin=xmin, xmax=xmax, lat=megafauna.lat, long=megafauna.long)#
    megafauna.calibrated.date.frame$Legend <- rep("Megafauna", length(megafauna.calibrated.date.frame$ageGrid))#
    blank <- seq(xmin, xmax, 1)#
    blank.lat <- rep(0, length(blank))#
    blank.long <- rep(0, length(blank))#
    blank.human <- rep("Human", length(blank))#
    blank.megafauna <- rep("Megafauna", length(blank))#
    blank.0 <- rep(0, length(blank))#
    all.ageGrid <- c(human.calibrated.date.frame$ageGrid,megafauna.calibrated.date.frame$ageGrid, blank, blank)#
    all.lat <- c(human.calibrated.date.frame$Lat,megafauna.calibrated.date.frame$Lat, blank.lat, blank.lat)#
    all.long <- c(human.calibrated.date.frame$Long,megafauna.calibrated.date.frame$Long, blank.long, blank.long)#
    all.densities <- c(human.calibrated.date.frame$densities,megafauna.calibrated.date.frame$densities, blank.0, blank.0)#
#
    all.densityscale <- c(human.calibrated.date.frame$DensityScale,megafauna.calibrated.date.frame$DensityScale, blank.0, blank.0)#
#
    all.legend <- c(human.calibrated.date.frame$Legend,megafauna.calibrated.date.frame$Legend, blank.human, blank.megafauna)#
    calibrated.date.frame <- data.frame(all.ageGrid,all.lat,all.long,all.densities, all.densityscale,all.legend)#
    colnames(calibrated.date.frame) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale", "Legend")#
    calibrated.date.frame <- calibrated.date.frame[complete.cases(calibrated.date.frame),]#
    dateScrubOld <- function(dataframe, age.min, age.max) {#
        dataframe$point <- 0.1#
        dataframe$point[findInterval(dataframe$ageGrid, c(age.min,age.max)) == 1L] <- 1#
        dataframe$DensityPlot <- dataframe$DensityScale*dataframe$point#
        return(dataframe)#
    }#
    dateScrubBad <- function(dataframe, age.min, age.max) {#
        dataframe <- dataframe[complete.cases(dataframe),]#
        dataframe$point <- 0#
        dataframe$point[findInterval(dataframe$ageGrid, c(age.min,age.max)) == 1L] <- 1#
        dataframe.val <- subset(dataframe, dataframe$point==1)#
        dataframe.blank <- dataframe#
        dataframe.blank$densities <- dataframe.blank$densities*0#
        dataframe.blank$DensityScale <- dataframe.blank$DensityScale*0#
        dataframe.blank <- subset(dataframe.blank, dataframe$point==0)#
        all.ageGrid <- c(dataframe.val$ageGrid, dataframe.blank$ageGrid)#
        all.lat <- c(dataframe.val$Lat, dataframe.blank$Lat)#
        all.long <- c(dataframe.val$Long, dataframe.blank$Long)#
        all.densities <- c(dataframe.val$densities, dataframe.blank$densities)#
        all.densityscale <- c(dataframe.val$DensityScale, dataframe.blank$DensityScale)#
        all.legend <- c(as.vector(dataframe.val$Legend), as.vector(dataframe.blank$Legend))#
        full.date.frame <- data.frame(all.ageGrid,all.lat,all.long,all.densities, all.densityscale,all.legend)#
        colnames(full.date.frame) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale", "Legend")#
        full.date.frame <- full.date.frame[complete.cases(full.date.frame),]#
#
        return(full.date.frame)#
    }#
    dateScrub <- function(dataframe, age.min, age.max) {#
        dataframe$point <- 0#
        dataframe$point[findInterval(dataframe$ageGrid, c(age.min,age.max)) == 1L] <- 1#
        dataframe.val <- subset(dataframe, dataframe$point==1)#
        return(dataframe.val)#
    }#
    date.interval <- seq(from=xmin, to=xmax, by=interval)#
    date.interval <- rev(date.interval)#
    date.min <- date.interval-interval/2#
    date.max <- date.interval+interval/2#
    date.list <- pbapply::pblapply(date.interval, function(x) dateScrub(dataframe=calibrated.date.frame, age.min=x-interval/2, age.max=x+interval/2))#
    heat.function.min <- function(data.frame, x.res, y.res) {#
        data.frame <- data.frame[complete.cases(data.frame),]#
        data.frame.int <- with(data.frame, interp(x=Long, y=Lat, z=densities, duplicate="user", dupfun="max", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))#
        land.clip <- crop(data.map, polyland)#
        results <- land.clip@data#
        return(results)#
    }#
    heat.function.max <- function(data.frame, x.res, y.res) {#
        data.frame <- data.frame[complete.cases(data.frame),]#
        data.frame.int <- with(data.frame, interp(x=Long, y=Lat, z=densities, duplicate="user", dupfun="max", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))#
        land.clip <- crop(data.map, polyland)#
        results <- land.clip@data#
        return(results)#
    }#
    heat.function.mean <- function(data.frame, x.res, y.res) {#
        data.frame <- data.frame[complete.cases(data.frame),]#
        data.frame.int <- with(data.frame, interp(x=Long, y=Lat, z=DensityScale, duplicate="user", dupfun="mean", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))#
        land.clip <- crop(data.map, polyland)#
        results <- land.clip@data#
        #results$zmod <- reshape::rescaler.default(results$z, type = "range")#
        return(results)#
    }#
    animation::ani.options(convert="/usr/local/bin/convert")#
    animation::saveVideo(expr=for (i in seq_along(date.interval)) {#
        human.data <- subset(date.list[[i]], date.list[[i]]$Legend=="Human")#
        megafauna.data <- subset(date.list[[i]], date.list[[i]]$Legend=="Megafauna")#
        #human.data <- subset(human.data, ageGrid < 15000)#
        blank.ageGrid <- c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0)#
        blank.lat <- c(70.5,58.31,50.58,40.2,26.8,27.13,34.95,47.78,71.3,42.6)#
        blank.long <- c(-159, -154.64,-125.25,-124,-98,-81,-76.7,-54.33,-76.44,-100)#
        blank.densities <- c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0)#
        blank.point <- c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0)#
        blank.legend.human <- rep("Human", 10)#
        blank.legend.megafauna <- rep("Megafauna", 10)#
        blank.megafauna.frame <- data.frame(blank.ageGrid, blank.lat, blank.long, blank.densities, blank.densities,blank.legend.megafauna, blank.point)#
        colnames(blank.megafauna.frame) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale", "Legend", "point")#
        blank.human.frame <- data.frame(blank.ageGrid, blank.lat, blank.long, blank.densities, blank.densities,blank.legend.human, blank.point)#
        colnames(blank.human.frame) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale", "Legend", "point")#
        human.data <- rbind(human.data, blank.human.frame)#
        megafauna.data <- rbind(megafauna.data, blank.megafauna.frame)#
        human.int <- heat.function.mean(human.data, x.res=x.res, y.res=y.res)#
        megafauna.int <- heat.function.mean(megafauna.data, x.res=x.res, y.res=y.res)#
        human.names <- rep("Human", length(human.int$x))#
        megafauna.names <- rep("Megafauna", length(megafauna.int$x))#
        x.vector <- c(human.int$x, megafauna.int$x)#
        y.vector <- c(human.int$y, megafauna.int$y)#
        z.vector <- c(human.int$z/max(human.int$z), megafauna.int$z/max(megafauna.int$z))#
        name.vector <- c(human.names, megafauna.names)#
        total.frame <- data.frame(x.vector, y.vector, z.vector, name.vector)#
        colnames(total.frame) <- c("x", "y", "z", "Legend")#
        #num.f <- formatC(seq(xmin, xmax, interval), width=5, format="d", flag="0")#
        #num <- rev(num.f)#
        num <- formatC(seq(1, length(date.interval), 1), width=6, format="d", flag="0")#
        blank.human.plot <- ggmap(map) +#
        coord_equal() +#
        coord_map() +#
        scale_y_continuous("Latitude", limits = c(lat.min, lat.max)) +#
        scale_x_continuous("Longitude", limits = c(long.min, long.max)) +#
        theme_tufte() +#
        ggtitle(paste(date.interval[i], " cal BP | Humans", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE, fill=FALSE)#
        blank.megafauna.plot <- ggmap(map) +#
        coord_equal() +#
        coord_map() +#
        scale_y_continuous("Latitude", limits = c(lat.min, lat.max)) +#
        scale_x_continuous("Longitude", limits = c(long.min, long.max)) +#
        theme_tufte() +#
        ggtitle(paste(date.interval[i], " cal BP | Megafauna", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE, fill=FALSE)#
        val.human.plot <- ggmap(map) +#
        geom_contour(data=human.int, aes(x=x, y=y, z=z), colour="red", alpha=0.2, binwidth=0.001)+#
        geom_tile(data=human.int, aes(x=x, y=y, fill=z,  alpha=z))+#
        coord_equal() +#
        coord_map() +#
        scale_alpha_continuous(range=c(0, 1), guide="none") +#
        scale_fill_gradient(name = "Latest Date", low="pink", high="red",  limits=c(0, 1)) +#
        scale_y_continuous("Latitude", limits = c(lat.min, lat.max)) +#
        scale_x_continuous("Longitude", limits = c(long.min, long.max)) +#
        theme_tufte() +#
        ggtitle(paste(date.interval[i], " cal BP | Humans", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE, fill=FALSE)#
        val.megafauna.plot <- ggmap(map) +#
        geom_contour(data=megafauna.int, aes(x=x, y=y, z=z), colour="blue", alpha=0.2, binwidth=0.001)+#
        geom_tile(data=megafauna.int, aes(x=x, y=y, fill=z,  alpha=z))+#
        coord_equal() +#
        coord_map() +#
        scale_alpha_continuous(range=c(0, 1), guide="none") +#
        scale_fill_gradient(name = "Latest Date", low="light blue", high="blue",  limits=c(0, 1)) +#
        scale_y_continuous("Latitude", limits = c(lat.min, lat.max)) +#
        scale_x_continuous("Longitude", limits = c(long.min, long.max)) +#
        theme_tufte() +#
        ggtitle(paste(date.interval[i], " cal BP | Megafauna", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE, fill=FALSE)#
        megafauna.z <- sum(megafauna.int$z)#
        human.z <- sum(human.int$z)#
        human.plot <- if(human.z==0) {#
            blank.human.plot#
        } else {#
            val.human.plot#
        }#
        megafauna.plot <- if(megafauna.z==0) {#
            blank.megafauna.plot#
        } else {#
            val.megafauna.plot#
        }#
        ggsave(layOut(list(human.plot, 1:50, 1:50),#
        list(megafauna.plot, 1:50, 51:100)), filename=paste("/Users/lee/Dropbox/Documents/SCDPD/Map Runs/map",num[i], ".tiff", sep=""), device="tiff", dpi=320, width=7, height=3.7)#
    }, video.name="iberia.mp4", img.name="map")#
    #ffmpeg -f image2 -i map%06d.png -vcodec mjpeg -q:v 0 -r 25 iberia.avi#
}
mapGenHeatDualDensity <- function(map, human.date, megafauna.date, human.sigma, megafauna.sigma, xmin, xmax, human.lat, human.long, megafauna.lat, megafauna.long, interval, x.res, y.res, land.file, lat.min, lat.max, long.min, long.max, frame.width, frame.height) {#
    stack.14C.4D <- function(date, sigma, xmin, xmax, lat, long){#
        date <- c(date, 100)#
        sigma <- c(sigma, 50)#
        lat <- c(lat, 0)#
        long <- c(long, 0)#
        date.frame <- data.frame(date, sigma, lat, long)#
        names(date.frame) <- c("Date", "Sigma", "Lat", "Long")#
        date.frame <- date.frame[complete.cases(date.frame),]#
        date.sub <- subset(date.frame, (xmin-500) < Date & Date < (xmax + 500))#
        ids.cus = paste("Date", 1:length(date.sub$Date), sep = "")#
        coord.sub <- data.frame(ids.cus, date.sub$Lat, date.sub$Long)#
        names(coord.sub) <- c(".id", "Lat", "Long")#
        samp.intcal <- rep("intcal13", length(date.sub$Date))#
        samp.slugdens <- BchronCalibrate(date.sub$Date, date.sub$Sigma, samp.intcal)#
        samp.ages <- ldply(samp.slugdens, data.frame)#
        samp.ages <- subset(samp.ages, samp.ages$densities > .0015)#
        samp.test <- merge(x=samp.ages, y=coord.sub, by.x=".id", by.y=".id")#
        samp.test$DensityScale <- reshape::rescaler.default(samp.test$densities, type = "range")#
        return(samp.test)#
    }#
    land <- readOGR(land.file)#
    list_of_Lines <- slot(land, "lines")#
    land2 <-  SpatialPolygons(lapply(list_of_Lines, function(x) {#
        Polygons(list(Polygon(slot(slot(x, "Lines")[[1]], "coords"))),#
        ID=slot(x, "ID"))#
    }),#
    proj4string=CRS("+proj=longlat +ellps=WGS84"))#
    landset <- SpatialLines2PolySet(land)#
    polyland <- PolySet2SpatialPolygons(landset)#
    human.calibrated.date.frame <- stack.14C.4D(date=human.date, sigma=human.sigma, xmin=xmin, xmax=xmax, lat=human.lat, long=human.long)#
    #human.calibrated.date.frame <- subset(human.calibrated.date.frame, human.calibrated.date.frame$ageGrid < 16500)#
    human.calibrated.date.frame$Legend <- rep("Human", length(human.calibrated.date.frame$ageGrid))#
    megafauna.calibrated.date.frame <- stack.14C.4D(date=megafauna.date, sigma=megafauna.sigma, xmin=xmin, xmax=xmax, lat=megafauna.lat, long=megafauna.long)#
    megafauna.calibrated.date.frame$Legend <- rep("Megafauna", length(megafauna.calibrated.date.frame$ageGrid))#
    blank <- seq(xmin, xmax, 1)#
    blank.lat <- rep(0, length(blank))#
    blank.long <- rep(0, length(blank))#
    blank.human <- rep("Human", length(blank))#
    blank.megafauna <- rep("Megafauna", length(blank))#
    blank.0 <- rep(0, length(blank))#
    all.ageGrid <- c(human.calibrated.date.frame$ageGrid,megafauna.calibrated.date.frame$ageGrid, blank, blank)#
    all.lat <- c(human.calibrated.date.frame$Lat,megafauna.calibrated.date.frame$Lat, blank.lat, blank.lat)#
    all.long <- c(human.calibrated.date.frame$Long,megafauna.calibrated.date.frame$Long, blank.long, blank.long)#
    all.densities <- c(human.calibrated.date.frame$densities,megafauna.calibrated.date.frame$densities, blank.0, blank.0)#
#
    all.densityscale <- c(human.calibrated.date.frame$DensityScale,megafauna.calibrated.date.frame$DensityScale, blank.0, blank.0)#
#
    all.legend <- c(human.calibrated.date.frame$Legend,megafauna.calibrated.date.frame$Legend, blank.human, blank.megafauna)#
    calibrated.date.frame <- data.frame(all.ageGrid,all.lat,all.long,all.densities, all.densityscale,all.legend)#
    colnames(calibrated.date.frame) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale", "Legend")#
    calibrated.date.frame <- calibrated.date.frame[complete.cases(calibrated.date.frame),]#
    dateScrubOld <- function(dataframe, age.min, age.max) {#
        dataframe$point <- 0.1#
        dataframe$point[findInterval(dataframe$ageGrid, c(age.min,age.max)) == 1L] <- 1#
        dataframe$DensityPlot <- dataframe$DensityScale*dataframe$point#
        return(dataframe)#
    }#
    dateScrubBad <- function(dataframe, age.min, age.max) {#
        dataframe <- dataframe[complete.cases(dataframe),]#
        dataframe$point <- 0#
        dataframe$point[findInterval(dataframe$ageGrid, c(age.min,age.max)) == 1L] <- 1#
        dataframe.val <- subset(dataframe, dataframe$point==1)#
        dataframe.blank <- dataframe#
        dataframe.blank$densities <- dataframe.blank$densities*0#
        dataframe.blank$DensityScale <- dataframe.blank$DensityScale*0#
        dataframe.blank <- subset(dataframe.blank, dataframe$point==0)#
        all.ageGrid <- c(dataframe.val$ageGrid, dataframe.blank$ageGrid)#
        all.lat <- c(dataframe.val$Lat, dataframe.blank$Lat)#
        all.long <- c(dataframe.val$Long, dataframe.blank$Long)#
        all.densities <- c(dataframe.val$densities, dataframe.blank$densities)#
        all.densityscale <- c(dataframe.val$DensityScale, dataframe.blank$DensityScale)#
        all.legend <- c(as.vector(dataframe.val$Legend), as.vector(dataframe.blank$Legend))#
        full.date.frame <- data.frame(all.ageGrid,all.lat,all.long,all.densities, all.densityscale,all.legend)#
        colnames(full.date.frame) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale", "Legend")#
        full.date.frame <- full.date.frame[complete.cases(full.date.frame),]#
#
        return(full.date.frame)#
    }#
    dateScrub <- function(dataframe, age.min, age.max) {#
        dataframe$point <- 0#
        dataframe$point[findInterval(dataframe$ageGrid, c(age.min,age.max)) == 1L] <- 1#
        dataframe.val <- subset(dataframe, dataframe$point==1)#
        return(dataframe.val)#
    }#
    date.interval <- seq(from=xmin, to=xmax, by=interval)#
    date.interval <- rev(date.interval)#
    date.min <- date.interval-interval/2#
    date.max <- date.interval+interval/2#
    date.list <- pbapply::pblapply(date.interval, function(x) dateScrub(dataframe=calibrated.date.frame, age.min=x-interval/2, age.max=x+interval/2))#
    heat.function.min <- function(data.frame, x.res, y.res) {#
        data.frame <- data.frame[complete.cases(data.frame),]#
        data.frame.int <- with(data.frame, interp(x=Long, y=Lat, z=densities, duplicate="user", dupfun="max", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))#
        land.clip <- crop(data.map, polyland)#
        results <- land.clip@data#
        return(results)#
    }#
    heat.function.max <- function(data.frame, x.res, y.res) {#
        data.frame <- data.frame[complete.cases(data.frame),]#
        data.frame.int <- with(data.frame, interp(x=Long, y=Lat, z=densities, duplicate="user", dupfun="max", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))#
        land.clip <- crop(data.map, polyland)#
        results <- land.clip@data#
        return(results)#
    }#
    heat.function.mean <- function(data.frame, x.res, y.res) {#
        data.frame <- data.frame[complete.cases(data.frame),]#
        data.frame.int <- with(data.frame, interp(x=Long, y=Lat, z=DensityScale, duplicate="user", dupfun="mean", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))#
        land.clip <- crop(data.map, polyland)#
        results <- land.clip@data#
        #results$zmod <- reshape::rescaler.default(results$z, type = "range")#
        return(results)#
    }#
    animation::ani.options(convert="/usr/local/bin/convert")#
    animation::saveVideo(expr=for (i in seq_along(date.interval)) {#
        human.data <- subset(date.list[[i]], date.list[[i]]$Legend=="Human")#
        megafauna.data <- subset(date.list[[i]], date.list[[i]]$Legend=="Megafauna")#
        #human.data <- subset(human.data, ageGrid < 15000)#
        blank.ageGrid <- c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0)#
        blank.lat <- c(70.5,58.31,50.58,40.2,26.8,27.13,34.95,47.78,71.3,42.6)#
        blank.long <- c(-159, -154.64,-125.25,-124,-98,-81,-76.7,-54.33,-76.44,-100)#
        blank.densities <- c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0)#
        blank.point <- c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0)#
        blank.legend.human <- rep("Human", 10)#
        blank.legend.megafauna <- rep("Megafauna", 10)#
        blank.megafauna.frame <- data.frame(blank.ageGrid, blank.lat, blank.long, blank.densities, blank.densities,blank.legend.megafauna, blank.point)#
        colnames(blank.megafauna.frame) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale", "Legend", "point")#
        blank.human.frame <- data.frame(blank.ageGrid, blank.lat, blank.long, blank.densities, blank.densities,blank.legend.human, blank.point)#
        colnames(blank.human.frame) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale", "Legend", "point")#
        human.data <- rbind(human.data, blank.human.frame)#
        megafauna.data <- rbind(megafauna.data, blank.megafauna.frame)#
        human.int <- heat.function.mean(human.data, x.res=x.res, y.res=y.res)#
        megafauna.int <- heat.function.mean(megafauna.data, x.res=x.res, y.res=y.res)#
        human.names <- rep("Human", length(human.int$x))#
        megafauna.names <- rep("Megafauna", length(megafauna.int$x))#
        x.vector <- c(human.int$x, megafauna.int$x)#
        y.vector <- c(human.int$y, megafauna.int$y)#
        z.vector <- c(human.int$z/max(human.int$z), megafauna.int$z/max(megafauna.int$z))#
        name.vector <- c(human.names, megafauna.names)#
        total.frame <- data.frame(x.vector, y.vector, z.vector, name.vector)#
        colnames(total.frame) <- c("x", "y", "z", "Legend")#
        #num.f <- formatC(seq(xmin, xmax, interval), width=5, format="d", flag="0")#
        #num <- rev(num.f)#
        num <- formatC(seq(1, length(date.interval), 1), width=6, format="d", flag="0")#
        blank.human.plot <- ggmap(map) +#
        coord_equal() +#
        coord_map() +#
        scale_y_continuous("Latitude", limits = c(lat.min, lat.max)) +#
        scale_x_continuous("Longitude", limits = c(long.min, long.max)) +#
        theme_tufte() +#
        ggtitle(paste(date.interval[i], " cal BP | Humans", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE, fill=FALSE)#
        blank.megafauna.plot <- ggmap(map) +#
        coord_equal() +#
        coord_map() +#
        scale_y_continuous("Latitude", limits = c(lat.min, lat.max)) +#
        scale_x_continuous("Longitude", limits = c(long.min, long.max)) +#
        theme_tufte() +#
        ggtitle(paste(date.interval[i], " cal BP | Megafauna", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE, fill=FALSE)#
        val.human.plot <- ggmap(map) +#
        geom_contour(data=human.int, aes(x=x, y=y, z=z), colour="red", alpha=0.2, binwidth=0.001)+#
        geom_tile(data=human.int, aes(x=x, y=y, fill=z,  alpha=z))+#
        coord_equal() +#
        coord_map() +#
        scale_alpha_continuous(range=c(0, 1), guide="none") +#
        scale_fill_gradient(name = "Latest Date", low="pink", high="red",  limits=c(0, 1)) +#
        scale_y_continuous("Latitude", limits = c(lat.min, lat.max)) +#
        scale_x_continuous("Longitude", limits = c(long.min, long.max)) +#
        theme_tufte() +#
        ggtitle(paste(date.interval[i], " cal BP | Humans", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE, fill=FALSE)#
        val.megafauna.plot <- ggmap(map) +#
        geom_contour(data=megafauna.int, aes(x=x, y=y, z=z), colour="blue", alpha=0.2, binwidth=0.001)+#
        geom_tile(data=megafauna.int, aes(x=x, y=y, fill=z,  alpha=z))+#
        coord_equal() +#
        coord_map() +#
        scale_alpha_continuous(range=c(0, 1), guide="none") +#
        scale_fill_gradient(name = "Latest Date", low="light blue", high="blue",  limits=c(0, 1)) +#
        scale_y_continuous("Latitude", limits = c(lat.min, lat.max)) +#
        scale_x_continuous("Longitude", limits = c(long.min, long.max)) +#
        theme_tufte() +#
        ggtitle(paste(date.interval[i], " cal BP | Megafauna", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE, fill=FALSE)#
        megafauna.z <- sum(megafauna.int$z)#
        human.z <- sum(human.int$z)#
        human.plot <- if(human.z==0) {#
            blank.human.plot#
        } else {#
            val.human.plot#
        }#
        megafauna.plot <- if(megafauna.z==0) {#
            blank.megafauna.plot#
        } else {#
            val.megafauna.plot#
        }#
        ggsave(layOut(list(human.plot, 1:50, 1:50),#
        list(megafauna.plot, 1:50, 51:100)), filename=paste("/Users/lee/Dropbox/Documents/SCDPD/Map Runs/map",num[i], ".tiff", sep=""), device="tiff", dpi=320, width=frame.width, height=frame.height)#
    }, video.name="iberia.mp4", img.name="map")#
    #ffmpeg -f image2 -i map%06d.png -vcodec mjpeg -q:v 0 -r 25 iberia.avi#
}
megafauna.dates <- c(east.beringia.megafauna.14C, western.megafauna.14C, central.megafauna.14C, eastern.megafauna.14C)#
megafauna.sigma <- c(east.beringia.megafauna.sig, western.megafauna.sig, central.megafauna.sig, eastern.megafauna.sig)#
#
megafauna.lat <- c(east.beringia.megafauna.lat, western.megafauna.lat, central.megafauna.lat, eastern.megafauna.lat)#
megafauna.long <- c(east.beringia.megafauna.long, western.megafauna.long, central.megafauna.long, eastern.megafauna.long)#
#
human.dates <- c(east.beringia.human.14C, western.human.14C, central.human.14C, eastern.human.14C)#
human.sigma <- c(east.beringia.human.sig, western.human.sig, central.human.sig, eastern.human.sig)#
human.lat <- c(east.beringia.human.lat, western.human.lat, central.human.lat, eastern.human.lat)#
human.long <- c(east.beringia.human.long, western.human.long, central.human.long, eastern.human.long)#
human.frame <- data.frame(human.dates, human.sigma, human.lat, human.long)#
colnames(human.frame) <- c("Date", "Sigma", "Lat","Long")#
#
human.frame <- subset(human.frame, human.frame$Date < 14000)#
#
Naa1 <- get_map(location=c(-110, 60), zoom=3, source="google", maptype="terrain")
mapGenHeatDualDensity(map=Naa1, human.date=human.frame$Date, megafauna.date=megafauna.dates, human.sigma=human.frame$Sigma, megafauna.sigma=megafauna.sigma, human.lat=human.frame$Lat, human.long=human.frame$Long, megafauna.lat=megafauna.lat, megafauna.long=megafauna.long, xmin = 5000, xmax=20000, interval=10, x.res=250, y.res=250, land.file="/Users/lee/Dropbox/Documents/SCDPD/Maps/ne_110m_coastline", lat.min=25, lat.max=73, long.min=-165, long.max=-60, frame.width=7, frame.height=3.7)
head(europe.human.14C)
mapGenHeatDualDensity(map=Eu, human.date=europe.human.14C, megafauna.date=europe.megafauna.14C, human.sigma=europe.human.sigma, megafauna.sigma=europe.megafauna.sigma, human.lat=europe.human.lat, human.long=europe.human.long, megafauna.lat=europe.megafauna.lat, megafauna.long=europe.megafauna.long, xmin = 5000, xmax=20000, interval=10, x.res=250, y.res=250, land.file="/Users/lee/Dropbox/Documents/SCDPD/Maps/ne_110m_coastline", lat.min=45, lat.max=90, long.min=-11, long.max=47, frame.width=5, frame.height=5.5)
head(europe.human.sigma)
mapGenHeatDualDensity(map=Eu, human.date=europe.human.14C, megafauna.date=europe.megafauna.14C, human.sigma=europe.human.sig, megafauna.sigma=europe.megafauna.sig, human.lat=europe.human.lat, human.long=europe.human.long, megafauna.lat=europe.megafauna.lat, megafauna.long=europe.megafauna.long, xmin = 5000, xmax=20000, interval=10, x.res=250, y.res=250, land.file="/Users/lee/Dropbox/Documents/SCDPD/Maps/ne_110m_coastline", lat.min=45, lat.max=90, long.min=-11, long.max=47, frame.width=5, frame.height=5.5)
Eu <- get_map(location="europe", zoom=3, maptype="terrain")#
#
mapGenHeatDualDensity(map=Eu, human.date=europe.human.14C, megafauna.date=europe.megafauna.14C, human.sigma=europe.human.sig, megafauna.sigma=europe.megafauna.sig, human.lat=europe.human.lat, human.long=europe.human.long, megafauna.lat=europe.megafauna.lat, megafauna.long=europe.megafauna.long, xmin = 5000, xmax=20000, interval=10, x.res=250, y.res=250, land.file="/Users/lee/Dropbox/Documents/SCDPD/Maps/ne_110m_coastline", lat.min=45, lat.max=90, long.min=-11, long.max=47, frame.width=7, frame.height=3.7)
ggmap(Eu)
quartz()
ggmap(Eu)
#Erase everything that comes before#
rm(list = ls(all = TRUE))#
#
#packrat::init("~/Dropbox/4.2 ky event/Data Analysis/R Code/For Distribution/Neolithic")#
#
#Compatibility#
if(.Platform$OS.type=="windows") {#
  quartz<-function() windows()#
}#
#
###Load Packages#
library(TTR)#
library(ggplot2)#
library(gridExtra)#
library(scales)#
library(gtable)#
library(wq)#
library(Bchron)#
library(plyr)#
library(bcp)#
#library(mgcv)#
library(reshape2)#
library(pbapply)#
library(xlsx)#
library(data.table)#
library(dplyr)#
library(akima)#
library(ggmap)#
library(ggthemes)#
library(rgdal)#
library(sp)#
library(rgeos)#
library(maptools)#
library(PBSmapping)#
library(raster)#
####################################################
#######Calibration & Confidence Band Function#######
####################################################
#####Collapse Dates#
collapse.the.dates.begin <- function(sites, biogeo, general, dates, sigma) {#
    date.frame <- data.frame(sites, biogeo, general, dates, sigma)#
    names(date.frame) <- c("Site", "Biogeo_Uni", "St_Area_NE", "CYrBPunc", "Sigma")#
    date.frame <- date.frame[complete.cases(date.frame),]#
    date.sub <- subset(date.frame, (xmin-500) < Date & Date < (xmax + 500))#
    n.t <- rep(100, length(date.sub$Site))#
    df <- data.frame(date.frame$Site, date.frame$Biogeo_Uni, general, dates, sigma)#
    colnames(df) <- c("Site", "Biogeo_Uni", "St_Area_NE", "CYrBPunc", "Sigma")#
    df <- arrange(df, desc(CYrBPunc))#
    df <- arrange(df, desc(Site))#
    df <- arrange(df, desc(Biogeo_Uni))#
    df <- arrange(df, desc(St_Area_NE))#
    df$Ttest <- c(#
    (abs(df[1:(nrow(df)-1),4]-df[2:nrow(df), 4]))/((sqrt(df[2:nrow(df), 5]^2 + df[1:(nrow(df)-1),5]^2)*sqrt(1/100))), NA)#
    df$pvalue <- c((2*pt(df[1:nrow(df),6], 100, lower=FALSE)))#
    df$Collapse <- rep("No", length(sites))#
    df <- transform(df, Collapse = ifelse(pvalue > 0.05, "Yes", Collapse))#
    df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
    df <- as.data.frame(df)#
    df <- df[complete.cases(df),]#
    return(df)#
}#
####Function to organize plots in a window#
layOut = function(...) {#
    require(grid)#
    x <- list(...)#
    n <- max(sapply(x, function(x) max(x[[2]])))#
    p <- max(sapply(x, function(x) max(x[[3]])))#
    pushViewport(viewport(layout = grid.layout(n, p)))#
    for (i in seq_len(length(x))) {#
        print(x[[i]][[1]], vp = viewport(layout.pos.row = x[[i]][[2]],#
        layout.pos.col = x[[i]][[3]]))#
    }#
}#
#
####Function to maintain significant digits in plot#
fmt <- function(){#
    function(x) format(x,nsmall = 4,scientific = FALSE)#
}#
####################################################
#######Calibration & Confidence Band Function#######
####################################################
#
###Multicore apply function with status bar#
mcpblapply <- function (X, FUN, ..., mc.preschedule = TRUE, mc.set.seed = TRUE,#
mc.silent = FALSE, mc.cores = getOption("mc.cores", 2L),#
mc.cleanup = TRUE, mc.allow.recursive = TRUE, USE.NAMES = TRUE, simplify = TRUE)#
{#
    FUN <- match.fun(FUN)#
    if (!is.vector(X) || is.object(X))#
    X <- as.list(X)#
    B <- length(X)#
    if (!(interactive() && dopb() && B >= 1))#
    return(mclapply(X, FUN, ...#
    ))#
    pb <- startpb(0, B)#
    rval <- vector("list", B)#
    for (i in 1:B) {#
        rval[i] <- list(FUN(X[[i]], ...))#
        setpb(pb, i)#
    }#
    close(pb)#
    names(rval) <- names(X)#
    rval#
}#
#
mcpbsapply <- function (X, FUN, ..., mc.preschedule = TRUE, mc.set.seed = TRUE,#
mc.silent = FALSE, mc.cores = getOption("mc.cores", 2L),#
mc.cleanup = TRUE, mc.allow.recursive = TRUE, USE.NAMES = TRUE, simplify = TRUE)#
{#
    FUN <- match.fun(FUN)#
    answer <- mcpblapply(X = X, FUN = FUN,  ..., USE.NAMES = TRUE)#
    if (USE.NAMES && is.character(X) && is.null(names(answer)))#
    names(answer) <- X#
    if (!identical(simplify, FALSE) && length(answer))#
    simplify2array(answer, higher = (simplify == "array"))#
    else answer#
}#
#
mcreplicate <- function(n, expr, simplify = "array", mc.cores = getOption("mc.cores", 2L)) {#
    mcpbsapply(integer(n), eval.parent(substitute(function(...) expr)), mc.cores = getOption("mc.cores", 2L),#
    simplify = simplify)#
}#
conf.loess <- function(x, sigma, n, reps, xmin, xmax) {#
    samp.intcal <- rep("intcal13", length(x))#
    samp.slugdens <- BchronCalibrate(x, sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    res.by <- by(samp.ages$ageGrid, samp.ages$.id, median)#
    res.t <- t(res.by)#
    samp.age.grid <- c(samp.ages$ageGrid, xmin, xmax)#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.grid <- sort(samp.age.grid, decreasing=TRUE)#
    samp.grid <- samp.grid[samp.grid < xmax & samp.grid > xmin]#
    samp.hist <- hist(samp.grid, breaks=length(time))#
    samp.hist <- data.frame(time, samp.hist$counts, samp.hist$counts/sum(samp.hist$counts))#
    colnames(samp.hist) <- c("Age", "Counts", "Density")#
    #samp.hist <- arrange(samp.all, desc(Age))#
    makeloess <- function(x, n){#
        time <- seq(xmin+5, xmax-5, 10)#
        samp.age <- sample(x, size=n, replace=TRUE)#
        samp.dist <- sapply(1:n, function(x) rnorm(500, samp.age, 85))#
        samp.dist <- as.vector(samp.dist)#
        samp.dist <- c(xmax, xmin, samp.dist)#
        samp.date <- tapply(samp.dist, cut(samp.dist, length(time)), length)#
        samp.loess <- lowess(time, samp.date, f=0.15)#
        samp.fitted <- samp.loess$y#
        return(samp.fitted)#
    }#
    samp.replicate <- (replicate(reps, makeloess(res.t, n)))#
    samp.replicate <- as.data.frame(samp.replicate)#
    samp.replicate[is.na(samp.replicate)] <- 0#
    samp.replicate <- sweep(samp.replicate,2,colSums(samp.replicate),`/`)#
    samp.results.replicate <- transform(samp.replicate, MEAN=apply(samp.replicate,1, mean, na.rm = TRUE))#
    samp.results.replicate <- transform(samp.results.replicate, SD=apply(samp.results.replicate,1, sd, na.rm = TRUE))#
    samp.descriptive <- data.frame(time, samp.results.replicate$MEAN, samp.results.replicate$SD)#
    colnames(samp.descriptive) <- c("Age", "Mean", "SD")#
    #samp.descriptive <- arrange(samp.descriptive, desc(Age))#
    samp.all <- data.frame(time, samp.hist$Density, samp.hist$Counts, samp.descriptive$Mean, samp.descriptive$SD, samp.replicate)#
    names(samp.all)[names(samp.all)=="time"] <- "Age"#
    names(samp.all)[names(samp.all)=="samp.descriptive.Mean"] <- "Mean"#
    names(samp.all)[names(samp.all)=="samp.descriptive.SD"] <- "SD"#
    names(samp.all)[names(samp.all)=="samp.hist.Density"] <- "Density"#
    names(samp.all)[names(samp.all)=="samp.hist.Counts"] <- "Counts"#
    samp.all <- arrange(samp.all, desc(Age))#
    return(samp.all)#
}#
#
########
stack.14C <- function(x, sigma, xmin, xmax){#
    samp.intcal <- rep("intcal13", length(x))#
    samp.slugdens <- BchronCalibrate(x, sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    fill <- seq(xmin, xmax, 1)#
    samp.age.grid <- c(samp.ages$ageGrid, fill)#
    samp.grid <- sort(samp.age.grid, decreasing=TRUE)#
    samp.grid <- samp.grid[samp.grid < xmax & samp.grid > xmin]#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.hist <- hist(samp.grid, breaks=length(time))#
    samp.hist <- data.frame(time, samp.hist$counts, samp.hist$counts/sum(samp.hist$counts))#
    colnames(samp.hist) <- c("Age", "Counts", "Density")#
    return(samp.hist)#
}#
median.stack.14C <- function(x, sigma, xmin, xmax){#
    samp.intcal <- rep("intcal13", length(x))#
    samp.slugdens <- BchronCalibrate(x, sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.median <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, median))#
    medians.all <-as.vector(samp.median[,1])#
    n <- length(medians.all)#
    medians <- medians.all[medians.all < xmax & medians.all > xmin]#
    return(medians)#
}#
######Function to Generate Confidence Bands around SCDRD#
conf.cal.loess <- function(dates, sigma, n, reps, sites, xmin, xmax, ..., cores = getOption("mc.cores", 2L), collapse.dates=FALSE) {#
    collapse.the.dates <- function(sites, dates, sigma) {#
        n.t <- rep(100, length(sites))#
        df <- data.frame(sites, dates, sigma)#
        colnames(df) <- c("Sites", "Date", "Sigma")#
        df <- arrange(df, desc(Date))#
        df <- arrange(df, desc(Sites))#
        df$Ttest <- c(#
        (abs(df[1:(nrow(df)-1),2]-df[2:nrow(df), 2]))/((sqrt(df[2:nrow(df), 3]^2 + df[1:(nrow(df)-1),3]^2)*sqrt(1/100))), NA)#
        df$pvalue <- c((2*pt(df[1:nrow(df),4], 100, lower=FALSE)))#
        df$Collapse <- rep("No", length(sites))#
        df <- transform(df, Collapse = ifelse(pvalue > 0.05, "Yes", Collapse))#
        df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
        df <- as.data.frame(df)#
        df <- df[complete.cases(df),]#
        return(df)#
    }#
    uncollapse.the.dates <- function(sites, dates, sigma) {#
        df <- data.frame(sites, dates, sigma)#
        colnames(df) <- c("Sites", "Date", "Sigma")#
        return(df)#
    }#
    date.data <- if(isTRUE(collapse.dates)){#
        collapse.the.dates(sites, dates, sigma)#
    } else {#
        uncollapse.the.dates(sites, dates, sigma)#
    }#
    samp.intcal <- rep("intcal13", length(date.data$Date))#
    samp.slugdens <- BchronCalibrate(date.data$Date, date.data$Sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    res.by <- by(samp.ages$ageGrid, samp.ages$.id, median)#
    res.t <- t(res.by)#
    fill <- seq(xmin, xmax, 1)#
    samp.age.grid <- c(samp.ages$ageGrid, fill)#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.grid <- sort(samp.age.grid, decreasing=TRUE)#
    samp.grid <- samp.grid[samp.grid < xmax & samp.grid > xmin]#
    samp.hist <- hist(samp.grid, breaks=length(time))#
    samp.hist <- data.frame(time, samp.hist$counts, samp.hist$counts/sum(samp.hist$counts))#
    colnames(samp.hist) <- c("Age", "Counts", "Density")#
    #samp.hist <- arrange(samp.all, desc(Age))#
    makeloess <- function(dates, n){#
        time <- seq(xmin+5, xmax-5, 10)#
        n.s <- length(dates)#
        samp.order <- sample(n.s, size=n, replace=TRUE)#
        samp.dist.n <- samp.slugdens[samp.order]#
        temp.ages <- ldply(samp.dist.n, data.frame)#
        temp.age.grid <- c(temp.ages$ageGrid, fill)#
        temp.grid <- temp.age.grid[temp.age.grid < xmax & samp.grid > xmin]#
        samp.dist <- c(fill, temp.grid)#
        samp.dist <- as.vector(samp.dist)#
        samp.dist <- c(xmax, xmin, samp.dist)#
        samp.date <- tapply(samp.dist, cut(samp.dist, length(time)), length)#
        samp.loess <- lowess(time, samp.date, f=0.15)#
        samp.fitted <- samp.loess$y#
        return(samp.fitted)#
    }#
    samp.replicate <- (mcreplicate(reps, makeloess(dates, n)))#
    samp.replicate.dat <- as.data.frame(samp.replicate)#
    samp.replicate.dat[is.na(samp.replicate.dat)] <- 0#
    samp.replicated <- sweep(samp.replicate.dat,2,colSums(samp.replicate.dat),`/`)#
    samp.results.replicated.m <- transform(samp.replicated, MEAN=apply(X=samp.replicated, MARGIN=1, FUN=mean, na.rm = TRUE))#
    samp.results.replicated.s <- transform(samp.replicated, SD=apply(X=samp.replicated, MARGIN=1, FUN=sd, na.rm = TRUE))#
    samp.descriptive <- data.frame(time, samp.results.replicated.m$MEAN, samp.results.replicated.s$SD)#
    colnames(samp.descriptive) <- c("Age", "Mean", "SD")#
    #samp.descriptive <- arrange(samp.descriptive, desc(Age))#
    samp.all <- data.frame(time, samp.hist$Density, samp.hist$Counts, samp.descriptive$Mean, samp.descriptive$SD)#
    names(samp.all)[names(samp.all)=="time"] <- "Age"#
    names(samp.all)[names(samp.all)=="samp.descriptive.Mean"] <- "Mean"#
    names(samp.all)[names(samp.all)=="samp.descriptive.SD"] <- "SD"#
    names(samp.all)[names(samp.all)=="samp.hist.Density"] <- "Density"#
    names(samp.all)[names(samp.all)=="samp.hist.Counts"] <- "Counts"#
    samp.all <- arrange(samp.all, desc(Age))#
    return(samp.all)#
}#
#
###Traditional SCDPD#
BchronDensityCollapse <- function (dates, sigma, sites,  dfs = rep(100, length(dates)), numMix = 30,#
iterations = 10000, burn = 2000, thin = 8, updateAges = FALSE, collapse.dates=FALSE)#
{#
    collapse.the.dates <- function(sites, dates, sigma) {#
        n.t <- rep(100, length(sites))#
        df <- data.frame(sites, dates, sigma)#
        colnames(df) <- c("Sites", "Date", "Sigma")#
        df <- arrange(df, desc(Date))#
        df <- arrange(df, desc(Sites))#
        df$Ttest <- c(#
        (abs(df[1:(nrow(df)-1),2]-df[2:nrow(df), 2]))/((sqrt(df[2:nrow(df), 3]^2 + df[1:(nrow(df)-1),3]^2)*sqrt(1/100))), NA)#
        df$pvalue <- c((2*pt(df[1:nrow(df),4], 100, lower=FALSE)))#
        df$Collapse <- rep("No", length(sites))#
        df <- transform(df, Collapse = ifelse(pvalue > 0.05, "Yes", Collapse))#
        df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
        return(df)#
    }#
    uncollapse.the.dates <- function(sites, dates, sigma) {#
        df <- data.frame(sites, dates, sigma)#
        colnames(df) <- c("Sites", "Date", "Sigma")#
        return(df)#
    }#
    date.data <- if(isTRUE(collapse.dates)){#
        collapse.the.dates(sites, dates, sigma)#
    } else {#
        uncollapse.the.dates(sites, dates, sigma)#
    }#
    pathToCalCurves = system.file("data",#
    package = "Bchron")#
    calCurves <- rep("intcal13", length(date.data$Date))#
    ages <- date.data$Date#
    ageSds <- date.data$Sigma#
    if (length(ages) != length(ageSds))#
    stop("ages and 1-sigma errors must be same length")#
    if (length(ages) != length(calCurves))#
    stop("ages and Calibration curves must be same length")#
    x = BchronCalibrate(ages = ages, ageSds = ageSds, calCurves = calCurves,#
    pathToCalCurves = pathToCalCurves, eps = 0, dfs = rep(100,#
    length(ages)))#
    xSmall = BchronCalibrate(ages = ages, ageSds = ageSds, calCurves = calCurves,#
    pathToCalCurves = pathToCalCurves, dfs = rep(100, length(ages)))#
    n = length(x)#
    thetaRange = range(xSmall[[1]]$ageGrid)#
    for (i in 2:n) thetaRange = range(c(thetaRange, xSmall[[i]]$ageGrid))#
    offset = vector(length = n)#
    for (i in 1:n) {#
        offset[i] = ifelse(x[[i]]$calCurve == "normal", 61, 0)#
    }#
    gauss <- function(x, mu, sig) {#
        u <- (x - mu)/sig#
        y <- exp(-u * u/2)#
        y#
    }#
    gbase <- function(x, mus) {#
        sig <- (mus[2] - mus[1])/2#
        G <- outer(x, mus, gauss, sig)#
        G#
    }#
    clrInv = function(phi) {#
        return(exp(phi)/sum(exp(phi)))#
    }#
    J = numMix#
    mu = seq(thetaRange[1], thetaRange[2], length = numMix)#
    theta = vector(length = n)#
    for (j in 1:n) theta[j] = round(stats::rnorm(1, mean = x[[j]]$ageGrid[match(max(x[[j]]$densities),#
    x[[j]]$densities)], sd = ageSds[j]), 3)#
    phi = c(stats::runif(J - 1, -10, 10), 0)#
    p = as.numeric(clrInv(phi))#
    G = gbase(theta, mu)#
    remaining = (iterations - burn)/thin#
    thetaStore = matrix(ncol = length(theta), nrow = remaining)#
    pStore = matrix(ncol = J, nrow = remaining)#
    thetaAll = matrix(NA, ncol = n, nrow = iterations)#
    for (j in 1:n) thetaAll[, j] = sample(xSmall[[j]]$ageGrid,#
    size = iterations, prob = xSmall[[j]]$densities, replace = TRUE)#
    mu2 = mu#
    sigma2 = (mu[2] - mu[1])/2#
    my_dnorm = function(x) stats::dnorm(x, mean = mu2, sd = sigma2)#
    pb = utils::txtProgressBar(min = 1, max = iterations, style = 3,#
    width = 60, title = "Running BchronDensity")#
    for (i in 1:iterations) {#
        utils::setTxtProgressBar(pb, i)#
        if (i > burn & i%%thin == 0) {#
            ind = (i - burn)/thin#
            thetaStore[ind, ] = theta#
            pStore[ind, ] = p#
        }#
        if (updateAges) {#
            for (j in 1:n) {#
                thetaNew = round(stats::rnorm(1, theta[j], 0.5),#
                3)#
                thetaNewMatch = as.integer(thetaNew + offset[j]) +#
                1#
                thetaNewLogDens = max(log(x[[j]]$densities[thetaNewMatch]),#
                -1e+06)#
                priorNew.dens = sum(p * stats::dnorm(thetaNew,#
                mean = mu2, sd = sigma2))#
                thetaMatch = as.integer(theta[j] + offset[j]) +#
                1#
                thetaLogDens = max(log(x[[j]]$densities[thetaMatch]),#
                -1e+06)#
                priorDens = sum(p * stats::dnorm(theta[j], mean = mu2,#
                sd = sigma2))#
                logRtheta = thetaNewLogDens - thetaLogDens +#
                log(priorNew.dens) - log(priorDens)#
                if (stats::runif(1) < exp(logRtheta))#
                theta[j] = thetaNew#
            }#
        }#
        else {#
            theta = thetaAll[i, ]#
        }#
        for (j in 1:(J - 1)) {#
            phiNew = stats::rnorm(1, phi[j], 1)#
            phiAllNew = phi#
            phiAllNew[j] = phiNew#
            pNew = as.numeric(clrInv(phiAllNew))#
            phiNewLogDens = sum(log(G %*% pNew))#
            phiLogDens = sum(log(G %*% p))#
            logRphi = phiNewLogDens - phiLogDens + stats::dunif(phiNew,#
            -10, 10, log = TRUE) - stats::dunif(phi[j], -10,#
            10, log = TRUE)#
            if (stats::runif(1) < exp(logRphi)) {#
                phi[j] = phiNew#
                p = as.numeric(clrInv(phi))#
            }#
        }#
    }#
    output = list(theta = thetaStore, p = pStore, mu = mu, calAges = xSmall,#
    G = G)#
    class(output) = "BchronDensityRun"#
    return(output)#
}#
#
###Function to modify existing SCDPD from BchronDensity (modified from Bchron)#
SlugDens.t <- function (x, xmin, xmax)#
{#
    n = length(x$calAges)#
    thetaRange = range(x$calAges[[1]]$ageGrid)#
    for (i in 2:n) thetaRange = range(c(thetaRange, x$calAges[[i]]$ageGrid))#
    dateGrid = seq(xmin, xmax, length = 1000)#
    gauss <- function(x, mu, sig) {#
        u <- (x - mu)/sig#
        y <- exp(-u * u/2)#
        y#
    }#
    gbase <- function(x, mus) {#
        sig <- (mus[2] - mus[1])/2#
        G <- outer(x, mus, gauss, sig)#
        G#
    }#
    Gstar = gbase(dateGrid, x$mu)#
    dens = vector(length = length(dateGrid))#
    for (i in 1:nrow(x$p)) {#
        dens = dens + Gstar %*% x$p[i, ]#
    }#
    densFinal = dens/sum(dens)#
    slugbase <- data.frame(dateGrid,densFinal)#
    colnames(slugbase) <- c("Age", "Density")#
    slugbase <- arrange(slugbase, desc(Age))#
    return(slugbase)#
}#
#
SlugSig <- function(x, sigma, n, reps, xmin, xmax) {#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.intcal <- rep("intcal13", length(x))#
    samp.slugdens <- BchronDensity(x, sigma, samp.intcal, numMix = 30, iterations=10000, burn=2000, thin=8, updateAges=FALSE)#
    samp.hist <- SlugDens.t(samp.slugdens, xmin, xmax)#
    makeloess <- function(x, n){#
        time <- seq(xmin+5, xmax-5, 10)#
        samp.14C <- sample(x, size=n, replace=TRUE)#
        samp.sig <- sample(sigma, size=n, replace=TRUE)#
        samp.dist.n <- BchronDensity(samp.14C, samp.sig, rep("intcal13", n), numMix = 30, iterations=10000, burn=2000, thin=8, updateAges=FALSE)#
        samp.dist <- SlugDens.t(samp.dist.n, xmin, xmax)#
        samp.loess <- lowess(samp.dist$Age, samp.dist$Density, f=0.15)#
        samp.fitted <- samp.loess$y#
        return(samp.fitted)#
    }#
    samp.replicate <- (pbreplicate(reps, makeloess(x, n)))#
    samp.replicate <- as.data.frame(samp.replicate)#
    samp.replicate[is.na(samp.replicate)] <- 0#
    samp.replicate <- sweep(samp.replicate,2,colSums(samp.replicate),`/`)#
    samp.results.replicate <- transform(samp.replicate, MEAN=apply(samp.replicate,1, mean, na.rm = TRUE))#
    samp.results.replicate <- transform(samp.results.replicate, SD=apply(samp.results.replicate,1, sd, na.rm = TRUE))#
    samp.descriptive <- data.frame(samp.hist$Age, samp.results.replicate$MEAN, samp.results.replicate$SD)#
    colnames(samp.descriptive) <- c("Age", "Mean", "SD")#
    #samp.descriptive <- arrange(samp.descriptive, desc(Age))#
    samp.all <- data.frame(samp.hist$Age, samp.hist$Density, samp.descriptive$Mean, samp.descriptive$SD, samp.replicate)#
    names(samp.all)[names(samp.all)=="samp.hist.Age"] <- "Age"#
    names(samp.all)[names(samp.all)=="samp.descriptive.Mean"] <- "Mean"#
    names(samp.all)[names(samp.all)=="samp.descriptive.SD"] <- "SD"#
    names(samp.all)[names(samp.all)=="samp.hist.Density"] <- "Density"#
    samp.all <- arrange(samp.all, desc(Age))#
    return(samp.all)#
}#
####Function to maintain significant digits in plot#
fmt <- function(){#
    function(x) format(x,nsmall = 4,scientific = FALSE)#
}#
site.median <- function(sites, region, dates, sigma) {#
    n.t <- rep(100, length(sites))#
    df <- data.frame(sites, region, dates, sigma)#
    colnames(df) <- c("Site", "Region", "X14C.year", "Sigma")#
    df <- arrange(df, desc(X14C.year))#
    df <- arrange(df, desc(Region))#
    df <- arrange(df, desc(Site))#
       df$Collapse <- rep("No", length(sites))#
    df <- transform(df, Collapse = ifelse(df[nrow(df)] > 0.05, "Yes", Collapse))#
    df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
    df <- as.data.frame(df)#
    df <- df[complete.cases(df),]#
    return(df)#
}#
site.time <- function(sites, dates, sigma, xmin, xmax, time) {#
    df <- data.frame(sites, dates, sigma)#
    colnames(df) <- c("Site",  "X14C.year", "Sigma")#
    df <- arrange(df, desc(X14C.year))#
    df <- arrange(df, desc(Site))#
    site.frame <- aggregate(x=df$X14C.year, by=list(df$Site), FUN=mean)#
    site.vector <- site.frame$x#
    site.frame.sig <- aggregate(x=df$Sigma, by=list(df$Site), FUN=mean)#
    site.vector.sig <- site.frame.sig$x#
    samp.intcal <- rep("intcal13", length(site.vector))#
    samp.slugdens <- BchronCalibrate(site.vector, site.vector.sig, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.median <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, median))#
    medians.all <-as.vector(samp.median[,1])#
    medians <- medians.all[medians.all < xmax & medians.all > xmin]#
    median.simple <- round((medians/100000), digits=2)*100000#
    median.table <- table(median.simple)#
    median.values <- as.numeric(paste(median.table))#
    median.frame <- data.frame(t(median.values))#
    colnames(median.frame) <- names(median.table)#
    median.t <- data.frame(t(median.frame))#
    median.df <- data.frame(add_rownames(median.t, "VALUE"))#
    colnames(median.df) <- c("Millenium", "Site")#
    median.df <- median.df[with(median.df, order(as.numeric(Millenium))), ]#
    null <- rep(0, length(time))#
    null.frame <- t(data.frame(null))#
    colnames(null.frame) <- time#
    null.t <- data.frame(t(null.frame))#
    null.df <- data.frame(add_rownames(null.t, "VALUE"))#
    colnames(null.df) <- c("Millenium", "Site")#
    all.frame <- merge(null.df, median.df, all=TRUE, by="Millenium")#
    all.frame[is.na(all.frame)] <- 0#
    all.frame <- all.frame[with(all.frame, order(as.numeric(Millenium))), ]#
    the.result <- data.frame(all.frame$Millenium, all.frame$Site.y)#
    colnames(the.result) <- c("Millenium", "Sites")#
    scaled <- as.vector(apply(data.frame(the.result$Sites), 2, function(x) scale(x)))#
    scaled.mean <- mean(scaled)#
    scaled.sd <- sd(scaled)#
    the.result$z.score <- (scaled-scaled.mean)/scaled.sd#
    the.result$p.value <- pnorm(the.result$z.score, lower.tail=FALSE)#
    return(format(the.result, digits=2))#
#
}#
median.stack.14C <- function(dates, sigma, sites, xmin, xmax, time){#
    samp.intcal <- rep("intcal13", length(dates))#
    samp.slugdens <- BchronCalibrate(dates, sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.median <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, median))#
    medians.all <-as.vector(samp.median[,1])#
    medians <- medians.all[medians.all < xmax & medians.all > xmin]#
    median.simple <- round((medians/100000), digits=2)*100000#
    median.table <- table(median.simple)#
    median.values <- as.numeric(paste(median.table))#
    median.frame <- data.frame(t(median.values))#
    colnames(median.frame) <- names(median.table)#
    median.t <- data.frame(t(median.frame))#
    median.df <- data.frame(add_rownames(median.t, "VALUE"))#
    colnames(median.df) <- c("Millenium", "Site")#
    median.df <- median.df[with(median.df, order(as.numeric(Millenium))), ]#
    null <- rep(0, length(time))#
    null.frame <- t(data.frame(null))#
    colnames(null.frame) <- time#
    null.t <- data.frame(t(null.frame))#
    null.df <- data.frame(add_rownames(null.t, "VALUE"))#
    colnames(null.df) <- c("Millenium", "Site")#
    all.frame <- merge(null.df, median.df, all=TRUE, by="Millenium")#
    all.frame[is.na(all.frame)] <- 0#
    all.frame <- all.frame[with(all.frame, order(as.numeric(Millenium))), ]#
    the.result <- data.frame(all.frame$Millenium, all.frame$Site.y)#
    colnames(the.result) <- c("Millenium", "Sites")#
#
    scaled <- as.vector(apply(data.frame(the.result$Sites), 2, function(x) scale(x)))#
    scaled.mean <- mean(scaled)#
    scaled.sd <- sd(scaled)#
    the.result$z.score <- (scaled-scaled.mean)/scaled.sd#
    the.result$p.value <- pnorm(the.result$z.score, lower.tail=FALSE)#
    return(format(the.result, digits=2))#
}#
site.time.half <- function(sites, dates, sigma, xmin, xmax, time) {#
    df <- data.frame(sites, dates, sigma)#
    colnames(df) <- c("Site",  "X14C.year", "Sigma")#
    df <- arrange(df, desc(X14C.year))#
    df <- arrange(df, desc(Site))#
    site.frame <- aggregate(x=df$X14C.year, by=list(df$Site), FUN=mean)#
    site.vector <- site.frame$x#
    site.frame.sig <- aggregate(x=df$Sigma, by=list(df$Site), FUN=mean)#
    site.vector.sig <- site.frame.sig$x#
    samp.intcal <- rep("intcal13", length(site.vector))#
    samp.slugdens <- BchronCalibrate(site.vector, site.vector.sig, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.median <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, median))#
    medians.all <-as.vector(samp.median[,1])#
    medians <- medians.all[medians.all < xmax & medians.all > xmin]#
    return(medians)#
}#
median.stack.14C.half <- function(x, sigma, sites, xmin, xmax){#
    samp.intcal <- rep("intcal13", length(x))#
    samp.slugdens <- BchronCalibrate(x, sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.median <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, median))#
    medians.all <-as.vector(samp.median[,1])#
    medians <- medians.all[medians.all < xmax & medians.all > xmin]#
    return(medians)#
}#
stack.14C.4D <- function(date, sigma, xmin, xmax, lat, long){#
    date.frame <- data.frame(date, sigma, lat, long)#
    names(date.frame) <- c("Date", "Sigma", "Lat", "Long")#
    date.sub <- subset(date.frame, xmin < Date & Date < xmax)#
    ids.cus = paste("Date", 1:length(date.sub$Date), sep = "")#
    coord.sub <- data.frame(ids.cus, date.sub$Lat, date.sub$Long)#
    names(coord.sub) <- c(".id", "Lat", "Long")#
    samp.intcal <- rep("intcal13", length(date.sub$Date))#
    samp.slugdens <- BchronCalibrate(date.sub$Date, date.sub$Sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.ages.dt <- data.table(samp.ages)#
    coord.sub.dt <- data.table(coord.sub)#
    samp.coord <- merge(samp.ages, coord.sub, by.x=".id", by.y=".id")#
    return(samp.coord)#
}#
mapGenPoint <- function(map, date, sigma, xmin, xmax, lat, long, interval, x.res, y.res) {#
    calibrated.date.frame <- stack.14C.4D(date=date, sigma=sigma, xmin=xmin, xmax=xmax, lat=lat, long=long)#
    date.interval <- seq(from=xmin, to=xmax, by=interval)#
    date.interval <- rev(date.interval)#
    date.list <- pbapply::pblapply(date.interval, function(x) subset(calibrated.date.frame, calibrated.date.frame$ageGrid > x & calibrated.date.frame$ageGrid < x+interval))#
    animation::ani.options(convert="/usr/local/bin/convert")#
    animation::saveVideo(expr=for (i in seq_along(date.interval)) {#
        num.f <- formatC(seq(xmin, xmax, interval), width=5, format="d", flag="0")#
        num <- rev(num.f)#
        #num <- formatC(seq(1, length(date.interval), 1), width=6, format="d", flag="0")#
        plots <- ggmap(map, alpha=0.2) +#
        geom_point(data=data.frame(date.list[i]), aes(x=Long, y=Lat), colour="red", alpha=0.05, size=7, shape=15)+#
        coord_equal() +#
        scale_y_continuous("Latitude", limits = c(35, 46)) +#
        scale_x_continuous("Longitude", limits = c(-10, 5)) +#
        coord_map() +#
        theme_tufte() +#
        ggtitle(paste(date.interval[i], " cal BP", sep="")) +#
        guides(size=FALSE, colour=FALSE, alpha=FALSE, shape=FALSE)#
        ggsave(plots, filename=paste("map",num[i], ".png", sep=""))#
    }, video.name="iberia.mp4", img.name="map")#
    #ffmpeg -f image2 -i map%06d.png -vcodec mjpeg -q:v 0 -r 25 iberia.avi#
}#
#
mapGenPointDual <- function(map, human.date, megafauna.date, human.sigma, megafauna.sigma, xmin, xmax, human.lat, human.long, megafauna.lat, megafauna.long, interval, x.res, y.res) {#
    human.calibrated.date.frame <- stack.14C.4D(date=human.date, sigma=human.sigma, xmin=xmin, xmax=xmax, lat=human.lat, long=human.long)#
    human.calibrated.date.frame$Legend <- rep("Human", length(human.calibrated.date.frame$ageGrid))#
    megafauna.calibrated.date.frame <- stack.14C.4D(date=megafauna.date, sigma=megafauna.sigma, xmin=xmin, xmax=xmax, lat=megafauna.lat, long=megafauna.long)#
    megafauna.calibrated.date.frame$Legend <- rep("Megafauna", length(megafauna.calibrated.date.frame$ageGrid))#
    all.ageGrid <- c(human.calibrated.date.frame$ageGrid,megafauna.calibrated.date.frame$ageGrid)#
    all.lat <- c(human.calibrated.date.frame$Lat,megafauna.calibrated.date.frame$Lat)#
    all.long <- c(human.calibrated.date.frame$Long,megafauna.calibrated.date.frame$Long)#
    all.legend <- c(human.calibrated.date.frame$Legend,megafauna.calibrated.date.frame$Legend)#
    calibrated.date.frame <- data.frame(all.ageGrid,all.lat,all.long,all.legend)#
    colnames(calibrated.date.frame) <- c("ageGrid", "Lat", "Long", "Legend")#
    date.interval <- seq(from=xmin, to=xmax, by=interval)#
    date.interval <- rev(date.interval)#
    date.list <- pbapply::pblapply(date.interval, function(x) subset(calibrated.date.frame, calibrated.date.frame$ageGrid > x & calibrated.date.frame$ageGrid < x+interval))#
    animation::ani.options(convert="/usr/local/bin/convert")#
    animation::saveVideo(expr=for (i in seq_along(date.interval)) {#
        #num.f <- formatC(seq(xmin, xmax, interval), width=5, format="d", flag="0")#
        #num <- rev(num.f)#
        num <- formatC(seq(1, length(date.interval), 1), width=6, format="d", flag="0")#
        plots <- ggmap(map, alpha=0.2) +#
        geom_point(data=data.frame(date.list[i]), aes(x=Long, y=Lat, colour=Legend), alpha=0.2, size=4, shape=15)+#
        coord_equal() +#
        coord_map() +#
        theme_tufte() +#
        ggtitle(paste(date.interval[i], " cal BP", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE)#
        ggsave(plots, filename=paste("map",num[i], ".png", sep=""))#
    }, video.name="iberia.mp4", img.name="map")#
    #ffmpeg -f image2 -i map%06d.png -vcodec mjpeg -q:v 0 -r 25 iberia.avi#
}#
collapse.the.dates.begin <- function(sites, region, dates, sigma, lat, long, taxa, xmin, xmax) {#
    date.frame <- data.frame(sites, region, dates, sigma, lat, long, taxa)#
    names(date.frame) <- c("Sites", "Region", "Date", "Sigma", "Lat", "Long", "Taxa")#
    date.frame <- date.frame[complete.cases(date.frame),]#
    date.sub <- subset(date.frame, (xmin-500) < Date & Date < (xmax + 500))#
    n.t <- rep(100, length(sites))#
    df <- data.frame(date.sub$Sites, date.sub$Region, date.sub$Date, date.sub$Sigma, date.sub$Lat, date.sub$Long, date.sub$Taxa)#
    colnames(df) <- c("Site", "Region", "X14C.year", "Sigma", "Lat", "Long", "Taxa")#
    df <- arrange(df, desc(X14C.year))#
    df <- arrange(df, desc(Site))#
    df <- arrange(df, desc(Region))#
    df$Ttest <- c(#
    (abs(df[1:(nrow(df)-1),3]-df[2:nrow(df), 3]))/((sqrt(df[2:nrow(df), 4]^2 + df[1:(nrow(df)-1),4]^2)*sqrt(1/100))), NA)#
    df$pvalue <- c((2*pt(df[1:nrow(df),8], 100, lower=FALSE)))#
    df$Collapse <- rep("No", length(df$Site))#
    df <- transform(df, Collapse = ifelse(pvalue > 0.05, "Yes", Collapse))#
    df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
    df <- as.data.frame(df)#
    df <- df[complete.cases(df),]#
    return(df)#
}#
dateScrub <- function(dataframe, age.min, age.max) {#
    dataframe$point <- 0#
    dataframe$point[findInterval(dataframe$Age, c(age.min,age.max)) == 1L] <- 1#
    return(dataframe)#
}#
#
dateScrubVector <- function(dataframe, interval) {#
    date.interval <- seq(from=mind(dataframe$Age, to=dataframe$Age, by=interval)#
    date.interval <- rev(date.interval)#
    date.min <- date.interval-interval/2#
    date.max <- date.interval+interval/2#
    dataframe$point <- 0#
    dataframe$point[findInterval(dataframe$Age, c(date.min,date.max)) == 1L] <- 1#
    return(dataframe)#
}#
###Load Data#
#megafauna.data <- read.csv(file="http://www.bleedrake.com/megafauna/megafauna.csv")#
#human.data <- read.csv(file="http://www.bleedrake.com/megafauna/humansaudited.csv")#
#
megafauna.data <- read.csv(file="~/Dropbox/Documents/SCDPD/Megafauna Database/Megafauna Sigma Purge-Table 1.csv")#
human.data <- read.csv(file="~/Dropbox/Documents/SCDPD/Humans Audited.csv")#
megafauna.data <- collapse.the.dates.begin(sites=megafauna.data$Site, region=megafauna.data$Region, dates=megafauna.data$X14C.year, sigma=megafauna.data$Sigma, lat=megafauna.data$Lat, long=megafauna.data$Long, taxa=megafauna.data$Simple.Taxon, xmin=2000, xmax=40000)#
human.data <- collapse.the.dates.begin(sites=human.data$Site_name, region=human.data$Region, dates=human.data$X14C.year, sigma=human.data$Sigma, lat=human.data$Lat, long=human.data$Long, taxa=rep("Human", length(human.data$Site_name)), xmin=2000, xmax=40000)#
gisp2 <- read.csv(file="http://www.bleedrake.com/megafauna/gisp2.csv")#
epica <- read.csv(file="http://www.bleedrake.com/megafauna/epica.csv")#
#
###Load Calibration Curves#
intcal.13 <- read.csv(file="http://www.bleedrake.com/megafauna/intcal13.csv")#
intcal.13 <- read.csv(file="~/Dropbox/Documents/SCDPD/Data/intcal13.csv")#
########MEGAFAUNA##########
western.megafauna.14C <- subset(megafauna.data$X14C.year, megafauna.data$Region=="Western North America")#
central.megafauna.14C <- subset(megafauna.data$X14C.year, megafauna.data$Region=="Central North America")#
eastern.megafauna.14C <- subset(megafauna.data$X14C.year, megafauna.data$Region=="Eastern North America")#
all.eastern.megafauna.14C <- c(as.numeric(central.megafauna.14C), as.numeric(eastern.megafauna.14C))#
south.america.megafauna.14C <- subset(megafauna.data$X14C.year, megafauna.data$Region=="South America")#
siberia.megafauna.14C <- subset(megafauna.data$X14C.year, megafauna.data$Region=="Siberia")#
east.beringia.megafauna.14C <- subset(megafauna.data$X14C.year, megafauna.data$Region=="East Beringia")#
europe.megafauna.14C <- subset(megafauna.data$X14C.year, megafauna.data$Region=="Europe")#
oceania.megafauna.14C <- subset(megafauna.data$X14C.year, megafauna.data$Region=="Oceania")#
oceania.megafauna.14C <- subset(megafauna.data$X14C.year, megafauna.data$Region=="Oceania")#
africa.megafauna.14C <- subset(megafauna.data$X14C.year, megafauna.data$Region=="Africa")#
western.megafauna.sig<- subset(megafauna.data$Sigma, megafauna.data$Region=="Western North America")#
central.megafauna.sig <- subset(megafauna.data$Sigma, megafauna.data$Region=="Central North America")#
eastern.megafauna.sig <- subset(megafauna.data$Sigma, megafauna.data$Region=="Eastern North America")#
all.eastern.megafauna.sig <- c(central.megafauna.sig, eastern.megafauna.sig)#
south.america.megafauna.sig <- subset(megafauna.data$Sigma, megafauna.data$Region=="South America")#
siberia.megafauna.sig <- subset(megafauna.data$Sigma, megafauna.data$Region=="Siberia")#
east.beringia.megafauna.sig <- subset(megafauna.data$Sigma, megafauna.data$Region=="East Beringia")#
europe.megafauna.sig <- subset(megafauna.data$Sigma, megafauna.data$Region=="Europe")#
oceania.megafauna.sig <- subset(megafauna.data$Sigma, megafauna.data$Region=="Oceania")#
africa.megafauna.sig <- subset(megafauna.data$Sigma, megafauna.data$Region=="Africa")#
western.megafauna.intcal <- rep("intcal13", length(western.megafauna.14C))#
central.megafauna.intcal <- rep("intcal13", length(central.megafauna.14C))#
eastern.megafauna.intcal <- rep("intcal13", length(eastern.megafauna.14C))#
all.eastern.megafauna.intcal <- c(central.megafauna.intcal, eastern.megafauna.intcal)#
south.america.megafauna.intcal <- rep("intcal13", length(south.america.megafauna.14C))#
siberia.megafauna.intcal <- rep("intcal13", length(siberia.megafauna.14C))#
east.beringia.megafauna.intcal <- rep("intcal13", length(east.beringia.megafauna.14C))#
europe.megafauna.intcal <- rep("intcal13", length(europe.megafauna.14C))#
oceania.megafauna.intcal <- rep("intcal13", length(oceania.megafauna.14C))#
africa.megafauna.intcal <- rep("intcal13", length(africa.megafauna.14C))#
western.megafauna.sites<- subset(megafauna.data$Site, megafauna.data$Region=="Western North America")#
central.megafauna.sites <- subset(megafauna.data$Site, megafauna.data$Region=="Central North America")#
eastern.megafauna.sites <- subset(megafauna.data$Site, megafauna.data$Region=="Eastern North America")#
all.eastern.megafauna.sites <- c(as.vector(central.megafauna.sites), as.vector(eastern.megafauna.sites))#
south.america.megafauna.sites <- subset(megafauna.data$Site, megafauna.data$Region=="South America")#
siberia.megafauna.sites <- subset(megafauna.data$Site, megafauna.data$Region=="Siberia")#
east.beringia.megafauna.sites <- subset(megafauna.data$Site, megafauna.data$Region=="East Beringia")#
europe.megafauna.sites <- subset(megafauna.data$Site, megafauna.data$Region=="Europe")#
oceania.megafauna.sites <- subset(megafauna.data$Site, megafauna.data$Region=="Oceania")#
africa.megafauna.sites <- subset(megafauna.data$Site, megafauna.data$Region=="Africa")#
western.megafauna.site.count <- length(unique(western.megafauna.sites))#
eastern.megafauna.site.count <- length(unique(eastern.megafauna.sites))#
central.megafauna.site.count <- length(unique(central.megafauna.sites))#
all.eastern.megafauna.site.count <- eastern.megafauna.site.count + central.megafauna.site.count#
south.america.megafauna.site.count <- length(unique(south.america.megafauna.sites))#
siberia.megafauna.site.count <- length(unique(siberia.megafauna.sites))#
east.beringia.megafauna.site.count <- length(unique(east.beringia.megafauna.sites))#
europe.megafauna.site.count <- length(unique(europe.megafauna.sites))#
oceania.megafauna.site.count <- length(unique(oceania.megafauna.sites))#
africa.megafauna.site.count <- length(unique(africa.megafauna.sites))#
#
western.megafauna.sites<- subset(megafauna.data$Site, megafauna.data$Region=="Western North America")#
central.megafauna.sites <- subset(megafauna.data$Site, megafauna.data$Region=="Central North America")#
eastern.megafauna.sites <- subset(megafauna.data$Site, megafauna.data$Region=="Eastern North America")#
all.eastern.megafauna.sites <- c(central.megafauna.sites, eastern.megafauna.sites)#
south.america.megafauna.sites <- subset(megafauna.data$Site, megafauna.data$Region=="South America")#
siberia.megafauna.sites <- subset(megafauna.data$Site, megafauna.data$Region=="Siberia")#
east.beringia.megafauna.sites <- subset(megafauna.data$Site, megafauna.data$Region=="East Beringia")#
europe.megafauna.sites <- subset(megafauna.data$Site, megafauna.data$Region=="Europe")#
oceania.megafauna.sites <- subset(megafauna.data$Site, megafauna.data$Region=="Oceania")#
africa.megafauna.sites <- subset(megafauna.data$Site, megafauna.data$Region=="Africa")#
western.megafauna.lat<- as.numeric(as.vector(subset(megafauna.data$Lat, megafauna.data$Region=="Western North America")))#
central.megafauna.lat <- as.numeric(as.vector(subset(megafauna.data$Lat, megafauna.data$Region=="Central North America")))#
eastern.megafauna.lat <- as.numeric(as.vector(subset(megafauna.data$Lat, megafauna.data$Region=="Eastern North America")))#
all.eastern.megafauna.lat <- c(as.numeric(as.vector(central.megafauna.lat)), as.numeric(as.vector(eastern.megafauna.lat)))#
south.america.megafauna.lat <- as.numeric(as.vector(subset(megafauna.data$Lat, megafauna.data$Region=="South America")))#
siberia.megafauna.lat <- subset(as.numeric(as.vector(megafauna.data$Lat)), megafauna.data$Region=="Siberia")#
east.beringia.megafauna.lat <- as.numeric(as.vector(subset(megafauna.data$Lat, megafauna.data$Region=="East Beringia")))#
europe.megafauna.lat <- as.numeric(as.vector(subset(megafauna.data$Lat, megafauna.data$Region=="Europe")))#
oceania.megafauna.lat <- as.numeric(as.vector(subset(megafauna.data$Lat, megafauna.data$Region=="Oceania")))#
africa.megafauna.lat <- as.numeric(as.vector(subset(megafauna.data$Lat, megafauna.data$Region=="Africa")))#
western.megafauna.long<- as.numeric(as.vector(subset(megafauna.data$Long, megafauna.data$Region=="Western North America")))#
central.megafauna.long <- as.numeric(as.vector(subset(megafauna.data$Long, megafauna.data$Region=="Central North America")))#
eastern.megafauna.long <- as.numeric(as.vector(subset(megafauna.data$Long, megafauna.data$Region=="Eastern North America")))#
all.eastern.megafauna.long <- c(as.numeric(as.vector(central.megafauna.long)), as.numeric(as.vector(eastern.megafauna.long)))#
south.america.megafauna.long <- as.numeric(as.vector(subset(megafauna.data$Long, megafauna.data$Region=="South America")))#
siberia.megafauna.long <- as.numeric(as.vector(subset(megafauna.data$Long, megafauna.data$Region=="Siberia")))#
east.beringia.megafauna.long <- as.numeric(as.vector(subset(megafauna.data$Long, megafauna.data$Region=="East Beringia")))#
europe.megafauna.long <- as.numeric(as.vector(subset(megafauna.data$Long, megafauna.data$Region=="Europe")))#
oceania.megafauna.long <- as.numeric(as.vector(subset(megafauna.data$Long, megafauna.data$Region=="Oceania")))#
africa.megafauna.long <- as.numeric(as.vector(subset(megafauna.data$Long, megafauna.data$Region=="Africa")))#
#western.megafauna.slugdens <- BchronDensity(western.megafauna.14C, western.megafauna.sig, western.megafauna.intcal, numMix = 30, iterations = 10000, burn = 2000, thin = 8, updateAges = FALSE)#
#central.megafauna.slugdens <- BchronDensity(central.megafauna.14C, central.megafauna.sig, central.megafauna.intcal, numMix = 30, iterations = 10000, burn = 2000, thin = 8, updateAges = FALSE)#
#eastern.megafauna.slugdens <- BchronDensity(eastern.megafauna.14C, eastern.megafauna.sig, eastern.megafauna.intcal, numMix = 30, iterations = 10000, burn = 2000, thin = 8, updateAges = FALSE)#
#all.eastern.megafauna.slugdens <-  BchronDensity(all.eastern.megafauna.14C, all.eastern.megafauna.sig, all.eastern.megafauna.intcal, numMix = 30, iterations = 10000, burn = 2000, thin = 8, updateAges = FALSE)#
#south.america.megafauna.slugdens <- BchronDensity(south.america.megafauna.14C, south.america.megafauna.sig, south.america.megafauna.intcal, numMix = 30, iterations = 10000, burn = 2000, thin = 8, updateAges = FALSE)#
#east.beringia.megafauna.slugdens <- BchronDensity(east.beringia.megafauna.14C, east.beringia.megafauna.sig, east.beringia.megafauna.intcal, numMix = 30, iterations = 10000, burn = 2000, thin = 8, updateAges = FALSE)#
#siberia.megafauna.slugdens <- BchronDensity(siberia.megafauna.14C, siberia.megafauna.sig, siberia.megafauna.intcal, numMix = 30, iterations = 10000, burn = 2000, thin = 8, updateAges = FALSE)#
#europe.megafauna.slugdens <- BchronDensity(europe.megafauna.14C, europe.megafauna.sig, europe.megafauna.intcal, numMix = 30, iterations = 10000, burn = 2000, thin = 8, updateAges = FALSE)#
#
#western.megafauna.slug <- SlugDens.t(western.megafauna.slugdens, xmin=0, xmax=50000)#
#all.eastern.megafauna.slug <- SlugDens.t(all.eastern.megafauna.slugdens, xmin=0, xmax=50000)#
#south.america.megafauna.slug <- SlugDens.t(south.america.megafauna.slugdens, xmin=0, xmax=50000)#
#alaska.megafauna.slug <- SlugDens.t(east.beringia.megafauna.slugdens, xmin=0, xmax=50000)#
#siberia.megafauna.slug <- SlugDens.t(siberia.megafauna.slugdens, xmin=0, xmax=50000)#
#europe.megafauna.slug <- SlugDens.t(europe.megafauna.slugdens, xmin=0, xmax=50000)#
#
#megafauna.slug <- data.frame(western.megafauna.slug$Age, western.megafauna.slug$Density, all.eastern.megafauna.slug$Density, south.america.megafauna.slug$Density, alaska.megafauna.slug$Density, siberia.megafauna.slug$Density, europe.megafauna.slug$Density)#
#colnames(megafauna.slug) <- c("Age", "Western North America", "Eastern North America", "South America", "Alaska", "Siberia", "Europe")#
#megafauna.slug <- arrange(megafauna.slug, desc(Age))#
#
#megafauna.slug.melt <- melt(megafauna.slug, id="Age")#
#
#all.megafauna.density <- qplot(Age, value, data=megafauna.slug.melt, colour=variable, linetype=variable, xlab = "Cal yr BP", ylab = "Density", geom="line") + theme_classic() + theme(legend.title=element_blank())#
#
########HUMANS##########
###Create vectors from data set by region#
#
western.human.14C <- subset(human.data$X14C.year, human.data$Region=="Western North America")#
central.human.14C <- subset(human.data$X14C.year, human.data$Region=="Central North America")#
eastern.human.14C <- subset(human.data$X14C.year, human.data$Region=="Eastern North America")#
all.eastern.human.14C <- c(central.human.14C, eastern.human.14C)#
south.america.human.14C <- subset(human.data$X14C.year, human.data$Region=="South America")#
siberia.human.14C <- subset(human.data$X14C.year, human.data$Region=="Siberia")#
east.beringia.human.14C <- subset(human.data$X14C.year, human.data$Region=="East Beringia")#
europe.human.14C <- subset(human.data$X14C.year, human.data$Region=="Europe")#
oceania.human.14C <- subset(human.data$X14C.year, human.data$Region=="Oceania")#
africa.human.14C <- subset(human.data$X14C.year, human.data$Region=="Africa")#
western.human.sig<- subset(human.data$Sigma, human.data$Region=="Western North America")#
central.human.sig <- subset(human.data$Sigma, human.data$Region=="Central North America")#
eastern.human.sig <- subset(human.data$Sigma, human.data$Region=="Eastern North America")#
all.eastern.human.sig <- c(central.human.sig, eastern.human.sig)#
south.america.human.sig <- subset(human.data$Sigma, human.data$Region=="South America")#
siberia.human.sig <- subset(human.data$Sigma, human.data$Region=="Siberia")#
east.beringia.human.sig <- subset(human.data$Sigma, human.data$Region=="East Beringia")#
europe.human.sig <- subset(human.data$Sigma, human.data$Region=="Europe")#
oceania.human.sig <- subset(human.data$Sigma, human.data$Region=="Oceania")#
africa.human.sig <- subset(human.data$Sigma, human.data$Region=="Africa")#
western.human.intcal <- rep("intcal13", length(western.human.14C))#
central.human.intcal <- rep("intcal13", length(central.human.14C))#
eastern.human.intcal <- rep("intcal13", length(eastern.human.14C))#
all.eastern.human.intcal <- c(central.human.intcal, eastern.human.intcal)#
south.america.human.intcal <- rep("intcal13", length(south.america.human.14C))#
siberia.human.intcal <- rep("intcal13", length(siberia.human.14C))#
east.beringia.human.intcal <- rep("intcal13", length(east.beringia.human.14C))#
europe.human.intcal <- rep("intcal13", length(europe.human.14C))#
oceania.human.intcal <- rep("intcal13", length(oceania.human.14C))#
africa.human.intcal <- rep("intcal13", length(africa.human.14C))#
western.human.sites<- subset(human.data$Site, human.data$Region=="Western North America")#
central.human.sites <- subset(human.data$Site, human.data$Region=="Central North America")#
eastern.human.sites <- subset(human.data$Site, human.data$Region=="Eastern North America")#
all.eastern.human.sites <- c(central.human.sites, eastern.human.sites)#
south.america.human.sites <- subset(human.data$Site, human.data$Region=="South America")#
siberia.human.sites <- subset(human.data$Site, human.data$Region=="Siberia")#
east.beringia.human.sites <- subset(human.data$Site, human.data$Region=="East Beringia")#
europe.human.sites <- subset(human.data$Site, human.data$Region=="Europe")#
oceania.human.sites <- subset(human.data$Site, human.data$Region=="Oceania")#
africa.human.sites <- subset(human.data$Site, human.data$Region=="Africa")#
western.human.site.count <- length(unique(western.human.sites))#
eastern.human.site.count <- length(unique(western.human.sites))#
central.human.site.count <- length(unique(western.human.sites))#
all.eastern.human.site.count <- sum(eastern.human.site.count, central.human.site.count)#
south.america.human.site.count <- length(unique(eastern.human.sites))#
siberia.human.site.count <- length(unique(siberia.human.sites))#
east.beringia.human.site.count <- length(unique(east.beringia.human.sites))#
europe.human.site.count <- length(unique(europe.human.sites))#
oceania.human.site.count <- length(unique(oceania.human.sites))#
africa.human.site.count <- length(unique(africa.human.sites))#
western.human.lat<- as.numeric(as.vector(subset(human.data$Lat, human.data$Region=="Western North America")))#
central.human.lat <- as.numeric(as.vector(subset(human.data$Lat, human.data$Region=="Central North America")))#
eastern.human.lat <- as.numeric(as.vector(subset(human.data$Lat, human.data$Region=="Eastern North America")))#
all.eastern.human.lat <- c(as.numeric(as.vector(central.human.lat)), as.numeric(as.vector(eastern.human.lat)))#
south.america.human.lat <- as.numeric(as.vector(subset(human.data$Lat, human.data$Region=="South America")))#
siberia.human.lat <- as.numeric(as.vector(subset(human.data$Lat, human.data$Region=="Siberia")))#
east.beringia.human.lat <- as.numeric(as.vector(subset(human.data$Lat, human.data$Region=="East Beringia")))#
europe.human.lat <- as.numeric(as.vector(subset(human.data$Lat, human.data$Region=="Europe")))#
oceania.human.lat <- as.numeric(as.vector(subset(human.data$Lat, human.data$Region=="Oceania")))#
africa.human.lat <- as.numeric(as.vector(subset(human.data$Lat, human.data$Region=="Africa")))#
western.human.long<- as.numeric(as.vector(subset(human.data$Long, human.data$Region=="Western North America")))#
central.human.long <- as.numeric(as.vector(subset(human.data$Long, human.data$Region=="Central North America")))#
eastern.human.long <- as.numeric(as.vector(subset(human.data$Long, human.data$Region=="Eastern North America")))#
all.eastern.human.long <- c(as.numeric(as.vector(central.human.long)), as.numeric(as.vector(eastern.human.long)))#
south.america.human.long <- as.numeric(as.vector(subset(human.data$Long, human.data$Region=="South America")))#
siberia.human.long <- as.numeric(as.vector(subset(human.data$Long, human.data$Region=="Siberia")))#
east.beringia.human.long <- as.numeric(as.vector(subset(human.data$Long, human.data$Region=="East Beringia")))#
europe.human.long <- as.numeric(as.vector(subset(human.data$Long, human.data$Region=="Europe")))#
oceania.human.long <- as.numeric(as.vector(subset(human.data$Long, human.data$Region=="Oceania")))#
africa.human.long <- as.numeric(as.vector(subset(human.data$Long, human.data$Region=="Africa")))#
stack.14C.4D <- function(date, sigma, xmin, xmax, lat, long){#
    date.frame <- data.frame(date, sigma, lat, long)#
    names(date.frame) <- c("Date", "Sigma", "Lat", "Long")#
    date.sub <- subset(date.frame, xmin < Date & Date < xmax)#
    ids.cus = paste("Date", 1:length(date.sub$Date), sep = "")#
    coord.sub <- data.frame(ids.cus, date.sub$Lat, date.sub$Long)#
    names(coord.sub) <- c(".id", "Lat", "Long")#
    samp.intcal <- rep("intcal13", length(date.sub$Date))#
    samp.slugdens <- BchronCalibrate(date.sub$Date, date.sub$Sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.coord <- merge(samp.ages, coord.sub, by.x=".id")#
    return(samp.coord)#
}#
#
median.stack.14C.4d <- function(x, sigma, sites, xmin, xmax){#
    samp.intcal <- rep("intcal13", length(x))#
    samp.slugdens <- BchronCalibrate(x, sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.median <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, median))#
    medians.all <-as.vector(samp.median[,1])#
    medians <- medians.all[medians.all < xmax & medians.all > xmin]#
    return(medians)#
}#
stack.14C.4D.old <- function(date, sigma, xmin, xmax, lat, long){#
    date <- c(date, 100)#
    sigma <- c(sigma, 50)#
    lat <- c(lat, 0)#
    long <- c(long, 0)#
    date.frame <- data.frame(date, sigma, lat, long)#
    names(date.frame) <- c("Date", "Sigma", "Lat", "Long")#
    date.frame <- date.frame[complete.cases(date.frame),]#
    date.sub <- subset(date.frame, (xmin-500) < Date & Date < (xmax + 500))#
    ids.cus = paste("date", 1:length(date.sub$Date), sep = "")#
    coord.sub <- data.frame(ids.cus, date.sub$Lat, date.sub$Long)#
    names(coord.sub) <- c(".id", "Lat", "Long")#
    samp.intcal <- rep("intcal13", length(date.sub$Date))#
    samp.slugdens <- BchronCalibrate(date.sub$Date, date.sub$Sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.mean <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, mean))#
    samp.sd <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, sd))#
    samp.frame <- data.frame(samp.mean, samp.sd)#
    colnames(samp.frame) <- c("Mean", "Sd")#
    samp.frame$Min <- samp.frame$Mean-date.sub$Sigma#
    samp.frame$Max <- samp.frame$Mean+date.sub$Sigma#
    samp.frame$Lat <- coord.sub$Lat#
    samp.frame$Long <- coord.sub$Long#
    samp.frame <- data.table(samp.frame)#
    lat.frame <- samp.frame[, list(Lat=Lat, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
    long.frame <- samp.frame[, list(Long=Long, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
    fin.frame <- data.frame(lat.frame$Lat, long.frame$Long, lat.frame$ageGrid)#
    colnames(fin.frame) <- c("Lat", "Long", "ageGrid")#
    return(fin.frame)#
}#
stack.14C.4D <- function(date, sigma, xmin, xmax, lat, long){#
    date <- c(date, 100)#
    sigma <- c(sigma, 50)#
    lat <- c(lat, 0)#
    long <- c(long, 0)#
    date.frame <- data.frame(date, sigma, lat, long)#
    names(date.frame) <- c("Date", "Sigma", "Lat", "Long")#
    date.frame <- date.frame[complete.cases(date.frame),]#
    date.sub <- subset(date.frame, (xmin-500) < Date & Date < (xmax + 500))#
    ids.cus = paste("date", 1:length(date.sub$Date), sep = "")#
    coord.sub <- data.frame(ids.cus, date.sub$Lat, date.sub$Long)#
    names(coord.sub) <- c(".id", "Lat", "Long")#
    samp.intcal <- rep("intcal13", length(date.sub$Date))#
    samp.slugdens <- BchronCalibrate(date.sub$Date, date.sub$Sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.mean <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, mean))#
    samp.sd <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, sd))#
    samp.frame <- data.frame(samp.mean, samp.sd)#
    colnames(samp.frame) <- c("Mean", "Sd")#
    samp.frame$Min <- samp.frame$Mean-date.sub$Sigma#
    samp.frame$Max <- samp.frame$Mean+date.sub$Sigma#
    samp.frame$Lat <- coord.sub$Lat#
    samp.frame$Long <- coord.sub$Long#
    samp.frame <- data.table(samp.frame)#
    lat.frame <- samp.frame[, list(Lat=Lat, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
    long.frame <- samp.frame[, list(Long=Long, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
    fin.frame <- data.frame(lat.frame$Lat, long.frame$Long, lat.frame$ageGrid)#
    colnames(fin.frame) <- c("Lat", "Long", "ageGrid")#
    return(fin.frame)#
}#
mapGenPointDual <- function(map, human.date, megafauna.date, human.sigma, megafauna.sigma, xmin, xmax, human.lat, human.long, megafauna.lat, megafauna.long, interval, x.res, y.res) {#
    human.calibrated.date.frame <- stack.14C.4D(date=human.date, sigma=human.sigma, xmin=xmin, xmax=xmax, lat=human.lat, long=human.long)#
    #human.calibrated.date.frame <- subset(human.calibrated.date.frame, human.calibrated.date.frame$ageGrid < 16500)#
    human.calibrated.date.frame$Legend <- rep("Human", length(human.calibrated.date.frame$ageGrid))#
    megafauna.calibrated.date.frame <- stack.14C.4D(date=megafauna.date, sigma=megafauna.sigma, xmin=xmin, xmax=xmax, lat=megafauna.lat, long=megafauna.long)#
    megafauna.calibrated.date.frame$Legend <- rep("Megafauna", length(megafauna.calibrated.date.frame$ageGrid))#
    blank <- seq(1, 50000, 1)#
    blank.lat <- rep(0, length(blank))#
    blank.long <- rep(0, length(blank))#
    blank.human <- rep("Human", length(blank))#
    blank.megafauna <- rep("Megafauna", length(blank))#
    all.ageGrid <- c(human.calibrated.date.frame$ageGrid,megafauna.calibrated.date.frame$ageGrid, blank, blank)#
    all.lat <- c(human.calibrated.date.frame$Lat,megafauna.calibrated.date.frame$Lat, blank.lat, blank.lat)#
    all.long <- c(human.calibrated.date.frame$Long,megafauna.calibrated.date.frame$Long, blank.long, blank.long)#
    all.legend <- c(human.calibrated.date.frame$Legend,megafauna.calibrated.date.frame$Legend, blank.human, blank.megafauna)#
    calibrated.date.frame <- data.frame(all.ageGrid,all.lat,all.long,all.legend)#
    colnames(calibrated.date.frame) <- c("ageGrid", "Lat", "Long", "Legend")#
    date.interval <- seq(from=xmin, to=xmax, by=interval)#
    date.interval <- rev(date.interval)#
    date.list <- pbapply::pblapply(date.interval, function(x) subset(calibrated.date.frame, calibrated.date.frame$ageGrid > x & calibrated.date.frame$ageGrid < x+interval))#
    animation::ani.options(convert="/usr/local/bin/convert")#
    animation::saveVideo(expr=for (i in seq_along(date.interval)) {#
        #num.f <- formatC(seq(xmin, xmax, interval), width=5, format="d", flag="0")#
        #num <- rev(num.f)#
        num <- formatC(seq(1, length(date.interval), 1), width=6, format="d", flag="0")#
        plots <- ggmap(map, alpha=0.2) +#
        geom_point(data=data.frame(date.list[i]), aes(x=Long, y=Lat, colour=Legend), alpha=0.5, size=4, shape=15)+#
        coord_equal() +#
        coord_map() +#
        theme_tufte() +#
        ggtitle(paste(date.interval[i], " cal BP", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE)#
        ggsave(plots, filename=paste("map",num[i], ".png", sep=""))#
    }, video.name="iberia.mp4", img.name="map")#
    #ffmpeg -f image2 -i map%06d.png -vcodec mjpeg -q:v 0 -r 25 iberia.avi#
}#
#
# addalpha()#
addalpha <- function(colors, alpha=1.0) {#
    r <- col2rgb(colors, alpha=T)#
    # Apply alpha#
    r[4,] <- alpha*255#
    r <- r/255.0#
    return(rgb(r[1,], r[2,], r[3,], r[4,]))#
}#
#
# colorRampPaletteAlpha()#
colorRampPaletteAlpha <- function(colors, n=32, interpolate='linear') {#
    # Create the color ramp normally#
    cr <- colorRampPalette(colors, interpolate=interpolate)(n)#
    # Find the alpha channel#
    a <- col2rgb(colors, alpha=T)[4,]#
    # Interpolate#
    if (interpolate=='linear') {#
        l <- approx(a, n=n)#
    } else {#
        l <- spline(a, n=n)#
    }#
    l$y[l$y > 255] <- 255 # Clamp if spline is > 255#
    cr <- addalpha(cr, l$y/255.0)#
    return(cr)#
}#
mapGenHeatDual <- function(map, human.date, megafauna.date, human.sigma, megafauna.sigma, xmin, xmax, human.lat, human.long, megafauna.lat, megafauna.long, interval, x.res, y.res, land.file) {#
    stack.14C.4D.old <- function(date, sigma, xmin, xmax, lat, long){#
        date <- c(date, 100)#
        sigma <- c(sigma, 50)#
        lat <- c(lat, 0)#
        long <- c(long, 0)#
        date.frame <- data.frame(date, sigma, lat, long)#
        names(date.frame) <- c("Date", "Sigma", "Lat", "Long")#
        date.frame <- date.frame[complete.cases(date.frame),]#
        date.sub <- subset(date.frame, (xmin-500) < Date & Date < (xmax + 500))#
        ids.cus = paste("date", 1:length(date.sub$Date), sep = "")#
        coord.sub <- data.frame(ids.cus, date.sub$Lat, date.sub$Long)#
        names(coord.sub) <- c(".id", "Lat", "Long")#
        samp.intcal <- rep("intcal13", length(date.sub$Date))#
        samp.slugdens <- BchronCalibrate(date.sub$Date, date.sub$Sigma, samp.intcal)#
        samp.ages <- ldply(samp.slugdens, data.frame)#
        samp.mean <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, mean))#
        samp.sd <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, sd))#
        samp.dens <- data.frame(tapply(samp.ages$densities, samp.ages$.id, sum))#
        samp.frame <- data.frame(samp.mean, samp.sd, samp.dens)#
        colnames(samp.frame) <- c("Mean", "Sd", "Density")#
        samp.frame$Min <- samp.frame$Mean-date.sub$Sigma#
        samp.frame$Max <- samp.frame$Mean+date.sub$Sigma#
        samp.frame$Lat <- coord.sub$Lat#
        samp.frame$Long <- coord.sub$Long#
        samp.frame <- data.table(samp.frame)#
        lat.frame <- samp.frame[, list(Lat=Lat, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
        long.frame <- samp.frame[, list(Long=Long, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
        density.frame <- samp.frame[, list(Density=Density, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
#
        fin.frame <- data.frame(lat.frame$Lat, long.frame$Long, lat.frame$ageGrid, density.frame$Density)#
        colnames(fin.frame) <- c("Lat", "Long", "ageGrid", "Density")#
        return(fin.frame)#
    }#
    stack.14C.4D <- function(date, sigma, xmin, xmax, lat, long){#
        date <- c(date, 100)#
        sigma <- c(sigma, 50)#
        lat <- c(lat, 0)#
        long <- c(long, 0)#
        date.frame <- data.frame(date, sigma, lat, long)#
        names(date.frame) <- c("Date", "Sigma", "Lat", "Long")#
        date.frame <- date.frame[complete.cases(date.frame),]#
        date.sub <- subset(date.frame, (xmin-500) < Date & Date < (xmax + 500))#
        ids.cus = paste("Date", 1:length(date.sub$Date), sep = "")#
        coord.sub <- data.frame(ids.cus, date.sub$Lat, date.sub$Long)#
        names(coord.sub) <- c(".id", "Lat", "Long")#
        samp.intcal <- rep("intcal13", length(date.sub$Date))#
        samp.slugdens <- BchronCalibrate(date.sub$Date, date.sub$Sigma, samp.intcal)#
        samp.ages <- ldply(samp.slugdens, data.frame)#
        samp.test <- merge(x=samp.ages, y=coord.sub, by.x=".id", by.y=".id")#
        samp.test$DensityScale <- reshape::rescaler.default(samp.test$densities, type = "range")#
        return(samp.test)#
    }#
    land <- readOGR(land.file)#
    list_of_Lines <- slot(land, "lines")#
    land2 <-  SpatialPolygons(lapply(list_of_Lines, function(x) {#
        Polygons(list(Polygon(slot(slot(x, "Lines")[[1]], "coords"))),#
        ID=slot(x, "ID"))#
    }),#
    proj4string=CRS("+proj=longlat +ellps=WGS84"))#
    landset <- SpatialLines2PolySet(land)#
    polyland <- PolySet2SpatialPolygons(landset)#
    human.calibrated.date.frame <- stack.14C.4D(date=human.date, sigma=human.sigma, xmin=xmin, xmax=xmax, lat=human.lat, long=human.long)#
    #human.calibrated.date.frame <- subset(human.calibrated.date.frame, human.calibrated.date.frame$ageGrid < 16500)#
    human.calibrated.date.frame$Legend <- rep("Human", length(human.calibrated.date.frame$ageGrid))#
    megafauna.calibrated.date.frame <- stack.14C.4D(date=megafauna.date, sigma=megafauna.sigma, xmin=xmin, xmax=xmax, lat=megafauna.lat, long=megafauna.long)#
    megafauna.calibrated.date.frame$Legend <- rep("Megafauna", length(megafauna.calibrated.date.frame$ageGrid))#
    blank <- seq(xmin, xmax, 1)#
    blank.lat <- rep(0, length(blank))#
    blank.long <- rep(0, length(blank))#
    blank.human <- rep("Human", length(blank))#
    blank.megafauna <- rep("Megafauna", length(blank))#
    all.ageGrid <- c(human.calibrated.date.frame$ageGrid,megafauna.calibrated.date.frame$ageGrid, blank, blank)#
    all.lat <- c(human.calibrated.date.frame$Lat,megafauna.calibrated.date.frame$Lat, blank.lat, blank.lat)#
    all.long <- c(human.calibrated.date.frame$Long,megafauna.calibrated.date.frame$Long, blank.long, blank.long)#
    all.legend <- c(human.calibrated.date.frame$Legend,megafauna.calibrated.date.frame$Legend, blank.human, blank.megafauna)#
    calibrated.date.frame <- data.frame(all.ageGrid,all.lat,all.long,all.legend)#
    colnames(calibrated.date.frame) <- c("ageGrid", "Lat", "Long", "Legend")#
    calibrated.date.frame <- calibrated.date.frame[complete.cases(calibrated.date.frame),]#
    dateScrub <- function(dataframe, age.min, age.max) {#
        dataframe$point <- 0#
        dataframe$point[findInterval(dataframe$ageGrid, c(age.min,age.max)) == 1L] <- 1#
        return(dataframe)#
    }#
    date.interval <- seq(from=xmin, to=xmax, by=interval)#
    date.interval <- rev(date.interval)#
    date.min <- date.interval-interval/2#
    date.max <- date.interval+interval/2#
    date.list <- pbapply::pblapply(date.interval, function(x) dateScrub(dataframe=calibrated.date.frame, age.min=x-interval/2, age.max=x+interval/2))#
    heat.function.min <- function(data.frame, x.res, y.res) {#
        data.frame <- data.frame[complete.cases(data.frame),]#
        data.frame.int <- with(data.frame, interp(x=Long, y=Lat, z=point, duplicate="user", dupfun="max", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))#
        land.clip <- crop(data.map, polyland)#
        results <- land.clip@data#
        return(results)#
    }#
    heat.function.max <- function(data.frame, x.res, y.res) {#
        data.frame <- data.frame[complete.cases(data.frame),]#
#
        data.frame.int <- with(data.frame, interp(x=Long, y=Lat, z=point, duplicate="user", dupfun="max", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))#
        land.clip <- crop(data.map, polyland)#
        results <- land.clip@data#
        return(results)#
    }#
    heat.function.mean <- function(data.frame, x.res, y.res) {#
        data.frame <- data.frame[complete.cases(data.frame),]#
        data.frame.int <- with(data.frame, interp(x=Long, y=Lat, z=point, duplicate="user", dupfun="mean", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))#
        land.clip <- crop(data.map, polyland)#
        results <- land.clip@data#
        return(results)#
    }#
    animation::ani.options(convert="/usr/local/bin/convert")#
    animation::saveVideo(expr=for (i in seq_along(date.interval)) {#
        human.data <- subset(date.list[[i]], date.list[[i]]$Legend=="Human")#
        megafauna.data <- subset(date.list[[i]], date.list[[i]]$Legend=="Megafauna")#
        human.small <- subset(human.data, ageGrid < 15000)#
        human.int <- heat.function.mean(human.data, x.res=x.res, y.res=y.res)#
        megafauna.int <- heat.function.mean(megafauna.data, x.res=x.res, y.res=y.res)#
        human.names <- rep("Human", length(human.int$x))#
        megafauna.names <- rep("Megafauna", length(megafauna.int$x))#
        x.vector <- c(human.int$x, megafauna.int$x)#
        y.vector <- c(human.int$y, megafauna.int$y)#
        z.vector <- c(human.int$z/max(human.int$z), megafauna.int$z/max(megafauna.int$z))#
        name.vector <- c(human.names, megafauna.names)#
        total.frame <- data.frame(x.vector, y.vector, z.vector, name.vector)#
        colnames(total.frame) <- c("x", "y", "z", "Legend")#
        #num.f <- formatC(seq(xmin, xmax, interval), width=5, format="d", flag="0")#
        #num <- rev(num.f)#
        num <- formatC(seq(1, length(date.interval), 1), width=6, format="d", flag="0")#
        human.plot <- ggmap(map) +#
        geom_tile(data=human.int, aes(x=x, y=y, fill=z,  alpha=z))+#
        coord_equal() +#
        coord_map() +#
        scale_alpha_continuous(range=c(0.2, 1), guide="none") +#
        scale_fill_gradientn(name = "Latest Date", colors=rev(heat.colors(17)), na.value="white") +#
        scale_y_continuous("Latitude", limits = c(25, 73)) +#
        scale_x_continuous("Longitude", limits = c(-165, -60), breaks=seq(-165, -60, 30)) +#
        theme_tufte() +#
        ggtitle("North America Humans") +#
        ggtitle(paste(date.interval[i], " cal BP | Humans", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE, fill=FALSE)#
        megafauna.plot <- ggmap(map, alpha=0.2) +#
        geom_tile(data=megafauna.int, aes(x=x, y=y, fill=z,  alpha=z))+#
        coord_equal() +#
        coord_map() +#
        scale_alpha_continuous(range=c(0.2, 1), guide="none") +#
        scale_fill_gradient(name = "Latest Date", low="white", high="blue", na.value="white") +#
        scale_y_continuous("Latitude", limits = c(25, 73)) +#
        scale_x_continuous("Longitude", limits = c(-165, -60), breaks=seq(-165, -60, 30)) +#
        theme_tufte() +#
        ggtitle("North America Megafauna") +#
        ggtitle(paste(date.interval[i], " cal BP | Megafauna", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE, fill=FALSE)#
        ggsave(layOut(list(human.plot, 1:50, 1:50),#
        list(megafauna.plot, 1:50, 51:100)), filename=paste("/Users/lee/Dropbox/Documents/SCDPD/Map Runs/map",num[i], ".tiff", sep=""), device="tiff", dpi=320, width=7, height=3.7)#
    }, video.name="iberia.mp4", img.name="map")#
    #ffmpeg -f image2 -i map%06d.png -vcodec mjpeg -q:v 0 -r 25 iberia.avi#
}#
mapGenHeatDualDensity <- function(map, human.date, megafauna.date, human.sigma, megafauna.sigma, xmin, xmax, human.lat, human.long, megafauna.lat, megafauna.long, interval, x.res, y.res, land.file, lat.min, lat.max, long.min, long.max, frame.width, frame.height) {#
    stack.14C.4D <- function(date, sigma, xmin, xmax, lat, long){#
        date <- c(date, 100)#
        sigma <- c(sigma, 50)#
        lat <- c(lat, 0)#
        long <- c(long, 0)#
        date.frame <- data.frame(date, sigma, lat, long)#
        names(date.frame) <- c("Date", "Sigma", "Lat", "Long")#
        date.frame <- date.frame[complete.cases(date.frame),]#
        date.sub <- subset(date.frame, (xmin-500) < Date & Date < (xmax + 500))#
        ids.cus = paste("Date", 1:length(date.sub$Date), sep = "")#
        coord.sub <- data.frame(ids.cus, date.sub$Lat, date.sub$Long)#
        names(coord.sub) <- c(".id", "Lat", "Long")#
        samp.intcal <- rep("intcal13", length(date.sub$Date))#
        samp.slugdens <- BchronCalibrate(date.sub$Date, date.sub$Sigma, samp.intcal)#
        samp.ages <- ldply(samp.slugdens, data.frame)#
        samp.ages <- subset(samp.ages, samp.ages$densities > .0015)#
        samp.test <- merge(x=samp.ages, y=coord.sub, by.x=".id", by.y=".id")#
        samp.test$DensityScale <- reshape::rescaler.default(samp.test$densities, type = "range")#
        return(samp.test)#
    }#
    land <- readOGR(land.file)#
    list_of_Lines <- slot(land, "lines")#
    land2 <-  SpatialPolygons(lapply(list_of_Lines, function(x) {#
        Polygons(list(Polygon(slot(slot(x, "Lines")[[1]], "coords"))),#
        ID=slot(x, "ID"))#
    }),#
    proj4string=CRS("+proj=longlat +ellps=WGS84"))#
    landset <- SpatialLines2PolySet(land)#
    polyland <- PolySet2SpatialPolygons(landset)#
    human.calibrated.date.frame <- stack.14C.4D(date=human.date, sigma=human.sigma, xmin=xmin, xmax=xmax, lat=human.lat, long=human.long)#
    #human.calibrated.date.frame <- subset(human.calibrated.date.frame, human.calibrated.date.frame$ageGrid < 16500)#
    human.calibrated.date.frame$Legend <- rep("Human", length(human.calibrated.date.frame$ageGrid))#
    megafauna.calibrated.date.frame <- stack.14C.4D(date=megafauna.date, sigma=megafauna.sigma, xmin=xmin, xmax=xmax, lat=megafauna.lat, long=megafauna.long)#
    megafauna.calibrated.date.frame$Legend <- rep("Megafauna", length(megafauna.calibrated.date.frame$ageGrid))#
    blank <- seq(xmin, xmax, 1)#
    blank.lat <- rep(0, length(blank))#
    blank.long <- rep(0, length(blank))#
    blank.human <- rep("Human", length(blank))#
    blank.megafauna <- rep("Megafauna", length(blank))#
    blank.0 <- rep(0, length(blank))#
    all.ageGrid <- c(human.calibrated.date.frame$ageGrid,megafauna.calibrated.date.frame$ageGrid, blank, blank)#
    all.lat <- c(human.calibrated.date.frame$Lat,megafauna.calibrated.date.frame$Lat, blank.lat, blank.lat)#
    all.long <- c(human.calibrated.date.frame$Long,megafauna.calibrated.date.frame$Long, blank.long, blank.long)#
    all.densities <- c(human.calibrated.date.frame$densities,megafauna.calibrated.date.frame$densities, blank.0, blank.0)#
#
    all.densityscale <- c(human.calibrated.date.frame$DensityScale,megafauna.calibrated.date.frame$DensityScale, blank.0, blank.0)#
#
    all.legend <- c(human.calibrated.date.frame$Legend,megafauna.calibrated.date.frame$Legend, blank.human, blank.megafauna)#
    calibrated.date.frame <- data.frame(all.ageGrid,all.lat,all.long,all.densities, all.densityscale,all.legend)#
    colnames(calibrated.date.frame) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale", "Legend")#
    calibrated.date.frame <- calibrated.date.frame[complete.cases(calibrated.date.frame),]#
    dateScrubOld <- function(dataframe, age.min, age.max) {#
        dataframe$point <- 0.1#
        dataframe$point[findInterval(dataframe$ageGrid, c(age.min,age.max)) == 1L] <- 1#
        dataframe$DensityPlot <- dataframe$DensityScale*dataframe$point#
        return(dataframe)#
    }#
    dateScrubBad <- function(dataframe, age.min, age.max) {#
        dataframe <- dataframe[complete.cases(dataframe),]#
        dataframe$point <- 0#
        dataframe$point[findInterval(dataframe$ageGrid, c(age.min,age.max)) == 1L] <- 1#
        dataframe.val <- subset(dataframe, dataframe$point==1)#
        dataframe.blank <- dataframe#
        dataframe.blank$densities <- dataframe.blank$densities*0#
        dataframe.blank$DensityScale <- dataframe.blank$DensityScale*0#
        dataframe.blank <- subset(dataframe.blank, dataframe$point==0)#
        all.ageGrid <- c(dataframe.val$ageGrid, dataframe.blank$ageGrid)#
        all.lat <- c(dataframe.val$Lat, dataframe.blank$Lat)#
        all.long <- c(dataframe.val$Long, dataframe.blank$Long)#
        all.densities <- c(dataframe.val$densities, dataframe.blank$densities)#
        all.densityscale <- c(dataframe.val$DensityScale, dataframe.blank$DensityScale)#
        all.legend <- c(as.vector(dataframe.val$Legend), as.vector(dataframe.blank$Legend))#
        full.date.frame <- data.frame(all.ageGrid,all.lat,all.long,all.densities, all.densityscale,all.legend)#
        colnames(full.date.frame) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale", "Legend")#
        full.date.frame <- full.date.frame[complete.cases(full.date.frame),]#
#
        return(full.date.frame)#
    }#
    dateScrub <- function(dataframe, age.min, age.max) {#
        dataframe$point <- 0#
        dataframe$point[findInterval(dataframe$ageGrid, c(age.min,age.max)) == 1L] <- 1#
        dataframe.val <- subset(dataframe, dataframe$point==1)#
        return(dataframe.val)#
    }#
    date.interval <- seq(from=xmin, to=xmax, by=interval)#
    date.interval <- rev(date.interval)#
    date.min <- date.interval-interval/2#
    date.max <- date.interval+interval/2#
    date.list <- pbapply::pblapply(date.interval, function(x) dateScrub(dataframe=calibrated.date.frame, age.min=x-interval/2, age.max=x+interval/2))#
    heat.function.min <- function(data.frame, x.res, y.res) {#
        data.frame <- data.frame[complete.cases(data.frame),]#
        data.frame.int <- with(data.frame, interp(x=Long, y=Lat, z=densities, duplicate="user", dupfun="max", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))#
        land.clip <- crop(data.map, polyland)#
        results <- land.clip@data#
        return(results)#
    }#
    heat.function.max <- function(data.frame, x.res, y.res) {#
        data.frame <- data.frame[complete.cases(data.frame),]#
        data.frame.int <- with(data.frame, interp(x=Long, y=Lat, z=densities, duplicate="user", dupfun="max", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))#
        land.clip <- crop(data.map, polyland)#
        results <- land.clip@data#
        return(results)#
    }#
    heat.function.mean <- function(data.frame, x.res, y.res) {#
        data.frame <- data.frame[complete.cases(data.frame),]#
        data.frame.int <- with(data.frame, interp(x=Long, y=Lat, z=DensityScale, duplicate="user", dupfun="mean", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))#
        land.clip <- crop(data.map, polyland)#
        results <- land.clip@data#
        #results$zmod <- reshape::rescaler.default(results$z, type = "range")#
        return(results)#
    }#
    animation::ani.options(convert="/usr/local/bin/convert")#
    animation::saveVideo(expr=for (i in seq_along(date.interval)) {#
        human.data <- subset(date.list[[i]], date.list[[i]]$Legend=="Human")#
        megafauna.data <- subset(date.list[[i]], date.list[[i]]$Legend=="Megafauna")#
        blank.ageGrid <- c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0)#
        blank.lat <- c(70.5,58.31,50.58,40.2,26.8,27.13,34.95,47.78,71.3,42.6)#
        blank.long <- c(-159, -154.64,-125.25,-124,-98,-81,-76.7,-54.33,-76.44,-100)#
        blank.densities <- c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0)#
        blank.point <- c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0)#
        blank.legend.human <- rep("Human", 10)#
        blank.legend.megafauna <- rep("Megafauna", 10)#
        blank.megafauna.frame <- data.frame(blank.ageGrid, blank.lat, blank.long, blank.densities, blank.densities,blank.legend.megafauna, blank.point)#
        colnames(blank.megafauna.frame) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale", "Legend", "point")#
        blank.human.frame <- data.frame(blank.ageGrid, blank.lat, blank.long, blank.densities, blank.densities,blank.legend.human, blank.point)#
        colnames(blank.human.frame) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale", "Legend", "point")#
        human.data <- rbind(human.data, blank.human.frame)#
        megafauna.data <- rbind(megafauna.data, blank.megafauna.frame)#
        human.int <- heat.function.mean(human.data, x.res=x.res, y.res=y.res)#
        megafauna.int <- heat.function.mean(megafauna.data, x.res=x.res, y.res=y.res)#
        human.names <- rep("Human", length(human.int$x))#
        megafauna.names <- rep("Megafauna", length(megafauna.int$x))#
        x.vector <- c(human.int$x, megafauna.int$x)#
        y.vector <- c(human.int$y, megafauna.int$y)#
        z.vector <- c(human.int$z/max(human.int$z), megafauna.int$z/max(megafauna.int$z))#
        name.vector <- c(human.names, megafauna.names)#
        total.frame <- data.frame(x.vector, y.vector, z.vector, name.vector)#
        colnames(total.frame) <- c("x", "y", "z", "Legend")#
        #num.f <- formatC(seq(xmin, xmax, interval), width=5, format="d", flag="0")#
        #num <- rev(num.f)#
        num <- formatC(seq(1, length(date.interval), 1), width=6, format="d", flag="0")#
        blank.human.plot <- ggmap(map) +#
        coord_equal() +#
        coord_map() +#
        scale_y_continuous("Latitude", limits = c(lat.min, lat.max)) +#
        scale_x_continuous("Longitude", limits = c(long.min, long.max)) +#
        theme_tufte() +#
        ggtitle(paste(date.interval[i], " cal BP | Humans", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE, fill=FALSE)#
        blank.megafauna.plot <- ggmap(map) +#
        coord_equal() +#
        coord_map() +#
        scale_y_continuous("Latitude", limits = c(lat.min, lat.max)) +#
        scale_x_continuous("Longitude", limits = c(long.min, long.max)) +#
        theme_tufte() +#
        ggtitle(paste(date.interval[i], " cal BP | Megafauna", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE, fill=FALSE)#
        val.human.plot <- ggmap(map) +#
        geom_contour(data=human.int, aes(x=x, y=y, z=z), colour="red", alpha=0.2, binwidth=0.001)+#
        geom_tile(data=human.int, aes(x=x, y=y, fill=z,  alpha=z))+#
        coord_equal() +#
        coord_map() +#
        scale_alpha_continuous(range=c(0, 1), guide="none") +#
        scale_fill_gradient(name = "Latest Date", low="pink", high="red",  limits=c(0, 1)) +#
        scale_y_continuous("Latitude", limits = c(lat.min, lat.max)) +#
        scale_x_continuous("Longitude", limits = c(long.min, long.max)) +#
        theme_tufte() +#
        ggtitle(paste(date.interval[i], " cal BP | Humans", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE, fill=FALSE)#
        val.megafauna.plot <- ggmap(map) +#
        geom_contour(data=megafauna.int, aes(x=x, y=y, z=z), colour="blue", alpha=0.2, binwidth=0.001)+#
        geom_tile(data=megafauna.int, aes(x=x, y=y, fill=z,  alpha=z))+#
        coord_equal() +#
        coord_map() +#
        scale_alpha_continuous(range=c(0, 1), guide="none") +#
        scale_fill_gradient(name = "Latest Date", low="light blue", high="blue",  limits=c(0, 1)) +#
        scale_y_continuous("Latitude", limits = c(lat.min, lat.max)) +#
        scale_x_continuous("Longitude", limits = c(long.min, long.max)) +#
        theme_tufte() +#
        ggtitle(paste(date.interval[i], " cal BP | Megafauna", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE, fill=FALSE)#
        megafauna.z <- sum(megafauna.int$z)#
        human.z <- sum(human.int$z)#
        human.plot <- if(human.z==0) {#
            blank.human.plot#
        } else {#
            val.human.plot#
        }#
        megafauna.plot <- if(megafauna.z==0) {#
            blank.megafauna.plot#
        } else {#
            val.megafauna.plot#
        }#
        ggsave(layOut(list(human.plot, 1:50, 1:50),#
        list(megafauna.plot, 1:50, 51:100)), filename=paste("/Users/lee/Dropbox/Documents/SCDPD/Map Runs/map",num[i], ".tiff", sep=""), device="tiff", dpi=320, width=frame.width, height=frame.height)#
    }, video.name="iberia.mp4", img.name="map")#
    #ffmpeg -f image2 -i map%06d.png -vcodec mjpeg -q:v 0 -r 25 iberia.avi#
}
Eu <- get_map(location="europe", zoom=3, maptype="terrain")
ggmap(Eu, xlim=c(-11, 47), ylim=c(32, 73))
ggmap#
ggmap(Eu) +#
scale_x_continuous(limits=c(-11, 47)) +#
scale_y_continuous(limits=c(32, 73))
ggmap(Eu) +#
scale_x_continuous(limits=c(-11, 47)) +#
scale_y_continuous(limits=c(32, 70))
ggmap(Eu) +#
scale_x_continuous(limits=c(-11, 47)) +#
scale_y_continuous(limits=c(33, 70))
ggmap(Eu) +#
scale_x_continuous(limits=c(-11, 47)) +#
scale_y_continuous(limits=c(34, 70))
mapGenHeatDualDensity(map=Eu, human.date=europe.human.14C, megafauna.date=europe.megafauna.14C, human.sigma=europe.human.sig, megafauna.sigma=europe.megafauna.sig, human.lat=europe.human.lat, human.long=europe.human.long, megafauna.lat=europe.megafauna.lat, megafauna.long=europe.megafauna.long, xmin = 5000, xmax=20000, interval=10, x.res=250, y.res=250, land.file="/Users/lee/Dropbox/Documents/SCDPD/Maps/ne_110m_coastline", lat.min=34, lat.max=70, long.min=-11, long.max=47, frame.width=7, frame.height=3.7)
mapGenHeatDualDensity(map=Eu, human.date=europe.human.14C, megafauna.date=europe.megafauna.14C, human.sigma=europe.human.sig, megafauna.sigma=europe.megafauna.sig, human.lat=europe.human.lat, human.long=europe.human.long, megafauna.lat=europe.megafauna.lat, megafauna.long=europe.megafauna.long, xmin = 5000, xmax=20000, interval=10, x.res=250, y.res=250, land.file="/Users/lee/Dropbox/Documents/SCDPD/Maps/ne_110m_coastline", lat.min=34, lat.max=70, long.min=-11, long.max=47, frame.width=6, frame.height=3.7)
mapGenHeatDualDensity <- function(map, human.date, megafauna.date, human.sigma, megafauna.sigma, xmin, xmax, human.lat, human.long, megafauna.lat, megafauna.long, interval, x.res, y.res, land.file, lat.min, lat.max, long.min, long.max, frame.width, frame.height) {#
    stack.14C.4D <- function(date, sigma, xmin, xmax, lat, long){#
        date <- c(date, 100)#
        sigma <- c(sigma, 50)#
        lat <- c(lat, 0)#
        long <- c(long, 0)#
        date.frame <- data.frame(date, sigma, lat, long)#
        names(date.frame) <- c("Date", "Sigma", "Lat", "Long")#
        date.frame <- date.frame[complete.cases(date.frame),]#
        date.sub <- subset(date.frame, (xmin-500) < Date & Date < (xmax + 500))#
        ids.cus = paste("Date", 1:length(date.sub$Date), sep = "")#
        coord.sub <- data.frame(ids.cus, date.sub$Lat, date.sub$Long)#
        names(coord.sub) <- c(".id", "Lat", "Long")#
        samp.intcal <- rep("intcal13", length(date.sub$Date))#
        samp.slugdens <- BchronCalibrate(date.sub$Date, date.sub$Sigma, samp.intcal)#
        samp.ages <- ldply(samp.slugdens, data.frame)#
        samp.ages <- subset(samp.ages, samp.ages$densities > .0015)#
        samp.test <- merge(x=samp.ages, y=coord.sub, by.x=".id", by.y=".id")#
        samp.test$DensityScale <- reshape::rescaler.default(samp.test$densities, type = "range")#
        return(samp.test)#
    }#
    land <- readOGR(land.file)#
    list_of_Lines <- slot(land, "lines")#
    land2 <-  SpatialPolygons(lapply(list_of_Lines, function(x) {#
        Polygons(list(Polygon(slot(slot(x, "Lines")[[1]], "coords"))),#
        ID=slot(x, "ID"))#
    }),#
    proj4string=CRS("+proj=longlat +ellps=WGS84"))#
    landset <- SpatialLines2PolySet(land)#
    polyland <- PolySet2SpatialPolygons(landset)#
    human.calibrated.date.frame <- stack.14C.4D(date=human.date, sigma=human.sigma, xmin=xmin, xmax=xmax, lat=human.lat, long=human.long)#
    #human.calibrated.date.frame <- subset(human.calibrated.date.frame, human.calibrated.date.frame$ageGrid < 16500)#
    human.calibrated.date.frame$Legend <- rep("Human", length(human.calibrated.date.frame$ageGrid))#
    megafauna.calibrated.date.frame <- stack.14C.4D(date=megafauna.date, sigma=megafauna.sigma, xmin=xmin, xmax=xmax, lat=megafauna.lat, long=megafauna.long)#
    megafauna.calibrated.date.frame$Legend <- rep("Megafauna", length(megafauna.calibrated.date.frame$ageGrid))#
    blank <- seq(xmin, xmax, 1)#
    blank.lat <- rep(0, length(blank))#
    blank.long <- rep(0, length(blank))#
    blank.human <- rep("Human", length(blank))#
    blank.megafauna <- rep("Megafauna", length(blank))#
    blank.0 <- rep(0, length(blank))#
    all.ageGrid <- c(human.calibrated.date.frame$ageGrid,megafauna.calibrated.date.frame$ageGrid, blank, blank)#
    all.lat <- c(human.calibrated.date.frame$Lat,megafauna.calibrated.date.frame$Lat, blank.lat, blank.lat)#
    all.long <- c(human.calibrated.date.frame$Long,megafauna.calibrated.date.frame$Long, blank.long, blank.long)#
    all.densities <- c(human.calibrated.date.frame$densities,megafauna.calibrated.date.frame$densities, blank.0, blank.0)#
#
    all.densityscale <- c(human.calibrated.date.frame$DensityScale,megafauna.calibrated.date.frame$DensityScale, blank.0, blank.0)#
#
    all.legend <- c(human.calibrated.date.frame$Legend,megafauna.calibrated.date.frame$Legend, blank.human, blank.megafauna)#
    calibrated.date.frame <- data.frame(all.ageGrid,all.lat,all.long,all.densities, all.densityscale,all.legend)#
    colnames(calibrated.date.frame) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale", "Legend")#
    calibrated.date.frame <- calibrated.date.frame[complete.cases(calibrated.date.frame),]#
    dateScrubOld <- function(dataframe, age.min, age.max) {#
        dataframe$point <- 0.1#
        dataframe$point[findInterval(dataframe$ageGrid, c(age.min,age.max)) == 1L] <- 1#
        dataframe$DensityPlot <- dataframe$DensityScale*dataframe$point#
        return(dataframe)#
    }#
    dateScrubBad <- function(dataframe, age.min, age.max) {#
        dataframe <- dataframe[complete.cases(dataframe),]#
        dataframe$point <- 0#
        dataframe$point[findInterval(dataframe$ageGrid, c(age.min,age.max)) == 1L] <- 1#
        dataframe.val <- subset(dataframe, dataframe$point==1)#
        dataframe.blank <- dataframe#
        dataframe.blank$densities <- dataframe.blank$densities*0#
        dataframe.blank$DensityScale <- dataframe.blank$DensityScale*0#
        dataframe.blank <- subset(dataframe.blank, dataframe$point==0)#
        all.ageGrid <- c(dataframe.val$ageGrid, dataframe.blank$ageGrid)#
        all.lat <- c(dataframe.val$Lat, dataframe.blank$Lat)#
        all.long <- c(dataframe.val$Long, dataframe.blank$Long)#
        all.densities <- c(dataframe.val$densities, dataframe.blank$densities)#
        all.densityscale <- c(dataframe.val$DensityScale, dataframe.blank$DensityScale)#
        all.legend <- c(as.vector(dataframe.val$Legend), as.vector(dataframe.blank$Legend))#
        full.date.frame <- data.frame(all.ageGrid,all.lat,all.long,all.densities, all.densityscale,all.legend)#
        colnames(full.date.frame) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale", "Legend")#
        full.date.frame <- full.date.frame[complete.cases(full.date.frame),]#
#
        return(full.date.frame)#
    }#
    dateScrub <- function(dataframe, age.min, age.max) {#
        dataframe$point <- 0#
        dataframe$point[findInterval(dataframe$ageGrid, c(age.min,age.max)) == 1L] <- 1#
        dataframe.val <- subset(dataframe, dataframe$point==1)#
        return(dataframe.val)#
    }#
    date.interval <- seq(from=xmin, to=xmax, by=interval)#
    date.interval <- rev(date.interval)#
    date.min <- date.interval-interval/2#
    date.max <- date.interval+interval/2#
    date.list <- pbapply::pblapply(date.interval, function(x) dateScrub(dataframe=calibrated.date.frame, age.min=x-interval/2, age.max=x+interval/2))#
    heat.function.min <- function(data.frame, x.res, y.res) {#
        data.frame <- data.frame[complete.cases(data.frame),]#
        data.frame.int <- with(data.frame, interp(x=Long, y=Lat, z=densities, duplicate="user", dupfun="max", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))#
        land.clip <- crop(data.map, polyland)#
        results <- land.clip@data#
        return(results)#
    }#
    heat.function.max <- function(data.frame, x.res, y.res) {#
        data.frame <- data.frame[complete.cases(data.frame),]#
        data.frame.int <- with(data.frame, interp(x=Long, y=Lat, z=densities, duplicate="user", dupfun="max", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))#
        land.clip <- crop(data.map, polyland)#
        results <- land.clip@data#
        return(results)#
    }#
    heat.function.mean <- function(data.frame, x.res, y.res) {#
        data.frame <- data.frame[complete.cases(data.frame),]#
        data.frame.int <- with(data.frame, interp(x=Long, y=Lat, z=DensityScale, duplicate="user", dupfun="mean", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))#
        land.clip <- crop(data.map, polyland)#
        results <- land.clip@data#
        #results$zmod <- reshape::rescaler.default(results$z, type = "range")#
        return(results)#
    }#
    animation::ani.options(convert="/usr/local/bin/convert")#
    animation::saveVideo(expr=for (i in seq_along(date.interval)) {#
        human.data <- subset(date.list[[i]], date.list[[i]]$Legend=="Human")#
        megafauna.data <- subset(date.list[[i]], date.list[[i]]$Legend=="Megafauna")#
        blank.ageGrid <- c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0)#
        blank.lat <- c(70.5,58.31,50.58,40.2,26.8,27.13,34.95,47.78,71.3,42.6)#
        blank.long <- c(-159, -154.64,-125.25,-124,-98,-81,-76.7,-54.33,-76.44,-100)#
        blank.densities <- c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0)#
        blank.point <- c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0)#
        blank.legend.human <- rep("Human", 10)#
        blank.legend.megafauna <- rep("Megafauna", 10)#
        blank.megafauna.frame <- data.frame(blank.ageGrid, blank.lat, blank.long, blank.densities, blank.densities,blank.legend.megafauna, blank.point)#
        colnames(blank.megafauna.frame) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale", "Legend", "point")#
        blank.human.frame <- data.frame(blank.ageGrid, blank.lat, blank.long, blank.densities, blank.densities,blank.legend.human, blank.point)#
        colnames(blank.human.frame) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale", "Legend", "point")#
        human.data <- rbind(human.data, blank.human.frame)#
        megafauna.data <- rbind(megafauna.data, blank.megafauna.frame)#
        human.int <- heat.function.mean(human.data, x.res=x.res, y.res=y.res)#
        megafauna.int <- heat.function.mean(megafauna.data, x.res=x.res, y.res=y.res)#
        human.names <- rep("Human", length(human.int$x))#
        megafauna.names <- rep("Megafauna", length(megafauna.int$x))#
        x.vector <- c(human.int$x, megafauna.int$x)#
        y.vector <- c(human.int$y, megafauna.int$y)#
        z.vector <- c(human.int$z/max(human.int$z), megafauna.int$z/max(megafauna.int$z))#
        name.vector <- c(human.names, megafauna.names)#
        total.frame <- data.frame(x.vector, y.vector, z.vector, name.vector)#
        colnames(total.frame) <- c("x", "y", "z", "Legend")#
        #num.f <- formatC(seq(xmin, xmax, interval), width=5, format="d", flag="0")#
        #num <- rev(num.f)#
        num <- formatC(seq(1, length(date.interval), 1), width=6, format="d", flag="0")#
        blank.human.plot <- ggmap(map) +#
        coord_equal() +#
        coord_map() +#
        scale_y_continuous("Latitude", limits = c(lat.min, lat.max)) +#
        scale_x_continuous("Longitude", limits = c(long.min, long.max)) +#
        theme_tufte() +#
        ggtitle(paste(date.interval[i], " cal BP | Humans", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE, fill=FALSE)#
        blank.megafauna.plot <- ggmap(map) +#
        coord_equal() +#
        coord_map() +#
        scale_y_continuous("Latitude", limits = c(lat.min, lat.max)) +#
        scale_x_continuous("Longitude", limits = c(long.min, long.max)) +#
        theme_tufte() +#
        ggtitle(paste(date.interval[i], " cal BP | Megafauna", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE, fill=FALSE)#
        val.human.plot <- ggmap(map) +#
        geom_contour(data=human.int, aes(x=x, y=y, z=z), colour="red", alpha=0.2, binwidth=0.01)+#
        geom_tile(data=human.int, aes(x=x, y=y, fill=z,  alpha=z))+#
        coord_equal() +#
        coord_map() +#
        scale_alpha_continuous(range=c(0, 1), guide="none") +#
        scale_fill_gradient(name = "Latest Date", low="pink", high="red",  limits=c(0, 1)) +#
        scale_y_continuous("Latitude", limits = c(lat.min, lat.max)) +#
        scale_x_continuous("Longitude", limits = c(long.min, long.max)) +#
        theme_tufte() +#
        ggtitle(paste(date.interval[i], " cal BP | Humans", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE, fill=FALSE)#
        val.megafauna.plot <- ggmap(map) +#
        geom_contour(data=megafauna.int, aes(x=x, y=y, z=z), colour="blue", alpha=0.2, binwidth=0.01)+#
        geom_tile(data=megafauna.int, aes(x=x, y=y, fill=z,  alpha=z))+#
        coord_equal() +#
        coord_map() +#
        scale_alpha_continuous(range=c(0, 1), guide="none") +#
        scale_fill_gradient(name = "Latest Date", low="light blue", high="blue",  limits=c(0, 1)) +#
        scale_y_continuous("Latitude", limits = c(lat.min, lat.max)) +#
        scale_x_continuous("Longitude", limits = c(long.min, long.max)) +#
        theme_tufte() +#
        ggtitle(paste(date.interval[i], " cal BP | Megafauna", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE, fill=FALSE)#
        megafauna.z <- sum(megafauna.int$z)#
        human.z <- sum(human.int$z)#
        human.plot <- if(human.z==0) {#
            blank.human.plot#
        } else {#
            val.human.plot#
        }#
        megafauna.plot <- if(megafauna.z==0) {#
            blank.megafauna.plot#
        } else {#
            val.megafauna.plot#
        }#
        ggsave(layOut(list(human.plot, 1:50, 1:50),#
        list(megafauna.plot, 1:50, 51:100)), filename=paste("/Users/lee/Dropbox/Documents/SCDPD/Map Runs/map",num[i], ".tiff", sep=""), device="tiff", dpi=320, width=frame.width, height=frame.height)#
    }, video.name="iberia.mp4", img.name="map")#
    #ffmpeg -f image2 -i map%06d.png -vcodec mjpeg -q:v 0 -r 25 iberia.avi#
}
mapGenHeatDualDensity(map=Eu, human.date=europe.human.14C, megafauna.date=europe.megafauna.14C, human.sigma=europe.human.sig, megafauna.sigma=europe.megafauna.sig, human.lat=europe.human.lat, human.long=europe.human.long, megafauna.lat=europe.megafauna.lat, megafauna.long=europe.megafauna.long, xmin = 5000, xmax=20000, interval=10, x.res=250, y.res=250, land.file="/Users/lee/Dropbox/Documents/SCDPD/Maps/ne_110m_coastline", lat.min=34, lat.max=70, long.min=-11, long.max=47, frame.width=6, frame.height=3.7)
mapGenHeatDualDensity <- function(map, human.date, megafauna.date, human.sigma, megafauna.sigma, xmin, xmax, human.lat, human.long, megafauna.lat, megafauna.long, interval, x.res, y.res, land.file, lat.min, lat.max, long.min, long.max, frame.width, frame.height) {#
    stack.14C.4D <- function(date, sigma, xmin, xmax, lat, long){#
        date <- c(date, 100)#
        sigma <- c(sigma, 50)#
        lat <- c(lat, 0)#
        long <- c(long, 0)#
        date.frame <- data.frame(date, sigma, lat, long)#
        names(date.frame) <- c("Date", "Sigma", "Lat", "Long")#
        date.frame <- date.frame[complete.cases(date.frame),]#
        date.sub <- subset(date.frame, (xmin-500) < Date & Date < (xmax + 500))#
        ids.cus = paste("Date", 1:length(date.sub$Date), sep = "")#
        coord.sub <- data.frame(ids.cus, date.sub$Lat, date.sub$Long)#
        names(coord.sub) <- c(".id", "Lat", "Long")#
        samp.intcal <- rep("intcal13", length(date.sub$Date))#
        samp.slugdens <- BchronCalibrate(date.sub$Date, date.sub$Sigma, samp.intcal)#
        samp.ages <- ldply(samp.slugdens, data.frame)#
        samp.ages <- subset(samp.ages, samp.ages$densities > .0015)#
        samp.test <- merge(x=samp.ages, y=coord.sub, by.x=".id", by.y=".id")#
        samp.test$DensityScale <- reshape::rescaler.default(samp.test$densities, type = "range")#
        return(samp.test)#
    }#
    land <- readOGR(land.file)#
    list_of_Lines <- slot(land, "lines")#
    land2 <-  SpatialPolygons(lapply(list_of_Lines, function(x) {#
        Polygons(list(Polygon(slot(slot(x, "Lines")[[1]], "coords"))),#
        ID=slot(x, "ID"))#
    }),#
    proj4string=CRS("+proj=longlat +ellps=WGS84"))#
    landset <- SpatialLines2PolySet(land)#
    polyland <- PolySet2SpatialPolygons(landset)#
    human.calibrated.date.frame <- stack.14C.4D(date=human.date, sigma=human.sigma, xmin=xmin, xmax=xmax, lat=human.lat, long=human.long)#
    #human.calibrated.date.frame <- subset(human.calibrated.date.frame, human.calibrated.date.frame$ageGrid < 16500)#
    human.calibrated.date.frame$Legend <- rep("Human", length(human.calibrated.date.frame$ageGrid))#
    megafauna.calibrated.date.frame <- stack.14C.4D(date=megafauna.date, sigma=megafauna.sigma, xmin=xmin, xmax=xmax, lat=megafauna.lat, long=megafauna.long)#
    megafauna.calibrated.date.frame$Legend <- rep("Megafauna", length(megafauna.calibrated.date.frame$ageGrid))#
    blank <- seq(xmin, xmax, 1)#
    blank.lat <- rep(0, length(blank))#
    blank.long <- rep(0, length(blank))#
    blank.human <- rep("Human", length(blank))#
    blank.megafauna <- rep("Megafauna", length(blank))#
    blank.0 <- rep(0, length(blank))#
    all.ageGrid <- c(human.calibrated.date.frame$ageGrid,megafauna.calibrated.date.frame$ageGrid, blank, blank)#
    all.lat <- c(human.calibrated.date.frame$Lat,megafauna.calibrated.date.frame$Lat, blank.lat, blank.lat)#
    all.long <- c(human.calibrated.date.frame$Long,megafauna.calibrated.date.frame$Long, blank.long, blank.long)#
    all.densities <- c(human.calibrated.date.frame$densities,megafauna.calibrated.date.frame$densities, blank.0, blank.0)#
#
    all.densityscale <- c(human.calibrated.date.frame$DensityScale,megafauna.calibrated.date.frame$DensityScale, blank.0, blank.0)#
#
    all.legend <- c(human.calibrated.date.frame$Legend,megafauna.calibrated.date.frame$Legend, blank.human, blank.megafauna)#
    calibrated.date.frame <- data.frame(all.ageGrid,all.lat,all.long,all.densities, all.densityscale,all.legend)#
    colnames(calibrated.date.frame) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale", "Legend")#
    calibrated.date.frame <- calibrated.date.frame[complete.cases(calibrated.date.frame),]#
    dateScrubOld <- function(dataframe, age.min, age.max) {#
        dataframe$point <- 0.1#
        dataframe$point[findInterval(dataframe$ageGrid, c(age.min,age.max)) == 1L] <- 1#
        dataframe$DensityPlot <- dataframe$DensityScale*dataframe$point#
        return(dataframe)#
    }#
    dateScrubBad <- function(dataframe, age.min, age.max) {#
        dataframe <- dataframe[complete.cases(dataframe),]#
        dataframe$point <- 0#
        dataframe$point[findInterval(dataframe$ageGrid, c(age.min,age.max)) == 1L] <- 1#
        dataframe.val <- subset(dataframe, dataframe$point==1)#
        dataframe.blank <- dataframe#
        dataframe.blank$densities <- dataframe.blank$densities*0#
        dataframe.blank$DensityScale <- dataframe.blank$DensityScale*0#
        dataframe.blank <- subset(dataframe.blank, dataframe$point==0)#
        all.ageGrid <- c(dataframe.val$ageGrid, dataframe.blank$ageGrid)#
        all.lat <- c(dataframe.val$Lat, dataframe.blank$Lat)#
        all.long <- c(dataframe.val$Long, dataframe.blank$Long)#
        all.densities <- c(dataframe.val$densities, dataframe.blank$densities)#
        all.densityscale <- c(dataframe.val$DensityScale, dataframe.blank$DensityScale)#
        all.legend <- c(as.vector(dataframe.val$Legend), as.vector(dataframe.blank$Legend))#
        full.date.frame <- data.frame(all.ageGrid,all.lat,all.long,all.densities, all.densityscale,all.legend)#
        colnames(full.date.frame) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale", "Legend")#
        full.date.frame <- full.date.frame[complete.cases(full.date.frame),]#
#
        return(full.date.frame)#
    }#
    dateScrub <- function(dataframe, age.min, age.max) {#
        dataframe$point <- 0#
        dataframe$point[findInterval(dataframe$ageGrid, c(age.min,age.max)) == 1L] <- 1#
        dataframe.val <- subset(dataframe, dataframe$point==1)#
        return(dataframe.val)#
    }#
    date.interval <- seq(from=xmin, to=xmax, by=interval)#
    date.interval <- rev(date.interval)#
    date.min <- date.interval-interval/2#
    date.max <- date.interval+interval/2#
    date.list <- pbapply::pblapply(date.interval, function(x) dateScrub(dataframe=calibrated.date.frame, age.min=x-interval/2, age.max=x+interval/2))#
    heat.function.min <- function(data.frame, x.res, y.res) {#
        data.frame <- data.frame[complete.cases(data.frame),]#
        data.frame.int <- with(data.frame, interp(x=Long, y=Lat, z=densities, duplicate="user", dupfun="max", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))#
        land.clip <- crop(data.map, polyland)#
        results <- land.clip@data#
        return(results)#
    }#
    heat.function.max <- function(data.frame, x.res, y.res) {#
        data.frame <- data.frame[complete.cases(data.frame),]#
        data.frame.int <- with(data.frame, interp(x=Long, y=Lat, z=densities, duplicate="user", dupfun="max", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))#
        land.clip <- crop(data.map, polyland)#
        results <- land.clip@data#
        return(results)#
    }#
    heat.function.mean <- function(data.frame, x.res, y.res) {#
        data.frame <- data.frame[complete.cases(data.frame),]#
        data.frame.int <- with(data.frame, interp(x=Long, y=Lat, z=DensityScale, duplicate="user", dupfun="mean", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))#
        land.clip <- crop(data.map, polyland)#
        results <- land.clip@data#
        #results$zmod <- reshape::rescaler.default(results$z, type = "range")#
        return(results)#
    }#
    animation::ani.options(convert="/usr/local/bin/convert")#
    animation::saveVideo(expr=for (i in seq_along(date.interval)) {#
        human.data <- subset(date.list[[i]], date.list[[i]]$Legend=="Human")#
        megafauna.data <- subset(date.list[[i]], date.list[[i]]$Legend=="Megafauna")#
        blank.ageGrid <- c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0)#
        blank.lat <- c(70.5,58.31,50.58,40.2,26.8,27.13,34.95,47.78,71.3,42.6)#
        blank.long <- c(-159, -154.64,-125.25,-124,-98,-81,-76.7,-54.33,-76.44,-100)#
        blank.densities <- c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0)#
        blank.point <- c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0)#
        blank.legend.human <- rep("Human", 10)#
        blank.legend.megafauna <- rep("Megafauna", 10)#
        blank.megafauna.frame <- data.frame(blank.ageGrid, blank.lat, blank.long, blank.densities, blank.densities,blank.legend.megafauna, blank.point)#
        colnames(blank.megafauna.frame) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale", "Legend", "point")#
        blank.human.frame <- data.frame(blank.ageGrid, blank.lat, blank.long, blank.densities, blank.densities,blank.legend.human, blank.point)#
        colnames(blank.human.frame) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale", "Legend", "point")#
        human.data <- rbind(human.data, blank.human.frame)#
        megafauna.data <- rbind(megafauna.data, blank.megafauna.frame)#
        human.int <- heat.function.mean(human.data, x.res=x.res, y.res=y.res)#
        megafauna.int <- heat.function.mean(megafauna.data, x.res=x.res, y.res=y.res)#
        human.names <- rep("Human", length(human.int$x))#
        megafauna.names <- rep("Megafauna", length(megafauna.int$x))#
        x.vector <- c(human.int$x, megafauna.int$x)#
        y.vector <- c(human.int$y, megafauna.int$y)#
        z.vector <- c(human.int$z/max(human.int$z), megafauna.int$z/max(megafauna.int$z))#
        name.vector <- c(human.names, megafauna.names)#
        total.frame <- data.frame(x.vector, y.vector, z.vector, name.vector)#
        colnames(total.frame) <- c("x", "y", "z", "Legend")#
        #num.f <- formatC(seq(xmin, xmax, interval), width=5, format="d", flag="0")#
        #num <- rev(num.f)#
        num <- formatC(seq(1, length(date.interval), 1), width=6, format="d", flag="0")#
        blank.human.plot <- ggmap(map) +#
        coord_equal() +#
        coord_map() +#
        scale_y_continuous("Latitude", limits = c(lat.min, lat.max)) +#
        scale_x_continuous("Longitude", limits = c(long.min, long.max)) +#
        theme_tufte() +#
        ggtitle(paste(date.interval[i], " cal BP | Humans", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE, fill=FALSE)#
        blank.megafauna.plot <- ggmap(map) +#
        coord_equal() +#
        coord_map() +#
        scale_y_continuous("Latitude", limits = c(lat.min, lat.max)) +#
        scale_x_continuous("Longitude", limits = c(long.min, long.max)) +#
        theme_tufte() +#
        ggtitle(paste(date.interval[i], " cal BP | Megafauna", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE, fill=FALSE)#
        val.human.plot <- ggmap(map) +#
        #geom_contour(data=human.int, aes(x=x, y=y, z=z), colour="red", alpha=0.2, binwidth=0.01)+#
        geom_tile(data=human.int, aes(x=x, y=y, fill=z,  alpha=z))+#
        coord_equal() +#
        coord_map() +#
        scale_alpha_continuous(range=c(0, 1), guide="none") +#
        scale_fill_gradient(name = "Latest Date", low="pink", high="red",  limits=c(0, 1)) +#
        scale_y_continuous("Latitude", limits = c(lat.min, lat.max)) +#
        scale_x_continuous("Longitude", limits = c(long.min, long.max)) +#
        theme_tufte() +#
        ggtitle(paste(date.interval[i], " cal BP | Humans", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE, fill=FALSE)#
        val.megafauna.plot <- ggmap(map) +#
        #geom_contour(data=megafauna.int, aes(x=x, y=y, z=z), colour="blue", alpha=0.2, binwidth=0.01)+#
        geom_tile(data=megafauna.int, aes(x=x, y=y, fill=z,  alpha=z))+#
        coord_equal() +#
        coord_map() +#
        scale_alpha_continuous(range=c(0, 1), guide="none") +#
        scale_fill_gradient(name = "Latest Date", low="light blue", high="blue",  limits=c(0, 1)) +#
        scale_y_continuous("Latitude", limits = c(lat.min, lat.max)) +#
        scale_x_continuous("Longitude", limits = c(long.min, long.max)) +#
        theme_tufte() +#
        ggtitle(paste(date.interval[i], " cal BP | Megafauna", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE, fill=FALSE)#
        megafauna.z <- sum(megafauna.int$z)#
        human.z <- sum(human.int$z)#
        human.plot <- if(human.z==0) {#
            blank.human.plot#
        } else {#
            val.human.plot#
        }#
        megafauna.plot <- if(megafauna.z==0) {#
            blank.megafauna.plot#
        } else {#
            val.megafauna.plot#
        }#
        ggsave(layOut(list(human.plot, 1:50, 1:50),#
        list(megafauna.plot, 1:50, 51:100)), filename=paste("/Users/lee/Dropbox/Documents/SCDPD/Map Runs/map",num[i], ".tiff", sep=""), device="tiff", dpi=320, width=frame.width, height=frame.height)#
    }, video.name="iberia.mp4", img.name="map")#
    #ffmpeg -f image2 -i map%06d.png -vcodec mjpeg -q:v 0 -r 25 iberia.avi#
}
mapGenHeatDualDensity(map=Eu, human.date=europe.human.14C, megafauna.date=europe.megafauna.14C, human.sigma=europe.human.sig, megafauna.sigma=europe.megafauna.sig, human.lat=europe.human.lat, human.long=europe.human.long, megafauna.lat=europe.megafauna.lat, megafauna.long=europe.megafauna.long, xmin = 5000, xmax=20000, interval=10, x.res=250, y.res=250, land.file="/Users/lee/Dropbox/Documents/SCDPD/Maps/ne_110m_coastline", lat.min=34, lat.max=70, long.min=-11, long.max=47, frame.width=6, frame.height=3.7)
library(xlsx)
#Erase everything that comes before#
rm(list = ls(all = TRUE))#
#
#packrat::init("~/Dropbox/4.2 ky event/Data Analysis/R Code/For Distribution/Neolithic")#
#
#Compatibility#
if(.Platform$OS.type=="windows") {#
  quartz<-function() windows()#
}#
#
###Load Packages#
library(TTR)#
library(ggplot2)#
library(gridExtra)#
library(scales)#
library(gtable)#
library(wq)#
library(Bchron)#
library(plyr)#
library(bcp)#
#library(mgcv)#
library(sp)#
library(reshape)#
library(pbapply)#
library(maptools)#
library(rgdal)#
library(ggmap)#
library(dismo)#
library(RgoogleMaps)#
library(maps)#
library(mapdata)#
library(raster)#
library(rasterVis)#
library(landsat)#
library(parallel)#
###Load Data#
#neolithic.bio <- read.csv(file="http://www.bleedrake.com/Neolithic/neolithic.csv")#
neolithic.bio <- read.csv(file="~/Dropbox/4.2 ky event/Radiocarbon Final/neolithicbio.csv")#
collapse.the.dates.begin <- function(sites, biogeo, general, dates, sigma) {#
    n.t <- rep(100, length(sites))#
    df <- data.frame(sites, biogeo, general, dates, sigma)#
    colnames(df) <- c("Site", "Biogeo_Uni", "St_Area_NE", "CYrBPunc", "Sigma")#
    df <- arrange(df, desc(CYrBPunc))#
    df <- arrange(df, desc(Site))#
    df <- arrange(df, desc(Biogeo_Uni))#
    df <- arrange(df, desc(St_Area_NE))#
    df$Ttest <- c(#
    (abs(df[1:(nrow(df)-1),4]-df[2:nrow(df), 4]))/((sqrt(df[2:nrow(df), 5]^2 + df[1:(nrow(df)-1),5]^2)*sqrt(1/100))), NA)#
    df$pvalue <- c((2*pt(df[1:nrow(df),6], 100, lower=FALSE)))#
    df$Collapse <- rep("No", length(sites))#
    df <- transform(df, Collapse = ifelse(pvalue > 0.05, "Yes", Collapse))#
    df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
    df <- as.data.frame(df)#
    df <- df[complete.cases(df),]#
    return(df)#
}#
#
neolithic.bio <- collapse.the.dates.begin(sites=neolithic.bio$Site, biogeo=neolithic.bio$Biogeo_Uni, general=neolithic.bio$St_Area_NE, dates=neolithic.bio$CYrBPunc, sigma=neolithic.bio$Sigma)#
###Load Calibration Curves#
#intcal.13 <- read.csv(file="http://www.bleedrake.com/Neolithic/intcal13.csv")#
intcal.13 <- read.csv(file="/Users/lee/Dropbox/4.2 ky event/Radiocarbon Final/intcal13.csv")#
#
###Create vectors from data set by region#
#
northwest.14C <- subset(neolithic.bio$CYrBPunc, neolithic.bio$St_Area_NE==1)#
southwest.14C <- subset(neolithic.bio$CYrBPunc, neolithic.bio$St_Area_NE==2)#
innmed.14C <- subset(neolithic.bio$CYrBPunc, neolithic.bio$St_Area_NE==3)#
#
northwest.sig<- subset(neolithic.bio$Sigma, neolithic.bio$St_Area_NE==1)#
southwest.sig <- subset(neolithic.bio$Sigma, neolithic.bio$St_Area_NE==2)#
innmed.sig <- subset(neolithic.bio$Sigma, neolithic.bio$St_Area_NE==3)#
#
northwest.intcal <- rep("intcal13", length(northwest.14C))#
southwest.intcal <- rep("intcal13", length(southwest.14C))#
innmed.intcal <- rep("intcal13", length(innmed.14C))#
#
northwest.names <- rep("northwest", length(northwest.14C))#
southwest.names <- rep("Southwest", length(southwest.14C))#
innmed.names <- rep("innmed", length(innmed.14C))#
#
northwest.sites<- subset(neolithic.bio$Site, neolithic.bio$St_Area_NE==1)#
southwest.sites <- subset(neolithic.bio$Site, neolithic.bio$St_Area_NE==2)#
innmed.sites <- subset(neolithic.bio$Site, neolithic.bio$St_Area_NE==3)#
#
northwest.site.count <- length(unique(northwest.sites))#
southwest.site.count <- length(unique(southwest.sites))#
innmed.site.count <- length(unique(innmed.sites))#
#
northwest.col <- collapse.the.dates(sites=northwest.sites, dates=northwest.14C, sigma=northwest.sig)#
southhwest.col <- collapse.the.dates(sites=southwest.sites, dates=southwest.14C, sigma=southwest.sig)#
innmed.col <- collapse.the.dates(sites=innmed.sites, dates=innmed.14C, sigma=innmed.sig)#
#######By Region#
Cantabria.14C <- subset(neolithic.bio$CYrBPunc, neolithic.bio$Region=="Cantabria")#
Cantabria.sig<- subset(neolithic.bio$Sigma, neolithic.bio$Region=="Cantabria")#
Cantabria.intcal <- rep("intcal13", length(Cantabria.14C))#
Cantabria.names <- rep("Cantabria", length(Cantabria.14C))#
Cantabria.sites<- subset(neolithic.bio$Site, neolithic.bio$Region=="Cantabria")#
Cantabria.site.count <- length(unique(Cantabria.sites))#
#
Portugal.Septentrional.14C <- subset(neolithic.bio$CYrBPunc, neolithic.bio$Region=="Portugal Septentrional")#
Portugal.Septentrional.sig<- subset(neolithic.bio$Sigma, neolithic.bio$Region=="Portugal Septentrional")#
Portugal.Septentrional.intcal <- rep("intcal13", length(Portugal.Septentrional.14C))#
Portugal.Septentrional.names <- rep("Portugal Septentrional", length(Portugal.Septentrional.14C))#
Portugal.Septentrional.sites<- subset(neolithic.bio$Site, neolithic.bio$Region=="Portugal Septentrional")#
Portugal.Septentrional.site.count <- length(unique(Portugal.Septentrional.sites))#
#
Portugal.Meridional.14C <- subset(neolithic.bio$CYrBPunc, neolithic.bio$Region=="Portugal Meridional")#
Portugal.Meridional.sig<- subset(neolithic.bio$Sigma, neolithic.bio$Region=="Portugal Meridional")#
Portugal.Meridional.intcal <- rep("intcal13", length(Portugal.Meridional.14C))#
Portugal.Meridional.names <- rep("Portugal Meridional", length(Portugal.Meridional.14C))#
Portugal.Meridional.sites<- subset(neolithic.bio$Site, neolithic.bio$Region=="Portugal Meridional")#
Portugal.Meridional.site.count <- length(unique(Portugal.Meridional.sites))#
#
Pais.Valenciano.14C <- subset(neolithic.bio$CYrBPunc, neolithic.bio$Region=="Pais Valenciano")#
Pais.Valenciano.sig<- subset(neolithic.bio$Sigma, neolithic.bio$Region=="Pais Valenciano")#
Pais.Valenciano.intcal <- rep("intcal13", length(Pais.Valenciano.14C))#
Pais.Valenciano.names <- rep("Pais Valenciano", length(Pais.Valenciano.14C))#
Pais.Valenciano.sites<- subset(neolithic.bio$Site, neolithic.bio$Region=="Pais Valenciano")#
Pais.Valenciano.site.count <- length(unique(Pais.Valenciano.sites))#
#
Pais.Vasco.14C <- subset(neolithic.bio$CYrBPunc, neolithic.bio$Region=="Pais Vasco")#
Pais.Vasco.sig<- subset(neolithic.bio$Sigma, neolithic.bio$Region=="Pais Vasco")#
Pais.Vasco.intcal <- rep("intcal13", length(Pais.Vasco.14C))#
Pais.Vasco.names <- rep("Pais Vasco", length(Pais.Vasco.14C))#
Pais.Vasco.sites<- subset(neolithic.bio$Site, neolithic.bio$Region=="Pais Vasco")#
Pais.Vasco.site.count <- length(unique(Pais.Vasco.sites))#
#
Andalucia.Oriental.14C <- subset(neolithic.bio$CYrBPunc, neolithic.bio$Region=="Andalucia Oriental")#
Andalucia.Oriental.sig<- subset(neolithic.bio$Sigma, neolithic.bio$Region=="Andalucia Oriental")#
Andalucia.Oriental.intcal <- rep("intcal13", length(Andalucia.Oriental.14C))#
Andalucia.Oriental.names <- rep("Andalucia Oriental", length(Andalucia.Oriental.14C))#
Andalucia.Oriental.sites<- subset(neolithic.bio$Site, neolithic.bio$Region=="Andalucia Oriental")#
Andalucia.Oriental.site.count <- length(unique(Andalucia.Oriental.sites))#
#
Aragon.14C <- subset(neolithic.bio$CYrBPunc, neolithic.bio$Region=="Aragon")#
Aragon.sig<- subset(neolithic.bio$Sigma, neolithic.bio$Region=="Aragon")#
Aragon.intcal <- rep("intcal13", length(Aragon.14C))#
Aragon.names <- rep("Aragon", length(Aragon.14C))#
Aragon.sites<- subset(neolithic.bio$Site, neolithic.bio$Region=="Aragon")#
Aragon.site.count <- length(unique(Aragon.sites))#
#
Castilla.Leon.14C <- subset(neolithic.bio$CYrBPunc, neolithic.bio$Region=="Castilla Leon")#
Castilla.Leon.sig<- subset(neolithic.bio$Sigma, neolithic.bio$Region=="Castilla Leon")#
Castilla.Leon.intcal <- rep("intcal13", length(Castilla.Leon.14C))#
Castilla.Leon.names <- rep("Castilla Leon", length(Castilla.Leon.14C))#
Castilla.Leon.sites<- subset(neolithic.bio$Site, neolithic.bio$Region=="Castilla Leon")#
Castilla.Leon.site.count <- length(unique(Castilla.Leon.sites))#
#
Galicia.14C <- subset(neolithic.bio$CYrBPunc, neolithic.bio$Region=="Galicia")#
Galicia.sig<- subset(neolithic.bio$Sigma, neolithic.bio$Region=="Galicia")#
Galicia.intcal <- rep("intcal13", length(Galicia.14C))#
Galicia.names <- rep("Galicia", length(Galicia.14C))#
Galicia.sites<- subset(neolithic.bio$Site, neolithic.bio$Region=="Galicia")#
Galicia.site.count <- length(unique(Galicia.sites))#
#
Cataluna.14C <- subset(neolithic.bio$CYrBPunc, neolithic.bio$Region=="Cataluna")#
Cataluna.sig<- subset(neolithic.bio$Sigma, neolithic.bio$Region=="Cataluna")#
Cataluna.intcal <- rep("intcal13", length(Cataluna.14C))#
Cataluna.names <- rep("Cataluna", length(Cataluna.14C))#
Cataluna.sites<- subset(neolithic.bio$Site, neolithic.bio$Region=="Cataluna")#
Cataluna.site.count <- length(unique(Cataluna.sites))#
#
Andalucia.Central.14C <- subset(neolithic.bio$CYrBPunc, neolithic.bio$Region=="Andalucia Central")#
Andalucia.Central.sig<- subset(neolithic.bio$Sigma, neolithic.bio$Region=="Andalucia Central")#
Andalucia.Central.intcal <- rep("intcal13", length(Andalucia.Central.14C))#
Andalucia.Central.names <- rep("Andalucia Central", length(Andalucia.Central.14C))#
Andalucia.Central.sites<- subset(neolithic.bio$Site, neolithic.bio$Region=="Andalucia Central")#
Andalucia.Central.site.count <- length(unique(Andalucia.Central.sites))#
#
Asturias.14C <- subset(neolithic.bio$CYrBPunc, neolithic.bio$Region=="Asturias")#
Asturias.sig<- subset(neolithic.bio$Sigma, neolithic.bio$Region=="Asturias")#
Asturias.intcal <- rep("intcal13", length(Asturias.14C))#
Asturias.names <- rep("Asturias", length(Asturias.14C))#
Asturias.sites<- subset(neolithic.bio$Site, neolithic.bio$Region=="Asturias")#
Asturias.site.count <- length(unique(Asturias.sites))#
#
Murcia.14C <- subset(neolithic.bio$CYrBPunc, neolithic.bio$Region=="Murcia")#
Murcia.sig<- subset(neolithic.bio$Sigma, neolithic.bio$Region=="Murcia")#
Murcia.intcal <- rep("intcal13", length(Murcia.14C))#
Murcia.names <- rep("Murcia", length(Murcia.14C))#
Murcia.sites<- subset(neolithic.bio$Site, neolithic.bio$Region=="Murcia")#
Murcia.site.count <- length(unique(Murcia.sites))#
#
Navarra.14C <- subset(neolithic.bio$CYrBPunc, neolithic.bio$Region=="Navarra")#
Navarra.sig<- subset(neolithic.bio$Sigma, neolithic.bio$Region=="Navarra")#
Navarra.intcal <- rep("intcal13", length(Navarra.14C))#
Navarra.names <- rep("Navarra", length(Navarra.14C))#
Navarra.sites<- subset(neolithic.bio$Site, neolithic.bio$Region=="Navarra")#
Navarra.site.count <- length(unique(Navarra.sites))#
#
Castilla.La.Mancha.14C <- subset(neolithic.bio$CYrBPunc, neolithic.bio$Region=="Castilla La Mancha ")#
Castilla.La.Mancha.sig<- subset(neolithic.bio$Sigma, neolithic.bio$Region=="Castilla La Mancha ")#
Castilla.La.Mancha.intcal <- rep("intcal13", length(Castilla.La.Mancha.14C))#
Castilla.La.Mancha.names <- rep("Castilla La Mancha ", length(Castilla.La.Mancha.14C))#
Castilla.La.Mancha.sites<- subset(neolithic.bio$Site, neolithic.bio$Region=="Castilla La Mancha ")#
Castilla.La.Mancha.site.count <- length(unique(Castilla.La.Mancha.sites))#
#
Madrid.14C <- subset(neolithic.bio$CYrBPunc, neolithic.bio$Region=="Madrid")#
Madrid.sig<- subset(neolithic.bio$Sigma, neolithic.bio$Region=="Madrid")#
Madrid.intcal <- rep("intcal13", length(Madrid.14C))#
Madrid.names <- rep("Madrid", length(Madrid.14C))#
Madrid.sites<- subset(neolithic.bio$Site, neolithic.bio$Region=="Madrid")#
Madrid.site.count <- length(unique(Madrid.sites))#
#
Andalucia.Occidental.14C <- subset(neolithic.bio$CYrBPunc, neolithic.bio$Region=="Andalucia Occidental")#
Andalucia.Occidental.sig<- subset(neolithic.bio$Sigma, neolithic.bio$Region=="Andalucia Occidental")#
Andalucia.Occidental.intcal <- rep("intcal13", length(Andalucia.Occidental.14C))#
Andalucia.Occidental.names <- rep("Andalucia Occidental", length(Andalucia.Occidental.14C))#
Andalucia.Occidental.sites<- subset(neolithic.bio$Site, neolithic.bio$Region=="Andalucia Occidental")#
Andalucia.Occidental.site.count <- length(unique(Andalucia.Occidental.sites))#
#
La.Rioja.14C <- subset(neolithic.bio$CYrBPunc, neolithic.bio$Region=="La Rioja")#
La.Rioja.sig<- subset(neolithic.bio$Sigma, neolithic.bio$Region=="La Rioja")#
La.Rioja.intcal <- rep("intcal13", length(La.Rioja.14C))#
La.Rioja.names <- rep("La Rioja", length(La.Rioja.14C))#
La.Rioja.sites<- subset(neolithic.bio$Site, neolithic.bio$Region=="La Rioja")#
La.Rioja.site.count <- length(unique(La.Rioja.sites))#
#
Extremadura.14C <- subset(neolithic.bio$CYrBPunc, neolithic.bio$Region=="Extremadura")#
Extremadura.sig<- subset(neolithic.bio$Sigma, neolithic.bio$Region=="Extremadura")#
Extremadura.intcal <- rep("intcal13", length(Extremadura.14C))#
Extremadura.names <- rep("Extremadura", length(Extremadura.14C))#
Extremadura.sites<- subset(neolithic.bio$Site, neolithic.bio$Region=="Extremadura")#
Extremadura.site.count <- length(unique(Extremadura.sites))#
#
Portugal.Central.14C <- subset(neolithic.bio$CYrBPunc, neolithic.bio$Region=="Portugal Central")#
Portugal.Central.sig<- subset(neolithic.bio$Sigma, neolithic.bio$Region=="Portugal Central")#
Portugal.Central.intcal <- rep("intcal13", length(Portugal.Central.14C))#
Portugal.Central.names <- rep("Portugal Central", length(Portugal.Central.14C))#
Portugal.Central.sites<- subset(neolithic.bio$Site, neolithic.bio$Region=="Portugal Central")#
Portugal.Central.site.count <- length(unique(Portugal.Central.sites))#
#Joined Regions#
Astuarias.Cantabria.14C <- c(Asturias.14C, Cantabria.14C)#
Astuarias.Cantabria.sig <- c(Asturias.sig, Cantabria.sig)#
Astuarias.Cantabria.intcal <- c(Asturias.intcal, Cantabria.intcal)#
Astuarias.Cantabria.names <- c(Asturias.names, Cantabria.names)#
Astuarias.Cantabria.sites <- c(Asturias.sites, Cantabria.sites)#
Astuarias.Cantabria.site.count <- length(unique(Astuarias.Cantabria.sites))#
#
PV.Navara.14C <- c(Pais.Vasco.14C, Navarra.14C)#
PV.Navara.sig <- c(Pais.Vasco.sig, Navarra.sig)#
PV.Navara.intcal <- c(Pais.Vasco.intcal, Navarra.intcal)#
PV.Navara.names <- c(Pais.Vasco.names, Navarra.names)#
PV.Navara.sites <- c(Pais.Vasco.sites, Navarra.sites)#
PV.Navara.site.count <- length(unique(PV.Navara.sites))#
#
CL.LR.14C <- c(Castilla.Leon.14C, La.Rioja.14C)#
CL.LR.sig <- c(Castilla.Leon.sig, La.Rioja.sig)#
CL.LR.intcal <- c(Castilla.Leon.intcal, La.Rioja.intcal)#
CL.LR.names <- c(Castilla.Leon.names, La.Rioja.names)#
CL.LR.sites <- c(Castilla.Leon.sites, La.Rioja.sites)#
CL.LR.site.count <- length(unique(CL.LR.sites))#
#
Madrid.CM.14C <- c(Madrid.14C, Castilla.La.Mancha.14C)#
Madrid.CM.sig <- c(Madrid.sig, Castilla.La.Mancha.sig)#
Madrid.CM.intcal <- c(Madrid.intcal, Castilla.La.Mancha.intcal)#
Madrid.CM.names <- c(Madrid.names, Castilla.La.Mancha.names)#
Madrid.CM.sites <- c(Madrid.sites, Castilla.La.Mancha.sites)#
Madrid.CM.site.count <- length(unique(Madrid.CM.sites))#
#
PM.Murcia.14C <- c(Pais.Valenciano.14C, Murcia.14C)#
PM.Murcia.sig <- c(Pais.Valenciano.sig, Murcia.sig)#
PM.Murcia.intcal <- c(Pais.Valenciano.intcal, Murcia.intcal)#
PM.Murcia.names <- c(Pais.Valenciano.names, Murcia.names)#
PM.Murcia.sites <- c(Pais.Valenciano.sites, Murcia.sites)#
PM.Murcia.site.count <- length(unique(PM.Murcia.sites))#
#####Climate Divisions#
Bsk.bp <- subset(neolithic.bio$CYrBPunc, neolithic.bio$Koppen=="Bsk")#
Csa.bp <- subset(neolithic.bio$CYrBPunc, neolithic.bio$Koppen=="Csa")#
Csb.bp <- subset(neolithic.bio$CYrBPunc, neolithic.bio$Koppen=="Csb")#
Cfa.bp <- subset(neolithic.bio$CYrBPunc, neolithic.bio$Koppen=="Cfa")#
Cfb.bp <- subset(neolithic.bio$CYrBPunc, neolithic.bio$Koppen=="Cfb")#
#
Bsk.sig <- subset(neolithic.bio$Sigma, neolithic.bio$Koppen=="Bsk")#
Csa.sig <- subset(neolithic.bio$Sigma, neolithic.bio$Koppen=="Csa")#
Csb.sig <- subset(neolithic.bio$Sigma, neolithic.bio$Koppen=="Csb")#
Cfa.sig <- subset(neolithic.bio$Sigma, neolithic.bio$Koppen=="Cfa")#
Cfb.sig <- subset(neolithic.bio$Sigma, neolithic.bio$Koppen=="Cfb")#
Bsk.names <- rep("Bsk", length(Bsk.bp))#
Csa.names <- rep("Csa", length(Csa.bp))#
Csb.names <- rep("Csb", length(Csb.bp))#
Cfa.names <- rep("Cfa", length(Cfa.bp))#
Cfb.names <- rep("Cfb", length(Cfb.bp))#
Bsk.description <- rep("Semiarid Steppe", length(Bsk.bp))#
Csa.description <- rep("Hot Mediterranean", length(Csa.bp))#
Csb.description <- rep("Cool Mediterranean", length(Csb.bp))#
Cfa.descritpion <- rep("Hot Subtropical", length(Cfa.bp))#
Cfb.description <- rep("Cool Subtropical", length(Cfb.bp))#
Bsk.sites<- subset(neolithic.bio$Site, neolithic.bio$Koppen=="Bsk")#
Bsk.site.count <- length(unique(Bsk.sites))#
#
Csa.sites<- subset(neolithic.bio$Site, neolithic.bio$Koppen=="Csa")#
Csa.site.count <- length(unique(Csa.sites))#
#
Csb.sites<- subset(neolithic.bio$Site, neolithic.bio$Koppen=="Csb")#
Csb.site.count <- length(unique(Csb.sites))#
#
Cfa.sites<- subset(neolithic.bio$Site, neolithic.bio$Koppen=="Cfa")#
Cfa.site.count <- length(unique(Cfa.sites))#
#
Cfb.sites<- subset(neolithic.bio$Site, neolithic.bio$Koppen=="Cfb")#
Cfb.site.count <- length(unique(Cfb.sites))#
####Environmental#
atlantic.european.14C <- subset(neolithic.bio$CYrBPunc, neolithic.bio$Biogeo_Uni=="Atlantic European")#
atlantic.european.sig<- subset(neolithic.bio$Sigma, neolithic.bio$Biogeo_Uni=="Atlantic European")#
atlantic.european.14C.col <- as.vector(na.omit(subset(neolithic.bio$Collapsed.14C, neolithic.bio$Biogeo_Uni=="Atlantic European")))#
atlantic.european.sig.col <- as.vector(na.omit(subset(neolithic.bio$Collapsed.Sigma, neolithic.bio$Biogeo_Uni=="Atlantic European")))#
atlantic.european.intcal <- rep("intcal13", length(atlantic.european.14C))#
atlantic.european.names <- rep("Atlantic European", length(atlantic.european.14C))#
atlantic.european.sites<- subset(neolithic.bio$Site, neolithic.bio$Biogeo_Uni=="Atlantic European")#
atlantic.european.site.count <- length(unique(atlantic.european.sites))#
#
balearic.14C <- subset(neolithic.bio$CYrBPunc, neolithic.bio$Biogeo_Uni=="Balearic-Catalonian-Provençal")#
balearic.sig<- subset(neolithic.bio$Sigma, neolithic.bio$Biogeo_Uni=="Balearic-Catalonian-Provençal")#
balearic.14C.col <- as.vector(na.omit(subset(neolithic.bio$Collapsed.14C, neolithic.bio$Biogeo_Uni=="Balearic-Catalonian-Provençal")))#
balearic.sig.col <- as.vector(na.omit(subset(neolithic.bio$Collapsed.Sigma, neolithic.bio$Biogeo_Uni=="Balearic-Catalonian-Provençal")))#
balearic.intcal <- rep("intcal13", length(balearic.14C))#
balearic.names <- rep("Balearic-Catalonian-Provençal", length(balearic.14C))#
balearic.sites<- subset(neolithic.bio$Site, neolithic.bio$Biogeo_Uni=="Balearic-Catalonian-Provençal")#
balearic.site.count <- length(unique(balearic.sites))#
#
betican.14C <- subset(neolithic.bio$CYrBPunc, neolithic.bio$Biogeo_Uni=="Betican")#
betican.sig<- subset(neolithic.bio$Sigma, neolithic.bio$Biogeo_Uni=="Betican")#
betican.14C.col <- as.vector(na.omit(subset(neolithic.bio$Collapsed.14C, neolithic.bio$Biogeo_Uni=="Betican")))#
betican.sig.col <- as.vector(na.omit(subset(neolithic.bio$Collapsed.Sigma, neolithic.bio$Biogeo_Uni=="Betican")))#
betican.intcal <- rep("intcal13", length(betican.14C))#
betican.names <- rep("Betican", length(betican.14C))#
betican.sites<- subset(neolithic.bio$Site, neolithic.bio$Biogeo_Uni=="Betican")#
betican.site.count <- length(unique(betican.sites))#
#
cevenno.pyrenean.14C <- subset(neolithic.bio$CYrBPunc, neolithic.bio$Biogeo_Uni=="Cevenno-Pyrenean")#
cevenno.pyrenean.sig<- subset(neolithic.bio$Sigma, neolithic.bio$Biogeo_Uni=="Cevenno-Pyrenean")#
cevenno.pyrenean.14C.col <- as.vector(na.omit(subset(neolithic.bio$Collapsed.14C, neolithic.bio$Biogeo_Uni=="Cevenno-Pyrenean")))#
cevenno.pyrenean.sig.col <- as.vector(na.omit(subset(neolithic.bio$Collapsed.Sigma, neolithic.bio$Biogeo_Uni=="Cevenno-Pyrenean")))#
cevenno.pyrenean.intcal <- rep("intcal13", length(cevenno.pyrenean.14C))#
cevenno.pyrenean.names <- rep("Cevenno-Pyrenean", length(cevenno.pyrenean.14C))#
cevenno.pyrenean.sites<- subset(neolithic.bio$Site, neolithic.bio$Biogeo_Uni=="Cevenno-Pyrenean")#
cevenno.pyrenean.site.count <- length(unique(cevenno.pyrenean.sites))#
#
lusitano.andalusian.14C <- subset(neolithic.bio$CYrBPunc, neolithic.bio$Biogeo_Uni=="Coastal Lusitano-Andalusian")#
lusitano.andalusian.sig<- subset(neolithic.bio$Sigma, neolithic.bio$Biogeo_Uni=="Coastal Lusitano-Andalusian")#
lusitano.andalusian.14C.col <- as.vector(na.omit(subset(neolithic.bio$Collapsed.14C, neolithic.bio$Biogeo_Uni=="Coastal Lusitano-Andalusian")))#
lusitano.andalusian.sig.col <- as.vector(na.omit(subset(neolithic.bio$Collapsed.Sigma, neolithic.bio$Biogeo_Uni=="Coastal Lusitano-Andalusian")))#
lusitano.andalusian.intcal <- rep("intcal13", length(lusitano.andalusian.14C))#
lusitano.andalusian.names <- rep("Coastal Lusitano-Andalusian", length(lusitano.andalusian.14C))#
lusitano.andalusian.sites<- subset(neolithic.bio$Site, neolithic.bio$Biogeo_Uni=="Coastal Lusitano-Andalusian")#
lusitano.andalusian.site.count <- length(unique(lusitano.andalusian.sites))#
#
mediterranean.inner.14C <- subset(neolithic.bio$CYrBPunc, neolithic.bio$Biogeo_Uni=="Mediterranean Central Iberia")#
mediterranean.inner.sig<- subset(neolithic.bio$Sigma, neolithic.bio$Biogeo_Uni=="Mediterranean Central Iberia")#
mediterranean.inner.14C.col <- as.vector(na.omit(subset(neolithic.bio$Collapsed.14C, neolithic.bio$Biogeo_Uni=="Mediterranean Central Iberia")))#
mediterranean.inner.sig.col <- as.vector(na.omit(subset(neolithic.bio$Collapsed.Sigma, neolithic.bio$Biogeo_Uni=="Mediterranean Central Iberia")))#
mediterranean.inner.intcal <- rep("intcal13", length(mediterranean.inner.14C))#
mediterranean.inner.names <- rep("Mediterranean Central Iberia", length(mediterranean.inner.14C))#
mediterranean.inner.sites<- subset(neolithic.bio$Site, neolithic.bio$Biogeo_Uni=="Mediterranean Central Iberia")#
mediterranean.inner.site.count <- length(unique(mediterranean.inner.sites))#
#
mediterranean.west.14C <- subset(neolithic.bio$CYrBPunc, neolithic.bio$Biogeo_Uni=="Mediterranean West Iberian")#
mediterranean.west.sig<- subset(neolithic.bio$Sigma, neolithic.bio$Biogeo_Uni=="Mediterranean West Iberian")#
mediterranean.west.14C.col <- as.vector(na.omit(subset(neolithic.bio$Collapsed.14C, neolithic.bio$Biogeo_Uni=="Mediterranean West Iberian")))#
mediterranean.west.sig.col <- as.vector(na.omit(subset(neolithic.bio$Collapsed.Sigma, neolithic.bio$Biogeo_Uni=="Mediterranean West Iberian")))#
mediterranean.west.intcal <- rep("intcal13", length(mediterranean.west.14C))#
mediterranean.west.names <- rep("Mediterranean West Iberian", length(mediterranean.west.14C))#
mediterranean.west.sites<- subset(neolithic.bio$Site, neolithic.bio$Biogeo_Uni=="Mediterranean West Iberian")#
mediterranean.west.site.count <- length(unique(mediterranean.west.sites))#
#
murcian.14C <- subset(neolithic.bio$CYrBPunc, neolithic.bio$Biogeo_Uni=="Murcian-Almerian")#
murcian.sig<- subset(neolithic.bio$Sigma, neolithic.bio$Biogeo_Uni=="Murcian-Almerian")#
murcian.14C.col <- as.vector(na.omit(subset(neolithic.bio$Collapsed.14C, neolithic.bio$Biogeo_Uni=="Murcian-Almerian")))#
murcian.sig.col <- as.vector(na.omit(subset(neolithic.bio$Collapsed.Sigma, neolithic.bio$Biogeo_Uni=="Murcian-Almerian")))#
murcian.intcal <- rep("intcal13", length(murcian.14C))#
murcian.names <- rep("Murcian-Almerian", length(murcian.14C))#
murcian.sites<- subset(neolithic.bio$Site, neolithic.bio$Biogeo_Uni=="Murcian-Almerian")#
murcian.site.count <- length(unique(murcian.sites))#
####################################################
#######Calibration & Confidence Band Function#######
####################################################
#
mcpblapply <- function (X, FUN, ..., mc.preschedule = TRUE, mc.set.seed = TRUE,#
mc.silent = FALSE, mc.cores = getOption("mc.cores", 2L),#
mc.cleanup = TRUE, mc.allow.recursive = TRUE, USE.NAMES = TRUE, simplify = TRUE)#
{#
    FUN <- match.fun(FUN)#
    if (!is.vector(X) || is.object(X))#
    X <- as.list(X)#
    B <- length(X)#
    if (!(interactive() && dopb() && B >= 1))#
    return(mclapply(X, FUN, ...#
    ))#
    pb <- startpb(0, B)#
    rval <- vector("list", B)#
    for (i in 1:B) {#
        rval[i] <- list(FUN(X[[i]], ...))#
        setpb(pb, i)#
    }#
    close(pb)#
    names(rval) <- names(X)#
    rval#
}#
#
mcpbsapply <- function (X, FUN, ..., mc.preschedule = TRUE, mc.set.seed = TRUE,#
mc.silent = FALSE, mc.cores = getOption("mc.cores", 2L),#
mc.cleanup = TRUE, mc.allow.recursive = TRUE, USE.NAMES = TRUE, simplify = TRUE)#
{#
    FUN <- match.fun(FUN)#
    answer <- mcpblapply(X = X, FUN = FUN,  ..., USE.NAMES = TRUE)#
    if (USE.NAMES && is.character(X) && is.null(names(answer)))#
    names(answer) <- X#
    if (!identical(simplify, FALSE) && length(answer))#
    simplify2array(answer, higher = (simplify == "array"))#
    else answer#
}#
mcreplicate <- function(n, expr, simplify = "array", mc.cores = getOption("mc.cores", 2L)) {#
#
mcpbsapply(integer(n), eval.parent(substitute(function(...) expr)), mc.cores = getOption("mc.cores", 2L),#
simplify = simplify)#
#
}#
#
collapse.dates <- function(sites, dates, sigma) {#
    n.t <- rep(100, length(sites))#
    df <- data.frame(sites, dates, sigma)#
    colnames(df) <- c("Sites", "Date", "Sigma")#
    df <- arrange(df, desc(Date))#
    df <- arrange(df, desc(Sites))#
    df$Ttest <- c(#
    (abs(df[1:(nrow(df)-1),2]-df[2:nrow(df), 2]))/((sqrt(df[2:nrow(df), 3]^2 + df[1:(nrow(df)-1),3]^2)*sqrt(1/100))), NA)#
    df$pvalue <- c((2*pt(df[1:nrow(df),4], 100, lower=FALSE)))#
    df$Collapse <- rep("No", length(sites))#
    df <- transform(df, Collapse = ifelse(pvalue > 0.05, "Yes", Collapse))#
    df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
    return(df)#
    }#
conf.loess <- function(x, sigma, n, reps, xmin, xmax) { #
samp.intcal <- rep("intcal13", length(x))#
samp.slugdens <- BchronCalibrate(x, sigma, samp.intcal)#
samp.ages <- ldply(samp.slugdens, data.frame)#
res.by <- by(samp.ages$ageGrid, samp.ages$.id, median) #
res.t <- t(res.by)#
samp.age.grid <- c(samp.ages$ageGrid, xmin, xmax)#
time <- seq(xmin+5, xmax-5, 10)#
samp.grid <- sort(samp.age.grid, decreasing=TRUE)#
samp.grid <- samp.grid[samp.grid < xmax & samp.grid > xmin]#
samp.hist <- hist(samp.grid, breaks=length(time))#
samp.hist <- data.frame(time, samp.hist$counts, samp.hist$counts/sum(samp.hist$counts))#
colnames(samp.hist) <- c("Age", "Counts", "Density")#
#samp.hist <- arrange(samp.all, desc(Age))#
#
makeloess <- function(x, n){#
time <- seq(xmin+5, xmax-5, 10)#
samp.age <- sample(x, size=n, replace=TRUE)#
samp.dist <- sapply(1:n, function(x) rnorm(500, samp.age, 85))#
samp.dist <- as.vector(samp.dist)#
samp.dist <- c(xmax, xmin, samp.dist)#
samp.date <- tapply(samp.dist, cut(samp.dist, length(time)), length)#
samp.loess <- lowess(time, samp.date, f=0.15)#
samp.fitted <- samp.loess$y#
return(samp.fitted)#
}#
#
samp.replicate <- (replicate(reps, makeloess(res.t, n)))#
samp.replicate <- as.data.frame(samp.replicate)#
samp.replicate[is.na(samp.replicate)] <- 0#
samp.replicate <- sweep(samp.replicate,2,colSums(samp.replicate),`/`)#
#
samp.results.replicate <- transform(samp.replicate, MEAN=apply(samp.replicate,1, mean, na.rm = TRUE))#
samp.results.replicate <- transform(samp.results.replicate, SD=apply(samp.results.replicate,1, sd, na.rm = TRUE))#
#
samp.descriptive <- data.frame(time, samp.results.replicate$MEAN, samp.results.replicate$SD)#
colnames(samp.descriptive) <- c("Age", "Mean", "SD")#
#samp.descriptive <- arrange(samp.descriptive, desc(Age))#
samp.all <- data.frame(time, samp.hist$Density, samp.hist$Counts, samp.descriptive$Mean, samp.descriptive$SD, samp.replicate)#
names(samp.all)[names(samp.all)=="time"] <- "Age"#
names(samp.all)[names(samp.all)=="samp.descriptive.Mean"] <- "Mean"#
names(samp.all)[names(samp.all)=="samp.descriptive.SD"] <- "SD"#
names(samp.all)[names(samp.all)=="samp.hist.Density"] <- "Density"#
names(samp.all)[names(samp.all)=="samp.hist.Counts"] <- "Counts"#
samp.all <- arrange(samp.all, desc(Age))#
return(samp.all)#
}#
######Function to Generate Confidence Bands around SCDRD#
conf.cal.loess.old <- function(x, sigma, n, reps, xmin, xmax) {#
    samp.intcal <- rep("intcal13", length(x))#
    samp.slugdens <- BchronCalibrate(x, sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    res.by <- by(samp.ages$ageGrid, samp.ages$.id, median)#
    res.t <- t(res.by)#
    fill <- seq(xmin, xmax, 1)#
    samp.age.grid <- c(samp.ages$ageGrid, fill)#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.grid <- sort(samp.age.grid, decreasing=TRUE)#
    samp.grid <- samp.grid[samp.grid < xmax & samp.grid > xmin]#
    samp.hist <- hist(samp.grid, breaks=length(time))#
    samp.hist <- data.frame(time, samp.hist$counts, samp.hist$counts/sum(samp.hist$counts))#
    colnames(samp.hist) <- c("Age", "Counts", "Density")#
    #samp.hist <- arrange(samp.all, desc(Age))#
    makeloess <- function(x, n){#
        time <- seq(xmin+5, xmax-5, 10)#
        samp.14C <- sample(x, size=n, replace=TRUE)#
        samp.sig <- sample(sigma, size=n, replace=TRUE)#
        samp.dist.n <- BchronCalibrate(samp.14C, samp.sig, rep("intcal13", n))#
        temp.ages <- ldply(samp.dist.n, data.frame)#
        temp.age.grid <- c(temp.ages$ageGrid, fill)#
        temp.grid <- temp.age.grid[temp.age.grid < xmax & samp.grid > xmin]#
        samp.dist <- c(fill, temp.grid)#
        samp.dist <- as.vector(samp.dist)#
        samp.dist <- c(xmax, xmin, samp.dist)#
        samp.date <- tapply(samp.dist, cut(samp.dist, length(time)), length)#
        samp.loess <- lowess(time, samp.date, f=0.15)#
        samp.fitted <- samp.loess$y#
        return(samp.fitted)#
    }#
    samp.replicate <- (pbreplicate(reps, makeloess(x, n)))#
    samp.replicate <- as.data.frame(samp.replicate)#
    samp.replicate[is.na(samp.replicate)] <- 0#
    samp.replicate <- sweep(samp.replicate,2,colSums(samp.replicate),`/`)#
    samp.results.replicate <- transform(samp.replicate, MEAN=apply(samp.replicate,1, mean, na.rm = TRUE))#
    samp.results.replicate <- transform(samp.results.replicate, SD=apply(samp.results.replicate,1, sd, na.rm = TRUE))#
    samp.descriptive <- data.frame(time, samp.results.replicate$MEAN, samp.results.replicate$SD)#
    colnames(samp.descriptive) <- c("Age", "Mean", "SD")#
    #samp.descriptive <- arrange(samp.descriptive, desc(Age))#
    samp.all <- data.frame(time, samp.hist$Density, samp.hist$Counts, samp.descriptive$Mean, samp.descriptive$SD, samp.replicate)#
    names(samp.all)[names(samp.all)=="time"] <- "Age"#
    names(samp.all)[names(samp.all)=="samp.descriptive.Mean"] <- "Mean"#
    names(samp.all)[names(samp.all)=="samp.descriptive.SD"] <- "SD"#
    names(samp.all)[names(samp.all)=="samp.hist.Density"] <- "Density"#
    names(samp.all)[names(samp.all)=="samp.hist.Counts"] <- "Counts"#
    samp.all <- arrange(samp.all, desc(Age))#
    return(samp.all)#
}#
#
conf.cal.loess <- function(dates, sigma, n, reps, sites, xmin, xmax, ..., cores = getOption("mc.cores", 2L), collapse.dates=FALSE) {#
    collapse.the.dates <- function(sites, dates, sigma) {#
        n.t <- rep(100, length(sites))#
        df <- data.frame(sites, dates, sigma)#
        colnames(df) <- c("Sites", "Date", "Sigma")#
        df <- arrange(df, desc(Date))#
        df <- arrange(df, desc(Sites))#
        df$Ttest <- c(#
        (abs(df[1:(nrow(df)-1),2]-df[2:nrow(df), 2]))/((sqrt(df[2:nrow(df), 3]^2 + df[1:(nrow(df)-1),3]^2)*sqrt(1/100))), NA)#
        df$pvalue <- c((2*pt(df[1:nrow(df),4], 100, lower=FALSE)))#
        df$Collapse <- rep("No", length(sites))#
        df <- transform(df, Collapse = ifelse(pvalue > 0.05, "Yes", Collapse))#
        df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
        df <- as.data.frame(df)#
        df <- df[complete.cases(df),]#
        return(df)#
    }#
    uncollapse.the.dates <- function(sites, dates, sigma) {#
        df <- data.frame(sites, dates, sigma)#
        colnames(df) <- c("Sites", "Date", "Sigma")#
        return(df)#
    }#
    date.data <- if(isTRUE(collapse.dates)){#
        collapse.the.dates(sites, dates, sigma)#
    } else {#
        uncollapse.the.dates(sites, dates, sigma)#
    }#
    samp.intcal <- rep("intcal13", length(date.data$Date))#
    samp.slugdens <- BchronCalibrate(date.data$Date, date.data$Sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    res.by <- by(samp.ages$ageGrid, samp.ages$.id, median)#
    res.t <- t(res.by)#
    fill <- seq(xmin, xmax, 1)#
    samp.age.grid <- c(samp.ages$ageGrid, fill)#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.grid <- sort(samp.age.grid, decreasing=TRUE)#
    samp.grid <- samp.grid[samp.grid < xmax & samp.grid > xmin]#
    samp.hist <- hist(samp.grid, breaks=length(time))#
    samp.hist <- data.frame(time, samp.hist$counts, samp.hist$counts/sum(samp.hist$counts))#
    colnames(samp.hist) <- c("Age", "Counts", "Density")#
    #samp.hist <- arrange(samp.all, desc(Age))#
    makeloess <- function(dates, n){#
        time <- seq(xmin+5, xmax-5, 10)#
        n.s <- length(dates)#
        samp.order <- sample(n.s, size=n, replace=TRUE)#
        samp.dist.n <- samp.slugdens[samp.order]#
        temp.ages <- ldply(samp.dist.n, data.frame)#
        temp.age.grid <- c(temp.ages$ageGrid, fill)#
        temp.grid <- temp.age.grid[temp.age.grid < xmax & samp.grid > xmin]#
        samp.dist <- c(fill, temp.grid)#
        samp.dist <- as.vector(samp.dist)#
        samp.dist <- c(xmax, xmin, samp.dist)#
        samp.date <- tapply(samp.dist, cut(samp.dist, length(time)), length)#
        samp.loess <- lowess(time, samp.date, f=0.15)#
        samp.fitted <- samp.loess$y#
        return(samp.fitted)#
    }#
    samp.replicate <- (mcreplicate(reps, makeloess(dates, n)))#
    samp.replicate.dat <- as.data.frame(samp.replicate)#
    samp.replicate.dat[is.na(samp.replicate.dat)] <- 0#
    samp.replicated <- sweep(samp.replicate.dat,2,colSums(samp.replicate.dat),`/`)#
    samp.results.replicated.m <- transform(samp.replicated, MEAN=apply(X=samp.replicated, MARGIN=1, FUN=mean, na.rm = TRUE))#
    samp.results.replicated.s <- transform(samp.replicated, SD=apply(X=samp.replicated, MARGIN=1, FUN=sd, na.rm = TRUE))#
    samp.descriptive <- data.frame(time, samp.results.replicated.m$MEAN, samp.results.replicated.s$SD)#
    colnames(samp.descriptive) <- c("Age", "Mean", "SD")#
    #samp.descriptive <- arrange(samp.descriptive, desc(Age))#
    samp.all <- data.frame(time, samp.hist$Density, samp.hist$Counts, samp.descriptive$Mean, samp.descriptive$SD)#
    names(samp.all)[names(samp.all)=="time"] <- "Age"#
    names(samp.all)[names(samp.all)=="samp.descriptive.Mean"] <- "Mean"#
    names(samp.all)[names(samp.all)=="samp.descriptive.SD"] <- "SD"#
    names(samp.all)[names(samp.all)=="samp.hist.Density"] <- "Density"#
    names(samp.all)[names(samp.all)=="samp.hist.Counts"] <- "Counts"#
    samp.all <- arrange(samp.all, desc(Age))#
    return(samp.all)#
}#
#
BchronDensityCollapse <- function (dates, sigma, sites,  dfs = rep(100, length(dates)), numMix = 30,#
iterations = 10000, burn = 2000, thin = 8, updateAges = FALSE, collapse.dates=FALSE)#
{#
    collapse.the.dates <- function(sites, dates, sigma) {#
        n.t <- rep(100, length(sites))#
        df <- data.frame(sites, dates, sigma)#
        colnames(df) <- c("Sites", "Date", "Sigma")#
        df <- arrange(df, desc(Date))#
        df <- arrange(df, desc(Sites))#
        df$Ttest <- c(#
        (abs(df[1:(nrow(df)-1),2]-df[2:nrow(df), 2]))/((sqrt(df[2:nrow(df), 3]^2 + df[1:(nrow(df)-1),3]^2)*sqrt(1/100))), NA)#
        df$pvalue <- c((2*pt(df[1:nrow(df),4], 100, lower=FALSE)))#
        df$Collapse <- rep("No", length(sites))#
        df <- transform(df, Collapse = ifelse(pvalue > 0.05, "Yes", Collapse))#
        df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
        return(df)#
    }#
    uncollapse.the.dates <- function(sites, dates, sigma) {#
        df <- data.frame(sites, dates, sigma)#
        colnames(df) <- c("Sites", "Date", "Sigma")#
        return(df)#
    }#
    date.data <- if(isTRUE(collapse.dates)){#
        collapse.the.dates(sites, dates, sigma)#
    } else {#
        uncollapse.the.dates(sites, dates, sigma)#
    }#
    pathToCalCurves = system.file("data",#
    package = "Bchron")#
    calCurves <- rep("intcal13", length(date.data$Date))#
    ages <- date.data$Date#
    ageSds <- date.data$Sigma#
    if (length(ages) != length(ageSds))#
    stop("ages and 1-sigma errors must be same length")#
    if (length(ages) != length(calCurves))#
    stop("ages and Calibration curves must be same length")#
    x = BchronCalibrate(ages = ages, ageSds = ageSds, calCurves = calCurves,#
    pathToCalCurves = pathToCalCurves, eps = 0, dfs = rep(100,#
    length(ages)))#
    xSmall = BchronCalibrate(ages = ages, ageSds = ageSds, calCurves = calCurves,#
    pathToCalCurves = pathToCalCurves, dfs = rep(100, length(ages)))#
    n = length(x)#
    thetaRange = range(xSmall[[1]]$ageGrid)#
    for (i in 2:n) thetaRange = range(c(thetaRange, xSmall[[i]]$ageGrid))#
    offset = vector(length = n)#
    for (i in 1:n) {#
        offset[i] = ifelse(x[[i]]$calCurve == "normal", 61, 0)#
    }#
    gauss <- function(x, mu, sig) {#
        u <- (x - mu)/sig#
        y <- exp(-u * u/2)#
        y#
    }#
    gbase <- function(x, mus) {#
        sig <- (mus[2] - mus[1])/2#
        G <- outer(x, mus, gauss, sig)#
        G#
    }#
    clrInv = function(phi) {#
        return(exp(phi)/sum(exp(phi)))#
    }#
    J = numMix#
    mu = seq(thetaRange[1], thetaRange[2], length = numMix)#
    theta = vector(length = n)#
    for (j in 1:n) theta[j] = round(stats::rnorm(1, mean = x[[j]]$ageGrid[match(max(x[[j]]$densities),#
    x[[j]]$densities)], sd = ageSds[j]), 3)#
    phi = c(stats::runif(J - 1, -10, 10), 0)#
    p = as.numeric(clrInv(phi))#
    G = gbase(theta, mu)#
    remaining = (iterations - burn)/thin#
    thetaStore = matrix(ncol = length(theta), nrow = remaining)#
    pStore = matrix(ncol = J, nrow = remaining)#
    thetaAll = matrix(NA, ncol = n, nrow = iterations)#
    for (j in 1:n) thetaAll[, j] = sample(xSmall[[j]]$ageGrid,#
    size = iterations, prob = xSmall[[j]]$densities, replace = TRUE)#
    mu2 = mu#
    sigma2 = (mu[2] - mu[1])/2#
    my_dnorm = function(x) stats::dnorm(x, mean = mu2, sd = sigma2)#
    pb = utils::txtProgressBar(min = 1, max = iterations, style = 3,#
    width = 60, title = "Running BchronDensity")#
    for (i in 1:iterations) {#
        utils::setTxtProgressBar(pb, i)#
        if (i > burn & i%%thin == 0) {#
            ind = (i - burn)/thin#
            thetaStore[ind, ] = theta#
            pStore[ind, ] = p#
        }#
        if (updateAges) {#
            for (j in 1:n) {#
                thetaNew = round(stats::rnorm(1, theta[j], 0.5),#
                3)#
                thetaNewMatch = as.integer(thetaNew + offset[j]) +#
                1#
                thetaNewLogDens = max(log(x[[j]]$densities[thetaNewMatch]),#
                -1e+06)#
                priorNew.dens = sum(p * stats::dnorm(thetaNew,#
                mean = mu2, sd = sigma2))#
                thetaMatch = as.integer(theta[j] + offset[j]) +#
                1#
                thetaLogDens = max(log(x[[j]]$densities[thetaMatch]),#
                -1e+06)#
                priorDens = sum(p * stats::dnorm(theta[j], mean = mu2,#
                sd = sigma2))#
                logRtheta = thetaNewLogDens - thetaLogDens +#
                log(priorNew.dens) - log(priorDens)#
                if (stats::runif(1) < exp(logRtheta))#
                theta[j] = thetaNew#
            }#
        }#
        else {#
            theta = thetaAll[i, ]#
        }#
        for (j in 1:(J - 1)) {#
            phiNew = stats::rnorm(1, phi[j], 1)#
            phiAllNew = phi#
            phiAllNew[j] = phiNew#
            pNew = as.numeric(clrInv(phiAllNew))#
            phiNewLogDens = sum(log(G %*% pNew))#
            phiLogDens = sum(log(G %*% p))#
            logRphi = phiNewLogDens - phiLogDens + stats::dunif(phiNew,#
            -10, 10, log = TRUE) - stats::dunif(phi[j], -10,#
            10, log = TRUE)#
            if (stats::runif(1) < exp(logRphi)) {#
                phi[j] = phiNew#
                p = as.numeric(clrInv(phi))#
            }#
        }#
    }#
    output = list(theta = thetaStore, p = pStore, mu = mu, calAges = xSmall,#
    G = G)#
    class(output) = "BchronDensityRun"#
    return(output)#
}#
#
#####Function to modify existing SCDPD from BchronDensity (modified from Bchron)#
SlugDens.t <- function (x, xmin, xmax)#
{#
    n = length(x$calAges)#
    thetaRange = range(x$calAges[[1]]$ageGrid)#
    for (i in 2:n) thetaRange = range(c(thetaRange, x$calAges[[i]]$ageGrid))#
    dateGrid = seq(xmin, xmax, length = 1000)#
    gauss <- function(x, mu, sig) {#
        u <- (x - mu)/sig#
        y <- exp(-u * u/2)#
        y#
    }#
    gbase <- function(x, mus) {#
        sig <- (mus[2] - mus[1])/2#
        G <- outer(x, mus, gauss, sig)#
        G#
    }#
    Gstar = gbase(dateGrid, x$mu)#
    dens = vector(length = length(dateGrid))#
    for (i in 1:nrow(x$p)) {#
        dens = dens + Gstar %*% x$p[i, ]#
    }#
    densFinal = dens/sum(dens)#
    slugbase <- data.frame(dateGrid,densFinal)#
    colnames(slugbase) <- c("Age", "Density")#
    slugbase <- arrange(slugbase, desc(Age))#
    return(slugbase)#
}#
#
SlugSig <- function(x, sigma, n, reps, xmin, xmax) {#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.intcal <- rep("intcal13", length(x))#
    samp.slugdens <- BchronDensity(x, sigma, samp.intcal, numMix = 30, iterations=10000, burn=2000, thin=8, updateAges=FALSE)#
    samp.hist <- SlugDens.t(samp.slugdens, xmin, xmax)#
    makeloess <- function(x, n){#
        time <- seq(xmin+5, xmax-5, 10)#
        samp.14C <- sample(x, size=n, replace=TRUE)#
        samp.sig <- sample(sigma, size=n, replace=TRUE)#
        samp.dist.n <- BchronDensity(samp.14C, samp.sig, rep("intcal13", n), numMix = 30, iterations=10000, burn=2000, thin=8, updateAges=FALSE)#
          samp.dist <- SlugDens.t(samp.dist.n, xmin, xmax)#
        samp.loess <- lowess(samp.dist$Age, samp.dist$Density, f=0.15)#
        samp.fitted <- samp.loess$y#
        return(samp.fitted)#
    }#
    samp.replicate <- (pbreplicate(reps, makeloess(x, n)))#
    samp.replicate <- as.data.frame(samp.replicate)#
    samp.replicate[is.na(samp.replicate)] <- 0#
    samp.replicate <- sweep(samp.replicate,2,colSums(samp.replicate),`/`)#
    samp.results.replicate <- transform(samp.replicate, MEAN=apply(samp.replicate,1, mean, na.rm = TRUE))#
    samp.results.replicate <- transform(samp.results.replicate, SD=apply(samp.results.replicate,1, sd, na.rm = TRUE))#
    samp.descriptive <- data.frame(samp.hist$Age, samp.results.replicate$MEAN, samp.results.replicate$SD)#
    colnames(samp.descriptive) <- c("Age", "Mean", "SD")#
    #samp.descriptive <- arrange(samp.descriptive, desc(Age))#
    samp.all <- data.frame(samp.hist$Age, samp.hist$Density, samp.descriptive$Mean, samp.descriptive$SD, samp.replicate)#
    names(samp.all)[names(samp.all)=="samp.hist.Age"] <- "Age"#
    names(samp.all)[names(samp.all)=="samp.descriptive.Mean"] <- "Mean"#
    names(samp.all)[names(samp.all)=="samp.descriptive.SD"] <- "SD"#
    names(samp.all)[names(samp.all)=="samp.hist.Density"] <- "Density"#
    samp.all <- arrange(samp.all, desc(Age))#
    return(samp.all)#
}
#packrat::init("~/Dropbox/4.2 ky event/Data Analysis/R Code/For Distribution/Neolithic")#
#
#Compatibility#
if(.Platform$OS.type=="windows") {#
  quartz<-function() windows()#
}#
#
###Load Packages#
library(TTR)#
library(ggplot2)#
library(gridExtra)#
library(scales)#
library(gtable)#
library(wq)#
library(Bchron)#
library(plyr)#
library(bcp)#
#library(mgcv)#
library(reshape2)#
library(pbapply)#
library(xlsx)#
library(data.table)#
library(dplyr)#
library(akima)#
library(ggmap)#
library(ggthemes)#
library(rgdal)#
library(sp)#
library(rgeos)#
library(maptools)#
library(PBSmapping)#
library(raster)#
####################################################
#######Calibration & Confidence Band Function#######
####################################################
#####Collapse Dates#
collapse.the.dates.begin <- function(sites, biogeo, general, dates, sigma) {#
    date.frame <- data.frame(sites, biogeo, general, dates, sigma)#
    names(date.frame) <- c("Site", "Biogeo_Uni", "St_Area_NE", "CYrBPunc", "Sigma")#
    date.frame <- date.frame[complete.cases(date.frame),]#
    date.sub <- subset(date.frame, (xmin-500) < Date & Date < (xmax + 500))#
    n.t <- rep(100, length(date.sub$Site))#
    df <- data.frame(date.frame$Site, date.frame$Biogeo_Uni, general, dates, sigma)#
    colnames(df) <- c("Site", "Biogeo_Uni", "St_Area_NE", "CYrBPunc", "Sigma")#
    df <- arrange(df, desc(CYrBPunc))#
    df <- arrange(df, desc(Site))#
    df <- arrange(df, desc(Biogeo_Uni))#
    df <- arrange(df, desc(St_Area_NE))#
    df$Ttest <- c(#
    (abs(df[1:(nrow(df)-1),4]-df[2:nrow(df), 4]))/((sqrt(df[2:nrow(df), 5]^2 + df[1:(nrow(df)-1),5]^2)*sqrt(1/100))), NA)#
    df$pvalue <- c((2*pt(df[1:nrow(df),6], 100, lower=FALSE)))#
    df$Collapse <- rep("No", length(sites))#
    df <- transform(df, Collapse = ifelse(pvalue > 0.05, "Yes", Collapse))#
    df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
    df <- as.data.frame(df)#
    df <- df[complete.cases(df),]#
    return(df)#
}#
####Function to organize plots in a window#
layOut = function(...) {#
    require(grid)#
    x <- list(...)#
    n <- max(sapply(x, function(x) max(x[[2]])))#
    p <- max(sapply(x, function(x) max(x[[3]])))#
    pushViewport(viewport(layout = grid.layout(n, p)))#
    for (i in seq_len(length(x))) {#
        print(x[[i]][[1]], vp = viewport(layout.pos.row = x[[i]][[2]],#
        layout.pos.col = x[[i]][[3]]))#
    }#
}#
#
####Function to maintain significant digits in plot#
fmt <- function(){#
    function(x) format(x,nsmall = 4,scientific = FALSE)#
}#
####################################################
#######Calibration & Confidence Band Function#######
####################################################
#
###Multicore apply function with status bar#
mcpblapply <- function (X, FUN, ..., mc.preschedule = TRUE, mc.set.seed = TRUE,#
mc.silent = FALSE, mc.cores = getOption("mc.cores", 2L),#
mc.cleanup = TRUE, mc.allow.recursive = TRUE, USE.NAMES = TRUE, simplify = TRUE)#
{#
    FUN <- match.fun(FUN)#
    if (!is.vector(X) || is.object(X))#
    X <- as.list(X)#
    B <- length(X)#
    if (!(interactive() && dopb() && B >= 1))#
    return(mclapply(X, FUN, ...#
    ))#
    pb <- startpb(0, B)#
    rval <- vector("list", B)#
    for (i in 1:B) {#
        rval[i] <- list(FUN(X[[i]], ...))#
        setpb(pb, i)#
    }#
    close(pb)#
    names(rval) <- names(X)#
    rval#
}#
#
mcpbsapply <- function (X, FUN, ..., mc.preschedule = TRUE, mc.set.seed = TRUE,#
mc.silent = FALSE, mc.cores = getOption("mc.cores", 2L),#
mc.cleanup = TRUE, mc.allow.recursive = TRUE, USE.NAMES = TRUE, simplify = TRUE)#
{#
    FUN <- match.fun(FUN)#
    answer <- mcpblapply(X = X, FUN = FUN,  ..., USE.NAMES = TRUE)#
    if (USE.NAMES && is.character(X) && is.null(names(answer)))#
    names(answer) <- X#
    if (!identical(simplify, FALSE) && length(answer))#
    simplify2array(answer, higher = (simplify == "array"))#
    else answer#
}#
#
mcreplicate <- function(n, expr, simplify = "array", mc.cores = getOption("mc.cores", 2L)) {#
    mcpbsapply(integer(n), eval.parent(substitute(function(...) expr)), mc.cores = getOption("mc.cores", 2L),#
    simplify = simplify)#
}#
conf.loess <- function(x, sigma, n, reps, xmin, xmax) {#
    samp.intcal <- rep("intcal13", length(x))#
    samp.slugdens <- BchronCalibrate(x, sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    res.by <- by(samp.ages$ageGrid, samp.ages$.id, median)#
    res.t <- t(res.by)#
    samp.age.grid <- c(samp.ages$ageGrid, xmin, xmax)#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.grid <- sort(samp.age.grid, decreasing=TRUE)#
    samp.grid <- samp.grid[samp.grid < xmax & samp.grid > xmin]#
    samp.hist <- hist(samp.grid, breaks=length(time))#
    samp.hist <- data.frame(time, samp.hist$counts, samp.hist$counts/sum(samp.hist$counts))#
    colnames(samp.hist) <- c("Age", "Counts", "Density")#
    #samp.hist <- arrange(samp.all, desc(Age))#
    makeloess <- function(x, n){#
        time <- seq(xmin+5, xmax-5, 10)#
        samp.age <- sample(x, size=n, replace=TRUE)#
        samp.dist <- sapply(1:n, function(x) rnorm(500, samp.age, 85))#
        samp.dist <- as.vector(samp.dist)#
        samp.dist <- c(xmax, xmin, samp.dist)#
        samp.date <- tapply(samp.dist, cut(samp.dist, length(time)), length)#
        samp.loess <- lowess(time, samp.date, f=0.15)#
        samp.fitted <- samp.loess$y#
        return(samp.fitted)#
    }#
    samp.replicate <- (replicate(reps, makeloess(res.t, n)))#
    samp.replicate <- as.data.frame(samp.replicate)#
    samp.replicate[is.na(samp.replicate)] <- 0#
    samp.replicate <- sweep(samp.replicate,2,colSums(samp.replicate),`/`)#
    samp.results.replicate <- transform(samp.replicate, MEAN=apply(samp.replicate,1, mean, na.rm = TRUE))#
    samp.results.replicate <- transform(samp.results.replicate, SD=apply(samp.results.replicate,1, sd, na.rm = TRUE))#
    samp.descriptive <- data.frame(time, samp.results.replicate$MEAN, samp.results.replicate$SD)#
    colnames(samp.descriptive) <- c("Age", "Mean", "SD")#
    #samp.descriptive <- arrange(samp.descriptive, desc(Age))#
    samp.all <- data.frame(time, samp.hist$Density, samp.hist$Counts, samp.descriptive$Mean, samp.descriptive$SD, samp.replicate)#
    names(samp.all)[names(samp.all)=="time"] <- "Age"#
    names(samp.all)[names(samp.all)=="samp.descriptive.Mean"] <- "Mean"#
    names(samp.all)[names(samp.all)=="samp.descriptive.SD"] <- "SD"#
    names(samp.all)[names(samp.all)=="samp.hist.Density"] <- "Density"#
    names(samp.all)[names(samp.all)=="samp.hist.Counts"] <- "Counts"#
    samp.all <- arrange(samp.all, desc(Age))#
    return(samp.all)#
}#
#
########
stack.14C <- function(x, sigma, xmin, xmax){#
    samp.intcal <- rep("intcal13", length(x))#
    samp.slugdens <- BchronCalibrate(x, sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    fill <- seq(xmin, xmax, 1)#
    samp.age.grid <- c(samp.ages$ageGrid, fill)#
    samp.grid <- sort(samp.age.grid, decreasing=TRUE)#
    samp.grid <- samp.grid[samp.grid < xmax & samp.grid > xmin]#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.hist <- hist(samp.grid, breaks=length(time))#
    samp.hist <- data.frame(time, samp.hist$counts, samp.hist$counts/sum(samp.hist$counts))#
    colnames(samp.hist) <- c("Age", "Counts", "Density")#
    return(samp.hist)#
}#
median.stack.14C <- function(x, sigma, xmin, xmax){#
    samp.intcal <- rep("intcal13", length(x))#
    samp.slugdens <- BchronCalibrate(x, sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.median <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, median))#
    medians.all <-as.vector(samp.median[,1])#
    n <- length(medians.all)#
    medians <- medians.all[medians.all < xmax & medians.all > xmin]#
    return(medians)#
}#
######Function to Generate Confidence Bands around SCDRD#
conf.cal.loess <- function(dates, sigma, n, reps, sites, xmin, xmax, ..., cores = getOption("mc.cores", 2L), collapse.dates=FALSE) {#
    collapse.the.dates <- function(sites, dates, sigma) {#
        n.t <- rep(100, length(sites))#
        df <- data.frame(sites, dates, sigma)#
        colnames(df) <- c("Sites", "Date", "Sigma")#
        df <- arrange(df, desc(Date))#
        df <- arrange(df, desc(Sites))#
        df$Ttest <- c(#
        (abs(df[1:(nrow(df)-1),2]-df[2:nrow(df), 2]))/((sqrt(df[2:nrow(df), 3]^2 + df[1:(nrow(df)-1),3]^2)*sqrt(1/100))), NA)#
        df$pvalue <- c((2*pt(df[1:nrow(df),4], 100, lower=FALSE)))#
        df$Collapse <- rep("No", length(sites))#
        df <- transform(df, Collapse = ifelse(pvalue > 0.05, "Yes", Collapse))#
        df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
        df <- as.data.frame(df)#
        df <- df[complete.cases(df),]#
        return(df)#
    }#
    uncollapse.the.dates <- function(sites, dates, sigma) {#
        df <- data.frame(sites, dates, sigma)#
        colnames(df) <- c("Sites", "Date", "Sigma")#
        return(df)#
    }#
    date.data <- if(isTRUE(collapse.dates)){#
        collapse.the.dates(sites, dates, sigma)#
    } else {#
        uncollapse.the.dates(sites, dates, sigma)#
    }#
    samp.intcal <- rep("intcal13", length(date.data$Date))#
    samp.slugdens <- BchronCalibrate(date.data$Date, date.data$Sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    res.by <- by(samp.ages$ageGrid, samp.ages$.id, median)#
    res.t <- t(res.by)#
    fill <- seq(xmin, xmax, 1)#
    samp.age.grid <- c(samp.ages$ageGrid, fill)#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.grid <- sort(samp.age.grid, decreasing=TRUE)#
    samp.grid <- samp.grid[samp.grid < xmax & samp.grid > xmin]#
    samp.hist <- hist(samp.grid, breaks=length(time))#
    samp.hist <- data.frame(time, samp.hist$counts, samp.hist$counts/sum(samp.hist$counts))#
    colnames(samp.hist) <- c("Age", "Counts", "Density")#
    #samp.hist <- arrange(samp.all, desc(Age))#
    makeloess <- function(dates, n){#
        time <- seq(xmin+5, xmax-5, 10)#
        n.s <- length(dates)#
        samp.order <- sample(n.s, size=n, replace=TRUE)#
        samp.dist.n <- samp.slugdens[samp.order]#
        temp.ages <- ldply(samp.dist.n, data.frame)#
        temp.age.grid <- c(temp.ages$ageGrid, fill)#
        temp.grid <- temp.age.grid[temp.age.grid < xmax & samp.grid > xmin]#
        samp.dist <- c(fill, temp.grid)#
        samp.dist <- as.vector(samp.dist)#
        samp.dist <- c(xmax, xmin, samp.dist)#
        samp.date <- tapply(samp.dist, cut(samp.dist, length(time)), length)#
        samp.loess <- lowess(time, samp.date, f=0.15)#
        samp.fitted <- samp.loess$y#
        return(samp.fitted)#
    }#
    samp.replicate <- (mcreplicate(reps, makeloess(dates, n)))#
    samp.replicate.dat <- as.data.frame(samp.replicate)#
    samp.replicate.dat[is.na(samp.replicate.dat)] <- 0#
    samp.replicated <- sweep(samp.replicate.dat,2,colSums(samp.replicate.dat),`/`)#
    samp.results.replicated.m <- transform(samp.replicated, MEAN=apply(X=samp.replicated, MARGIN=1, FUN=mean, na.rm = TRUE))#
    samp.results.replicated.s <- transform(samp.replicated, SD=apply(X=samp.replicated, MARGIN=1, FUN=sd, na.rm = TRUE))#
    samp.descriptive <- data.frame(time, samp.results.replicated.m$MEAN, samp.results.replicated.s$SD)#
    colnames(samp.descriptive) <- c("Age", "Mean", "SD")#
    #samp.descriptive <- arrange(samp.descriptive, desc(Age))#
    samp.all <- data.frame(time, samp.hist$Density, samp.hist$Counts, samp.descriptive$Mean, samp.descriptive$SD)#
    names(samp.all)[names(samp.all)=="time"] <- "Age"#
    names(samp.all)[names(samp.all)=="samp.descriptive.Mean"] <- "Mean"#
    names(samp.all)[names(samp.all)=="samp.descriptive.SD"] <- "SD"#
    names(samp.all)[names(samp.all)=="samp.hist.Density"] <- "Density"#
    names(samp.all)[names(samp.all)=="samp.hist.Counts"] <- "Counts"#
    samp.all <- arrange(samp.all, desc(Age))#
    return(samp.all)#
}#
#
###Traditional SCDPD#
BchronDensityCollapse <- function (dates, sigma, sites,  dfs = rep(100, length(dates)), numMix = 30,#
iterations = 10000, burn = 2000, thin = 8, updateAges = FALSE, collapse.dates=FALSE)#
{#
    collapse.the.dates <- function(sites, dates, sigma) {#
        n.t <- rep(100, length(sites))#
        df <- data.frame(sites, dates, sigma)#
        colnames(df) <- c("Sites", "Date", "Sigma")#
        df <- arrange(df, desc(Date))#
        df <- arrange(df, desc(Sites))#
        df$Ttest <- c(#
        (abs(df[1:(nrow(df)-1),2]-df[2:nrow(df), 2]))/((sqrt(df[2:nrow(df), 3]^2 + df[1:(nrow(df)-1),3]^2)*sqrt(1/100))), NA)#
        df$pvalue <- c((2*pt(df[1:nrow(df),4], 100, lower=FALSE)))#
        df$Collapse <- rep("No", length(sites))#
        df <- transform(df, Collapse = ifelse(pvalue > 0.05, "Yes", Collapse))#
        df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
        return(df)#
    }#
    uncollapse.the.dates <- function(sites, dates, sigma) {#
        df <- data.frame(sites, dates, sigma)#
        colnames(df) <- c("Sites", "Date", "Sigma")#
        return(df)#
    }#
    date.data <- if(isTRUE(collapse.dates)){#
        collapse.the.dates(sites, dates, sigma)#
    } else {#
        uncollapse.the.dates(sites, dates, sigma)#
    }#
    pathToCalCurves = system.file("data",#
    package = "Bchron")#
    calCurves <- rep("intcal13", length(date.data$Date))#
    ages <- date.data$Date#
    ageSds <- date.data$Sigma#
    if (length(ages) != length(ageSds))#
    stop("ages and 1-sigma errors must be same length")#
    if (length(ages) != length(calCurves))#
    stop("ages and Calibration curves must be same length")#
    x = BchronCalibrate(ages = ages, ageSds = ageSds, calCurves = calCurves,#
    pathToCalCurves = pathToCalCurves, eps = 0, dfs = rep(100,#
    length(ages)))#
    xSmall = BchronCalibrate(ages = ages, ageSds = ageSds, calCurves = calCurves,#
    pathToCalCurves = pathToCalCurves, dfs = rep(100, length(ages)))#
    n = length(x)#
    thetaRange = range(xSmall[[1]]$ageGrid)#
    for (i in 2:n) thetaRange = range(c(thetaRange, xSmall[[i]]$ageGrid))#
    offset = vector(length = n)#
    for (i in 1:n) {#
        offset[i] = ifelse(x[[i]]$calCurve == "normal", 61, 0)#
    }#
    gauss <- function(x, mu, sig) {#
        u <- (x - mu)/sig#
        y <- exp(-u * u/2)#
        y#
    }#
    gbase <- function(x, mus) {#
        sig <- (mus[2] - mus[1])/2#
        G <- outer(x, mus, gauss, sig)#
        G#
    }#
    clrInv = function(phi) {#
        return(exp(phi)/sum(exp(phi)))#
    }#
    J = numMix#
    mu = seq(thetaRange[1], thetaRange[2], length = numMix)#
    theta = vector(length = n)#
    for (j in 1:n) theta[j] = round(stats::rnorm(1, mean = x[[j]]$ageGrid[match(max(x[[j]]$densities),#
    x[[j]]$densities)], sd = ageSds[j]), 3)#
    phi = c(stats::runif(J - 1, -10, 10), 0)#
    p = as.numeric(clrInv(phi))#
    G = gbase(theta, mu)#
    remaining = (iterations - burn)/thin#
    thetaStore = matrix(ncol = length(theta), nrow = remaining)#
    pStore = matrix(ncol = J, nrow = remaining)#
    thetaAll = matrix(NA, ncol = n, nrow = iterations)#
    for (j in 1:n) thetaAll[, j] = sample(xSmall[[j]]$ageGrid,#
    size = iterations, prob = xSmall[[j]]$densities, replace = TRUE)#
    mu2 = mu#
    sigma2 = (mu[2] - mu[1])/2#
    my_dnorm = function(x) stats::dnorm(x, mean = mu2, sd = sigma2)#
    pb = utils::txtProgressBar(min = 1, max = iterations, style = 3,#
    width = 60, title = "Running BchronDensity")#
    for (i in 1:iterations) {#
        utils::setTxtProgressBar(pb, i)#
        if (i > burn & i%%thin == 0) {#
            ind = (i - burn)/thin#
            thetaStore[ind, ] = theta#
            pStore[ind, ] = p#
        }#
        if (updateAges) {#
            for (j in 1:n) {#
                thetaNew = round(stats::rnorm(1, theta[j], 0.5),#
                3)#
                thetaNewMatch = as.integer(thetaNew + offset[j]) +#
                1#
                thetaNewLogDens = max(log(x[[j]]$densities[thetaNewMatch]),#
                -1e+06)#
                priorNew.dens = sum(p * stats::dnorm(thetaNew,#
                mean = mu2, sd = sigma2))#
                thetaMatch = as.integer(theta[j] + offset[j]) +#
                1#
                thetaLogDens = max(log(x[[j]]$densities[thetaMatch]),#
                -1e+06)#
                priorDens = sum(p * stats::dnorm(theta[j], mean = mu2,#
                sd = sigma2))#
                logRtheta = thetaNewLogDens - thetaLogDens +#
                log(priorNew.dens) - log(priorDens)#
                if (stats::runif(1) < exp(logRtheta))#
                theta[j] = thetaNew#
            }#
        }#
        else {#
            theta = thetaAll[i, ]#
        }#
        for (j in 1:(J - 1)) {#
            phiNew = stats::rnorm(1, phi[j], 1)#
            phiAllNew = phi#
            phiAllNew[j] = phiNew#
            pNew = as.numeric(clrInv(phiAllNew))#
            phiNewLogDens = sum(log(G %*% pNew))#
            phiLogDens = sum(log(G %*% p))#
            logRphi = phiNewLogDens - phiLogDens + stats::dunif(phiNew,#
            -10, 10, log = TRUE) - stats::dunif(phi[j], -10,#
            10, log = TRUE)#
            if (stats::runif(1) < exp(logRphi)) {#
                phi[j] = phiNew#
                p = as.numeric(clrInv(phi))#
            }#
        }#
    }#
    output = list(theta = thetaStore, p = pStore, mu = mu, calAges = xSmall,#
    G = G)#
    class(output) = "BchronDensityRun"#
    return(output)#
}#
#
###Function to modify existing SCDPD from BchronDensity (modified from Bchron)#
SlugDens.t <- function (x, xmin, xmax)#
{#
    n = length(x$calAges)#
    thetaRange = range(x$calAges[[1]]$ageGrid)#
    for (i in 2:n) thetaRange = range(c(thetaRange, x$calAges[[i]]$ageGrid))#
    dateGrid = seq(xmin, xmax, length = 1000)#
    gauss <- function(x, mu, sig) {#
        u <- (x - mu)/sig#
        y <- exp(-u * u/2)#
        y#
    }#
    gbase <- function(x, mus) {#
        sig <- (mus[2] - mus[1])/2#
        G <- outer(x, mus, gauss, sig)#
        G#
    }#
    Gstar = gbase(dateGrid, x$mu)#
    dens = vector(length = length(dateGrid))#
    for (i in 1:nrow(x$p)) {#
        dens = dens + Gstar %*% x$p[i, ]#
    }#
    densFinal = dens/sum(dens)#
    slugbase <- data.frame(dateGrid,densFinal)#
    colnames(slugbase) <- c("Age", "Density")#
    slugbase <- arrange(slugbase, desc(Age))#
    return(slugbase)#
}#
#
SlugSig <- function(x, sigma, n, reps, xmin, xmax) {#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.intcal <- rep("intcal13", length(x))#
    samp.slugdens <- BchronDensity(x, sigma, samp.intcal, numMix = 30, iterations=10000, burn=2000, thin=8, updateAges=FALSE)#
    samp.hist <- SlugDens.t(samp.slugdens, xmin, xmax)#
    makeloess <- function(x, n){#
        time <- seq(xmin+5, xmax-5, 10)#
        samp.14C <- sample(x, size=n, replace=TRUE)#
        samp.sig <- sample(sigma, size=n, replace=TRUE)#
        samp.dist.n <- BchronDensity(samp.14C, samp.sig, rep("intcal13", n), numMix = 30, iterations=10000, burn=2000, thin=8, updateAges=FALSE)#
        samp.dist <- SlugDens.t(samp.dist.n, xmin, xmax)#
        samp.loess <- lowess(samp.dist$Age, samp.dist$Density, f=0.15)#
        samp.fitted <- samp.loess$y#
        return(samp.fitted)#
    }#
    samp.replicate <- (pbreplicate(reps, makeloess(x, n)))#
    samp.replicate <- as.data.frame(samp.replicate)#
    samp.replicate[is.na(samp.replicate)] <- 0#
    samp.replicate <- sweep(samp.replicate,2,colSums(samp.replicate),`/`)#
    samp.results.replicate <- transform(samp.replicate, MEAN=apply(samp.replicate,1, mean, na.rm = TRUE))#
    samp.results.replicate <- transform(samp.results.replicate, SD=apply(samp.results.replicate,1, sd, na.rm = TRUE))#
    samp.descriptive <- data.frame(samp.hist$Age, samp.results.replicate$MEAN, samp.results.replicate$SD)#
    colnames(samp.descriptive) <- c("Age", "Mean", "SD")#
    #samp.descriptive <- arrange(samp.descriptive, desc(Age))#
    samp.all <- data.frame(samp.hist$Age, samp.hist$Density, samp.descriptive$Mean, samp.descriptive$SD, samp.replicate)#
    names(samp.all)[names(samp.all)=="samp.hist.Age"] <- "Age"#
    names(samp.all)[names(samp.all)=="samp.descriptive.Mean"] <- "Mean"#
    names(samp.all)[names(samp.all)=="samp.descriptive.SD"] <- "SD"#
    names(samp.all)[names(samp.all)=="samp.hist.Density"] <- "Density"#
    samp.all <- arrange(samp.all, desc(Age))#
    return(samp.all)#
}#
####Function to maintain significant digits in plot#
fmt <- function(){#
    function(x) format(x,nsmall = 4,scientific = FALSE)#
}#
site.median <- function(sites, region, dates, sigma) {#
    n.t <- rep(100, length(sites))#
    df <- data.frame(sites, region, dates, sigma)#
    colnames(df) <- c("Site", "Region", "X14C.year", "Sigma")#
    df <- arrange(df, desc(X14C.year))#
    df <- arrange(df, desc(Region))#
    df <- arrange(df, desc(Site))#
       df$Collapse <- rep("No", length(sites))#
    df <- transform(df, Collapse = ifelse(df[nrow(df)] > 0.05, "Yes", Collapse))#
    df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
    df <- as.data.frame(df)#
    df <- df[complete.cases(df),]#
    return(df)#
}#
site.time <- function(sites, dates, sigma, xmin, xmax, time) {#
    df <- data.frame(sites, dates, sigma)#
    colnames(df) <- c("Site",  "X14C.year", "Sigma")#
    df <- arrange(df, desc(X14C.year))#
    df <- arrange(df, desc(Site))#
    site.frame <- aggregate(x=df$X14C.year, by=list(df$Site), FUN=mean)#
    site.vector <- site.frame$x#
    site.frame.sig <- aggregate(x=df$Sigma, by=list(df$Site), FUN=mean)#
    site.vector.sig <- site.frame.sig$x#
    samp.intcal <- rep("intcal13", length(site.vector))#
    samp.slugdens <- BchronCalibrate(site.vector, site.vector.sig, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.median <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, median))#
    medians.all <-as.vector(samp.median[,1])#
    medians <- medians.all[medians.all < xmax & medians.all > xmin]#
    median.simple <- round((medians/100000), digits=2)*100000#
    median.table <- table(median.simple)#
    median.values <- as.numeric(paste(median.table))#
    median.frame <- data.frame(t(median.values))#
    colnames(median.frame) <- names(median.table)#
    median.t <- data.frame(t(median.frame))#
    median.df <- data.frame(add_rownames(median.t, "VALUE"))#
    colnames(median.df) <- c("Millenium", "Site")#
    median.df <- median.df[with(median.df, order(as.numeric(Millenium))), ]#
    null <- rep(0, length(time))#
    null.frame <- t(data.frame(null))#
    colnames(null.frame) <- time#
    null.t <- data.frame(t(null.frame))#
    null.df <- data.frame(add_rownames(null.t, "VALUE"))#
    colnames(null.df) <- c("Millenium", "Site")#
    all.frame <- merge(null.df, median.df, all=TRUE, by="Millenium")#
    all.frame[is.na(all.frame)] <- 0#
    all.frame <- all.frame[with(all.frame, order(as.numeric(Millenium))), ]#
    the.result <- data.frame(all.frame$Millenium, all.frame$Site.y)#
    colnames(the.result) <- c("Millenium", "Sites")#
    scaled <- as.vector(apply(data.frame(the.result$Sites), 2, function(x) scale(x)))#
    scaled.mean <- mean(scaled)#
    scaled.sd <- sd(scaled)#
    the.result$z.score <- (scaled-scaled.mean)/scaled.sd#
    the.result$p.value <- pnorm(the.result$z.score, lower.tail=FALSE)#
    return(format(the.result, digits=2))#
#
}#
median.stack.14C <- function(dates, sigma, sites, xmin, xmax, time){#
    samp.intcal <- rep("intcal13", length(dates))#
    samp.slugdens <- BchronCalibrate(dates, sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.median <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, median))#
    medians.all <-as.vector(samp.median[,1])#
    medians <- medians.all[medians.all < xmax & medians.all > xmin]#
    median.simple <- round((medians/100000), digits=2)*100000#
    median.table <- table(median.simple)#
    median.values <- as.numeric(paste(median.table))#
    median.frame <- data.frame(t(median.values))#
    colnames(median.frame) <- names(median.table)#
    median.t <- data.frame(t(median.frame))#
    median.df <- data.frame(add_rownames(median.t, "VALUE"))#
    colnames(median.df) <- c("Millenium", "Site")#
    median.df <- median.df[with(median.df, order(as.numeric(Millenium))), ]#
    null <- rep(0, length(time))#
    null.frame <- t(data.frame(null))#
    colnames(null.frame) <- time#
    null.t <- data.frame(t(null.frame))#
    null.df <- data.frame(add_rownames(null.t, "VALUE"))#
    colnames(null.df) <- c("Millenium", "Site")#
    all.frame <- merge(null.df, median.df, all=TRUE, by="Millenium")#
    all.frame[is.na(all.frame)] <- 0#
    all.frame <- all.frame[with(all.frame, order(as.numeric(Millenium))), ]#
    the.result <- data.frame(all.frame$Millenium, all.frame$Site.y)#
    colnames(the.result) <- c("Millenium", "Sites")#
#
    scaled <- as.vector(apply(data.frame(the.result$Sites), 2, function(x) scale(x)))#
    scaled.mean <- mean(scaled)#
    scaled.sd <- sd(scaled)#
    the.result$z.score <- (scaled-scaled.mean)/scaled.sd#
    the.result$p.value <- pnorm(the.result$z.score, lower.tail=FALSE)#
    return(format(the.result, digits=2))#
}#
site.time.half <- function(sites, dates, sigma, xmin, xmax, time) {#
    df <- data.frame(sites, dates, sigma)#
    colnames(df) <- c("Site",  "X14C.year", "Sigma")#
    df <- arrange(df, desc(X14C.year))#
    df <- arrange(df, desc(Site))#
    site.frame <- aggregate(x=df$X14C.year, by=list(df$Site), FUN=mean)#
    site.vector <- site.frame$x#
    site.frame.sig <- aggregate(x=df$Sigma, by=list(df$Site), FUN=mean)#
    site.vector.sig <- site.frame.sig$x#
    samp.intcal <- rep("intcal13", length(site.vector))#
    samp.slugdens <- BchronCalibrate(site.vector, site.vector.sig, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.median <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, median))#
    medians.all <-as.vector(samp.median[,1])#
    medians <- medians.all[medians.all < xmax & medians.all > xmin]#
    return(medians)#
}#
median.stack.14C.half <- function(x, sigma, sites, xmin, xmax){#
    samp.intcal <- rep("intcal13", length(x))#
    samp.slugdens <- BchronCalibrate(x, sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.median <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, median))#
    medians.all <-as.vector(samp.median[,1])#
    medians <- medians.all[medians.all < xmax & medians.all > xmin]#
    return(medians)#
}#
stack.14C.4D <- function(date, sigma, xmin, xmax, lat, long){#
    date.frame <- data.frame(date, sigma, lat, long)#
    names(date.frame) <- c("Date", "Sigma", "Lat", "Long")#
    date.sub <- subset(date.frame, xmin < Date & Date < xmax)#
    ids.cus = paste("Date", 1:length(date.sub$Date), sep = "")#
    coord.sub <- data.frame(ids.cus, date.sub$Lat, date.sub$Long)#
    names(coord.sub) <- c(".id", "Lat", "Long")#
    samp.intcal <- rep("intcal13", length(date.sub$Date))#
    samp.slugdens <- BchronCalibrate(date.sub$Date, date.sub$Sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.ages.dt <- data.table(samp.ages)#
    coord.sub.dt <- data.table(coord.sub)#
    samp.coord <- merge(samp.ages, coord.sub, by.x=".id", by.y=".id")#
    return(samp.coord)#
}#
mapGenPoint <- function(map, date, sigma, xmin, xmax, lat, long, interval, x.res, y.res) {#
    calibrated.date.frame <- stack.14C.4D(date=date, sigma=sigma, xmin=xmin, xmax=xmax, lat=lat, long=long)#
    date.interval <- seq(from=xmin, to=xmax, by=interval)#
    date.interval <- rev(date.interval)#
    date.list <- pbapply::pblapply(date.interval, function(x) subset(calibrated.date.frame, calibrated.date.frame$ageGrid > x & calibrated.date.frame$ageGrid < x+interval))#
    animation::ani.options(convert="/usr/local/bin/convert")#
    animation::saveVideo(expr=for (i in seq_along(date.interval)) {#
        num.f <- formatC(seq(xmin, xmax, interval), width=5, format="d", flag="0")#
        num <- rev(num.f)#
        #num <- formatC(seq(1, length(date.interval), 1), width=6, format="d", flag="0")#
        plots <- ggmap(map, alpha=0.2) +#
        geom_point(data=data.frame(date.list[i]), aes(x=Long, y=Lat), colour="red", alpha=0.05, size=7, shape=15)+#
        coord_equal() +#
        scale_y_continuous("Latitude", limits = c(35, 46)) +#
        scale_x_continuous("Longitude", limits = c(-10, 5)) +#
        coord_map() +#
        theme_tufte() +#
        ggtitle(paste(date.interval[i], " cal BP", sep="")) +#
        guides(size=FALSE, colour=FALSE, alpha=FALSE, shape=FALSE)#
        ggsave(plots, filename=paste("map",num[i], ".png", sep=""))#
    }, video.name="iberia.mp4", img.name="map")#
    #ffmpeg -f image2 -i map%06d.png -vcodec mjpeg -q:v 0 -r 25 iberia.avi#
}#
#
mapGenPointDual <- function(map, human.date, megafauna.date, human.sigma, megafauna.sigma, xmin, xmax, human.lat, human.long, megafauna.lat, megafauna.long, interval, x.res, y.res) {#
    human.calibrated.date.frame <- stack.14C.4D(date=human.date, sigma=human.sigma, xmin=xmin, xmax=xmax, lat=human.lat, long=human.long)#
    human.calibrated.date.frame$Legend <- rep("Human", length(human.calibrated.date.frame$ageGrid))#
    megafauna.calibrated.date.frame <- stack.14C.4D(date=megafauna.date, sigma=megafauna.sigma, xmin=xmin, xmax=xmax, lat=megafauna.lat, long=megafauna.long)#
    megafauna.calibrated.date.frame$Legend <- rep("Megafauna", length(megafauna.calibrated.date.frame$ageGrid))#
    all.ageGrid <- c(human.calibrated.date.frame$ageGrid,megafauna.calibrated.date.frame$ageGrid)#
    all.lat <- c(human.calibrated.date.frame$Lat,megafauna.calibrated.date.frame$Lat)#
    all.long <- c(human.calibrated.date.frame$Long,megafauna.calibrated.date.frame$Long)#
    all.legend <- c(human.calibrated.date.frame$Legend,megafauna.calibrated.date.frame$Legend)#
    calibrated.date.frame <- data.frame(all.ageGrid,all.lat,all.long,all.legend)#
    colnames(calibrated.date.frame) <- c("ageGrid", "Lat", "Long", "Legend")#
    date.interval <- seq(from=xmin, to=xmax, by=interval)#
    date.interval <- rev(date.interval)#
    date.list <- pbapply::pblapply(date.interval, function(x) subset(calibrated.date.frame, calibrated.date.frame$ageGrid > x & calibrated.date.frame$ageGrid < x+interval))#
    animation::ani.options(convert="/usr/local/bin/convert")#
    animation::saveVideo(expr=for (i in seq_along(date.interval)) {#
        #num.f <- formatC(seq(xmin, xmax, interval), width=5, format="d", flag="0")#
        #num <- rev(num.f)#
        num <- formatC(seq(1, length(date.interval), 1), width=6, format="d", flag="0")#
        plots <- ggmap(map, alpha=0.2) +#
        geom_point(data=data.frame(date.list[i]), aes(x=Long, y=Lat, colour=Legend), alpha=0.2, size=4, shape=15)+#
        coord_equal() +#
        coord_map() +#
        theme_tufte() +#
        ggtitle(paste(date.interval[i], " cal BP", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE)#
        ggsave(plots, filename=paste("map",num[i], ".png", sep=""))#
    }, video.name="iberia.mp4", img.name="map")#
    #ffmpeg -f image2 -i map%06d.png -vcodec mjpeg -q:v 0 -r 25 iberia.avi#
}#
collapse.the.dates.begin <- function(sites, region, dates, sigma, lat, long, taxa, xmin, xmax) {#
    date.frame <- data.frame(sites, region, dates, sigma, lat, long, taxa)#
    names(date.frame) <- c("Sites", "Region", "Date", "Sigma", "Lat", "Long", "Taxa")#
    date.frame <- date.frame[complete.cases(date.frame),]#
    date.sub <- subset(date.frame, (xmin-500) < Date & Date < (xmax + 500))#
    n.t <- rep(100, length(sites))#
    df <- data.frame(date.sub$Sites, date.sub$Region, date.sub$Date, date.sub$Sigma, date.sub$Lat, date.sub$Long, date.sub$Taxa)#
    colnames(df) <- c("Site", "Region", "X14C.year", "Sigma", "Lat", "Long", "Taxa")#
    df <- arrange(df, desc(X14C.year))#
    df <- arrange(df, desc(Site))#
    df <- arrange(df, desc(Region))#
    df$Ttest <- c(#
    (abs(df[1:(nrow(df)-1),3]-df[2:nrow(df), 3]))/((sqrt(df[2:nrow(df), 4]^2 + df[1:(nrow(df)-1),4]^2)*sqrt(1/100))), NA)#
    df$pvalue <- c((2*pt(df[1:nrow(df),8], 100, lower=FALSE)))#
    df$Collapse <- rep("No", length(df$Site))#
    df <- transform(df, Collapse = ifelse(pvalue > 0.05, "Yes", Collapse))#
    df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
    df <- as.data.frame(df)#
    df <- df[complete.cases(df),]#
    return(df)#
}#
dateScrub <- function(dataframe, age.min, age.max) {#
    dataframe$point <- 0#
    dataframe$point[findInterval(dataframe$Age, c(age.min,age.max)) == 1L] <- 1#
    return(dataframe)#
}#
#
dateScrubVector <- function(dataframe, interval) {#
    date.interval <- seq(from=mind(dataframe$Age, to=dataframe$Age, by=interval)#
    date.interval <- rev(date.interval)#
    date.min <- date.interval-interval/2#
    date.max <- date.interval+interval/2#
    dataframe$point <- 0#
    dataframe$point[findInterval(dataframe$Age, c(date.min,date.max)) == 1L] <- 1#
    return(dataframe)#
}#
###Load Data#
#megafauna.data <- read.csv(file="http://www.bleedrake.com/megafauna/megafauna.csv")#
#human.data <- read.csv(file="http://www.bleedrake.com/megafauna/humansaudited.csv")#
#
megafauna.data <- read.csv(file="~/Dropbox/Documents/SCDPD/Megafauna Database/Megafauna Sigma Purge-Table 1.csv")#
human.data <- read.csv(file="~/Dropbox/Documents/SCDPD/Humans Audited.csv")#
megafauna.data <- collapse.the.dates.begin(sites=megafauna.data$Site, region=megafauna.data$Region, dates=megafauna.data$X14C.year, sigma=megafauna.data$Sigma, lat=megafauna.data$Lat, long=megafauna.data$Long, taxa=megafauna.data$Simple.Taxon, xmin=2000, xmax=40000)#
human.data <- collapse.the.dates.begin(sites=human.data$Site_name, region=human.data$Region, dates=human.data$X14C.year, sigma=human.data$Sigma, lat=human.data$Lat, long=human.data$Long, taxa=rep("Human", length(human.data$Site_name)), xmin=2000, xmax=40000)#
gisp2 <- read.csv(file="http://www.bleedrake.com/megafauna/gisp2.csv")#
epica <- read.csv(file="http://www.bleedrake.com/megafauna/epica.csv")#
#
###Load Calibration Curves#
intcal.13 <- read.csv(file="http://www.bleedrake.com/megafauna/intcal13.csv")#
intcal.13 <- read.csv(file="~/Dropbox/Documents/SCDPD/Data/intcal13.csv")#
########MEGAFAUNA##########
western.megafauna.14C <- subset(megafauna.data$X14C.year, megafauna.data$Region=="Western North America")#
central.megafauna.14C <- subset(megafauna.data$X14C.year, megafauna.data$Region=="Central North America")#
eastern.megafauna.14C <- subset(megafauna.data$X14C.year, megafauna.data$Region=="Eastern North America")#
all.eastern.megafauna.14C <- c(as.numeric(central.megafauna.14C), as.numeric(eastern.megafauna.14C))#
south.america.megafauna.14C <- subset(megafauna.data$X14C.year, megafauna.data$Region=="South America")#
siberia.megafauna.14C <- subset(megafauna.data$X14C.year, megafauna.data$Region=="Siberia")#
east.beringia.megafauna.14C <- subset(megafauna.data$X14C.year, megafauna.data$Region=="East Beringia")#
europe.megafauna.14C <- subset(megafauna.data$X14C.year, megafauna.data$Region=="Europe")#
oceania.megafauna.14C <- subset(megafauna.data$X14C.year, megafauna.data$Region=="Oceania")#
oceania.megafauna.14C <- subset(megafauna.data$X14C.year, megafauna.data$Region=="Oceania")#
africa.megafauna.14C <- subset(megafauna.data$X14C.year, megafauna.data$Region=="Africa")#
western.megafauna.sig<- subset(megafauna.data$Sigma, megafauna.data$Region=="Western North America")#
central.megafauna.sig <- subset(megafauna.data$Sigma, megafauna.data$Region=="Central North America")#
eastern.megafauna.sig <- subset(megafauna.data$Sigma, megafauna.data$Region=="Eastern North America")#
all.eastern.megafauna.sig <- c(central.megafauna.sig, eastern.megafauna.sig)#
south.america.megafauna.sig <- subset(megafauna.data$Sigma, megafauna.data$Region=="South America")#
siberia.megafauna.sig <- subset(megafauna.data$Sigma, megafauna.data$Region=="Siberia")#
east.beringia.megafauna.sig <- subset(megafauna.data$Sigma, megafauna.data$Region=="East Beringia")#
europe.megafauna.sig <- subset(megafauna.data$Sigma, megafauna.data$Region=="Europe")#
oceania.megafauna.sig <- subset(megafauna.data$Sigma, megafauna.data$Region=="Oceania")#
africa.megafauna.sig <- subset(megafauna.data$Sigma, megafauna.data$Region=="Africa")#
western.megafauna.intcal <- rep("intcal13", length(western.megafauna.14C))#
central.megafauna.intcal <- rep("intcal13", length(central.megafauna.14C))#
eastern.megafauna.intcal <- rep("intcal13", length(eastern.megafauna.14C))#
all.eastern.megafauna.intcal <- c(central.megafauna.intcal, eastern.megafauna.intcal)#
south.america.megafauna.intcal <- rep("intcal13", length(south.america.megafauna.14C))#
siberia.megafauna.intcal <- rep("intcal13", length(siberia.megafauna.14C))#
east.beringia.megafauna.intcal <- rep("intcal13", length(east.beringia.megafauna.14C))#
europe.megafauna.intcal <- rep("intcal13", length(europe.megafauna.14C))#
oceania.megafauna.intcal <- rep("intcal13", length(oceania.megafauna.14C))#
africa.megafauna.intcal <- rep("intcal13", length(africa.megafauna.14C))#
western.megafauna.sites<- subset(megafauna.data$Site, megafauna.data$Region=="Western North America")#
central.megafauna.sites <- subset(megafauna.data$Site, megafauna.data$Region=="Central North America")#
eastern.megafauna.sites <- subset(megafauna.data$Site, megafauna.data$Region=="Eastern North America")#
all.eastern.megafauna.sites <- c(as.vector(central.megafauna.sites), as.vector(eastern.megafauna.sites))#
south.america.megafauna.sites <- subset(megafauna.data$Site, megafauna.data$Region=="South America")#
siberia.megafauna.sites <- subset(megafauna.data$Site, megafauna.data$Region=="Siberia")#
east.beringia.megafauna.sites <- subset(megafauna.data$Site, megafauna.data$Region=="East Beringia")#
europe.megafauna.sites <- subset(megafauna.data$Site, megafauna.data$Region=="Europe")#
oceania.megafauna.sites <- subset(megafauna.data$Site, megafauna.data$Region=="Oceania")#
africa.megafauna.sites <- subset(megafauna.data$Site, megafauna.data$Region=="Africa")#
western.megafauna.site.count <- length(unique(western.megafauna.sites))#
eastern.megafauna.site.count <- length(unique(eastern.megafauna.sites))#
central.megafauna.site.count <- length(unique(central.megafauna.sites))#
all.eastern.megafauna.site.count <- eastern.megafauna.site.count + central.megafauna.site.count#
south.america.megafauna.site.count <- length(unique(south.america.megafauna.sites))#
siberia.megafauna.site.count <- length(unique(siberia.megafauna.sites))#
east.beringia.megafauna.site.count <- length(unique(east.beringia.megafauna.sites))#
europe.megafauna.site.count <- length(unique(europe.megafauna.sites))#
oceania.megafauna.site.count <- length(unique(oceania.megafauna.sites))#
africa.megafauna.site.count <- length(unique(africa.megafauna.sites))#
#
western.megafauna.sites<- subset(megafauna.data$Site, megafauna.data$Region=="Western North America")#
central.megafauna.sites <- subset(megafauna.data$Site, megafauna.data$Region=="Central North America")#
eastern.megafauna.sites <- subset(megafauna.data$Site, megafauna.data$Region=="Eastern North America")#
all.eastern.megafauna.sites <- c(central.megafauna.sites, eastern.megafauna.sites)#
south.america.megafauna.sites <- subset(megafauna.data$Site, megafauna.data$Region=="South America")#
siberia.megafauna.sites <- subset(megafauna.data$Site, megafauna.data$Region=="Siberia")#
east.beringia.megafauna.sites <- subset(megafauna.data$Site, megafauna.data$Region=="East Beringia")#
europe.megafauna.sites <- subset(megafauna.data$Site, megafauna.data$Region=="Europe")#
oceania.megafauna.sites <- subset(megafauna.data$Site, megafauna.data$Region=="Oceania")#
africa.megafauna.sites <- subset(megafauna.data$Site, megafauna.data$Region=="Africa")#
western.megafauna.lat<- as.numeric(as.vector(subset(megafauna.data$Lat, megafauna.data$Region=="Western North America")))#
central.megafauna.lat <- as.numeric(as.vector(subset(megafauna.data$Lat, megafauna.data$Region=="Central North America")))#
eastern.megafauna.lat <- as.numeric(as.vector(subset(megafauna.data$Lat, megafauna.data$Region=="Eastern North America")))#
all.eastern.megafauna.lat <- c(as.numeric(as.vector(central.megafauna.lat)), as.numeric(as.vector(eastern.megafauna.lat)))#
south.america.megafauna.lat <- as.numeric(as.vector(subset(megafauna.data$Lat, megafauna.data$Region=="South America")))#
siberia.megafauna.lat <- subset(as.numeric(as.vector(megafauna.data$Lat)), megafauna.data$Region=="Siberia")#
east.beringia.megafauna.lat <- as.numeric(as.vector(subset(megafauna.data$Lat, megafauna.data$Region=="East Beringia")))#
europe.megafauna.lat <- as.numeric(as.vector(subset(megafauna.data$Lat, megafauna.data$Region=="Europe")))#
oceania.megafauna.lat <- as.numeric(as.vector(subset(megafauna.data$Lat, megafauna.data$Region=="Oceania")))#
africa.megafauna.lat <- as.numeric(as.vector(subset(megafauna.data$Lat, megafauna.data$Region=="Africa")))#
western.megafauna.long<- as.numeric(as.vector(subset(megafauna.data$Long, megafauna.data$Region=="Western North America")))#
central.megafauna.long <- as.numeric(as.vector(subset(megafauna.data$Long, megafauna.data$Region=="Central North America")))#
eastern.megafauna.long <- as.numeric(as.vector(subset(megafauna.data$Long, megafauna.data$Region=="Eastern North America")))#
all.eastern.megafauna.long <- c(as.numeric(as.vector(central.megafauna.long)), as.numeric(as.vector(eastern.megafauna.long)))#
south.america.megafauna.long <- as.numeric(as.vector(subset(megafauna.data$Long, megafauna.data$Region=="South America")))#
siberia.megafauna.long <- as.numeric(as.vector(subset(megafauna.data$Long, megafauna.data$Region=="Siberia")))#
east.beringia.megafauna.long <- as.numeric(as.vector(subset(megafauna.data$Long, megafauna.data$Region=="East Beringia")))#
europe.megafauna.long <- as.numeric(as.vector(subset(megafauna.data$Long, megafauna.data$Region=="Europe")))#
oceania.megafauna.long <- as.numeric(as.vector(subset(megafauna.data$Long, megafauna.data$Region=="Oceania")))#
africa.megafauna.long <- as.numeric(as.vector(subset(megafauna.data$Long, megafauna.data$Region=="Africa")))#
#western.megafauna.slugdens <- BchronDensity(western.megafauna.14C, western.megafauna.sig, western.megafauna.intcal, numMix = 30, iterations = 10000, burn = 2000, thin = 8, updateAges = FALSE)#
#central.megafauna.slugdens <- BchronDensity(central.megafauna.14C, central.megafauna.sig, central.megafauna.intcal, numMix = 30, iterations = 10000, burn = 2000, thin = 8, updateAges = FALSE)#
#eastern.megafauna.slugdens <- BchronDensity(eastern.megafauna.14C, eastern.megafauna.sig, eastern.megafauna.intcal, numMix = 30, iterations = 10000, burn = 2000, thin = 8, updateAges = FALSE)#
#all.eastern.megafauna.slugdens <-  BchronDensity(all.eastern.megafauna.14C, all.eastern.megafauna.sig, all.eastern.megafauna.intcal, numMix = 30, iterations = 10000, burn = 2000, thin = 8, updateAges = FALSE)#
#south.america.megafauna.slugdens <- BchronDensity(south.america.megafauna.14C, south.america.megafauna.sig, south.america.megafauna.intcal, numMix = 30, iterations = 10000, burn = 2000, thin = 8, updateAges = FALSE)#
#east.beringia.megafauna.slugdens <- BchronDensity(east.beringia.megafauna.14C, east.beringia.megafauna.sig, east.beringia.megafauna.intcal, numMix = 30, iterations = 10000, burn = 2000, thin = 8, updateAges = FALSE)#
#siberia.megafauna.slugdens <- BchronDensity(siberia.megafauna.14C, siberia.megafauna.sig, siberia.megafauna.intcal, numMix = 30, iterations = 10000, burn = 2000, thin = 8, updateAges = FALSE)#
#europe.megafauna.slugdens <- BchronDensity(europe.megafauna.14C, europe.megafauna.sig, europe.megafauna.intcal, numMix = 30, iterations = 10000, burn = 2000, thin = 8, updateAges = FALSE)#
#
#western.megafauna.slug <- SlugDens.t(western.megafauna.slugdens, xmin=0, xmax=50000)#
#all.eastern.megafauna.slug <- SlugDens.t(all.eastern.megafauna.slugdens, xmin=0, xmax=50000)#
#south.america.megafauna.slug <- SlugDens.t(south.america.megafauna.slugdens, xmin=0, xmax=50000)#
#alaska.megafauna.slug <- SlugDens.t(east.beringia.megafauna.slugdens, xmin=0, xmax=50000)#
#siberia.megafauna.slug <- SlugDens.t(siberia.megafauna.slugdens, xmin=0, xmax=50000)#
#europe.megafauna.slug <- SlugDens.t(europe.megafauna.slugdens, xmin=0, xmax=50000)#
#
#megafauna.slug <- data.frame(western.megafauna.slug$Age, western.megafauna.slug$Density, all.eastern.megafauna.slug$Density, south.america.megafauna.slug$Density, alaska.megafauna.slug$Density, siberia.megafauna.slug$Density, europe.megafauna.slug$Density)#
#colnames(megafauna.slug) <- c("Age", "Western North America", "Eastern North America", "South America", "Alaska", "Siberia", "Europe")#
#megafauna.slug <- arrange(megafauna.slug, desc(Age))#
#
#megafauna.slug.melt <- melt(megafauna.slug, id="Age")#
#
#all.megafauna.density <- qplot(Age, value, data=megafauna.slug.melt, colour=variable, linetype=variable, xlab = "Cal yr BP", ylab = "Density", geom="line") + theme_classic() + theme(legend.title=element_blank())#
#
########HUMANS##########
###Create vectors from data set by region#
#
western.human.14C <- subset(human.data$X14C.year, human.data$Region=="Western North America")#
central.human.14C <- subset(human.data$X14C.year, human.data$Region=="Central North America")#
eastern.human.14C <- subset(human.data$X14C.year, human.data$Region=="Eastern North America")#
all.eastern.human.14C <- c(central.human.14C, eastern.human.14C)#
south.america.human.14C <- subset(human.data$X14C.year, human.data$Region=="South America")#
siberia.human.14C <- subset(human.data$X14C.year, human.data$Region=="Siberia")#
east.beringia.human.14C <- subset(human.data$X14C.year, human.data$Region=="East Beringia")#
europe.human.14C <- subset(human.data$X14C.year, human.data$Region=="Europe")#
oceania.human.14C <- subset(human.data$X14C.year, human.data$Region=="Oceania")#
africa.human.14C <- subset(human.data$X14C.year, human.data$Region=="Africa")#
western.human.sig<- subset(human.data$Sigma, human.data$Region=="Western North America")#
central.human.sig <- subset(human.data$Sigma, human.data$Region=="Central North America")#
eastern.human.sig <- subset(human.data$Sigma, human.data$Region=="Eastern North America")#
all.eastern.human.sig <- c(central.human.sig, eastern.human.sig)#
south.america.human.sig <- subset(human.data$Sigma, human.data$Region=="South America")#
siberia.human.sig <- subset(human.data$Sigma, human.data$Region=="Siberia")#
east.beringia.human.sig <- subset(human.data$Sigma, human.data$Region=="East Beringia")#
europe.human.sig <- subset(human.data$Sigma, human.data$Region=="Europe")#
oceania.human.sig <- subset(human.data$Sigma, human.data$Region=="Oceania")#
africa.human.sig <- subset(human.data$Sigma, human.data$Region=="Africa")#
western.human.intcal <- rep("intcal13", length(western.human.14C))#
central.human.intcal <- rep("intcal13", length(central.human.14C))#
eastern.human.intcal <- rep("intcal13", length(eastern.human.14C))#
all.eastern.human.intcal <- c(central.human.intcal, eastern.human.intcal)#
south.america.human.intcal <- rep("intcal13", length(south.america.human.14C))#
siberia.human.intcal <- rep("intcal13", length(siberia.human.14C))#
east.beringia.human.intcal <- rep("intcal13", length(east.beringia.human.14C))#
europe.human.intcal <- rep("intcal13", length(europe.human.14C))#
oceania.human.intcal <- rep("intcal13", length(oceania.human.14C))#
africa.human.intcal <- rep("intcal13", length(africa.human.14C))#
western.human.sites<- subset(human.data$Site, human.data$Region=="Western North America")#
central.human.sites <- subset(human.data$Site, human.data$Region=="Central North America")#
eastern.human.sites <- subset(human.data$Site, human.data$Region=="Eastern North America")#
all.eastern.human.sites <- c(central.human.sites, eastern.human.sites)#
south.america.human.sites <- subset(human.data$Site, human.data$Region=="South America")#
siberia.human.sites <- subset(human.data$Site, human.data$Region=="Siberia")#
east.beringia.human.sites <- subset(human.data$Site, human.data$Region=="East Beringia")#
europe.human.sites <- subset(human.data$Site, human.data$Region=="Europe")#
oceania.human.sites <- subset(human.data$Site, human.data$Region=="Oceania")#
africa.human.sites <- subset(human.data$Site, human.data$Region=="Africa")#
western.human.site.count <- length(unique(western.human.sites))#
eastern.human.site.count <- length(unique(western.human.sites))#
central.human.site.count <- length(unique(western.human.sites))#
all.eastern.human.site.count <- sum(eastern.human.site.count, central.human.site.count)#
south.america.human.site.count <- length(unique(eastern.human.sites))#
siberia.human.site.count <- length(unique(siberia.human.sites))#
east.beringia.human.site.count <- length(unique(east.beringia.human.sites))#
europe.human.site.count <- length(unique(europe.human.sites))#
oceania.human.site.count <- length(unique(oceania.human.sites))#
africa.human.site.count <- length(unique(africa.human.sites))#
western.human.lat<- as.numeric(as.vector(subset(human.data$Lat, human.data$Region=="Western North America")))#
central.human.lat <- as.numeric(as.vector(subset(human.data$Lat, human.data$Region=="Central North America")))#
eastern.human.lat <- as.numeric(as.vector(subset(human.data$Lat, human.data$Region=="Eastern North America")))#
all.eastern.human.lat <- c(as.numeric(as.vector(central.human.lat)), as.numeric(as.vector(eastern.human.lat)))#
south.america.human.lat <- as.numeric(as.vector(subset(human.data$Lat, human.data$Region=="South America")))#
siberia.human.lat <- as.numeric(as.vector(subset(human.data$Lat, human.data$Region=="Siberia")))#
east.beringia.human.lat <- as.numeric(as.vector(subset(human.data$Lat, human.data$Region=="East Beringia")))#
europe.human.lat <- as.numeric(as.vector(subset(human.data$Lat, human.data$Region=="Europe")))#
oceania.human.lat <- as.numeric(as.vector(subset(human.data$Lat, human.data$Region=="Oceania")))#
africa.human.lat <- as.numeric(as.vector(subset(human.data$Lat, human.data$Region=="Africa")))#
western.human.long<- as.numeric(as.vector(subset(human.data$Long, human.data$Region=="Western North America")))#
central.human.long <- as.numeric(as.vector(subset(human.data$Long, human.data$Region=="Central North America")))#
eastern.human.long <- as.numeric(as.vector(subset(human.data$Long, human.data$Region=="Eastern North America")))#
all.eastern.human.long <- c(as.numeric(as.vector(central.human.long)), as.numeric(as.vector(eastern.human.long)))#
south.america.human.long <- as.numeric(as.vector(subset(human.data$Long, human.data$Region=="South America")))#
siberia.human.long <- as.numeric(as.vector(subset(human.data$Long, human.data$Region=="Siberia")))#
east.beringia.human.long <- as.numeric(as.vector(subset(human.data$Long, human.data$Region=="East Beringia")))#
europe.human.long <- as.numeric(as.vector(subset(human.data$Long, human.data$Region=="Europe")))#
oceania.human.long <- as.numeric(as.vector(subset(human.data$Long, human.data$Region=="Oceania")))#
africa.human.long <- as.numeric(as.vector(subset(human.data$Long, human.data$Region=="Africa")))#
stack.14C.4D <- function(date, sigma, xmin, xmax, lat, long){#
    date.frame <- data.frame(date, sigma, lat, long)#
    names(date.frame) <- c("Date", "Sigma", "Lat", "Long")#
    date.sub <- subset(date.frame, xmin < Date & Date < xmax)#
    ids.cus = paste("Date", 1:length(date.sub$Date), sep = "")#
    coord.sub <- data.frame(ids.cus, date.sub$Lat, date.sub$Long)#
    names(coord.sub) <- c(".id", "Lat", "Long")#
    samp.intcal <- rep("intcal13", length(date.sub$Date))#
    samp.slugdens <- BchronCalibrate(date.sub$Date, date.sub$Sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.coord <- merge(samp.ages, coord.sub, by.x=".id")#
    return(samp.coord)#
}#
#
median.stack.14C.4d <- function(x, sigma, sites, xmin, xmax){#
    samp.intcal <- rep("intcal13", length(x))#
    samp.slugdens <- BchronCalibrate(x, sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.median <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, median))#
    medians.all <-as.vector(samp.median[,1])#
    medians <- medians.all[medians.all < xmax & medians.all > xmin]#
    return(medians)#
}#
stack.14C.4D.old <- function(date, sigma, xmin, xmax, lat, long){#
    date <- c(date, 100)#
    sigma <- c(sigma, 50)#
    lat <- c(lat, 0)#
    long <- c(long, 0)#
    date.frame <- data.frame(date, sigma, lat, long)#
    names(date.frame) <- c("Date", "Sigma", "Lat", "Long")#
    date.frame <- date.frame[complete.cases(date.frame),]#
    date.sub <- subset(date.frame, (xmin-500) < Date & Date < (xmax + 500))#
    ids.cus = paste("date", 1:length(date.sub$Date), sep = "")#
    coord.sub <- data.frame(ids.cus, date.sub$Lat, date.sub$Long)#
    names(coord.sub) <- c(".id", "Lat", "Long")#
    samp.intcal <- rep("intcal13", length(date.sub$Date))#
    samp.slugdens <- BchronCalibrate(date.sub$Date, date.sub$Sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.mean <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, mean))#
    samp.sd <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, sd))#
    samp.frame <- data.frame(samp.mean, samp.sd)#
    colnames(samp.frame) <- c("Mean", "Sd")#
    samp.frame$Min <- samp.frame$Mean-date.sub$Sigma#
    samp.frame$Max <- samp.frame$Mean+date.sub$Sigma#
    samp.frame$Lat <- coord.sub$Lat#
    samp.frame$Long <- coord.sub$Long#
    samp.frame <- data.table(samp.frame)#
    lat.frame <- samp.frame[, list(Lat=Lat, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
    long.frame <- samp.frame[, list(Long=Long, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
    fin.frame <- data.frame(lat.frame$Lat, long.frame$Long, lat.frame$ageGrid)#
    colnames(fin.frame) <- c("Lat", "Long", "ageGrid")#
    return(fin.frame)#
}#
stack.14C.4D <- function(date, sigma, xmin, xmax, lat, long){#
    date <- c(date, 100)#
    sigma <- c(sigma, 50)#
    lat <- c(lat, 0)#
    long <- c(long, 0)#
    date.frame <- data.frame(date, sigma, lat, long)#
    names(date.frame) <- c("Date", "Sigma", "Lat", "Long")#
    date.frame <- date.frame[complete.cases(date.frame),]#
    date.sub <- subset(date.frame, (xmin-500) < Date & Date < (xmax + 500))#
    ids.cus = paste("date", 1:length(date.sub$Date), sep = "")#
    coord.sub <- data.frame(ids.cus, date.sub$Lat, date.sub$Long)#
    names(coord.sub) <- c(".id", "Lat", "Long")#
    samp.intcal <- rep("intcal13", length(date.sub$Date))#
    samp.slugdens <- BchronCalibrate(date.sub$Date, date.sub$Sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.mean <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, mean))#
    samp.sd <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, sd))#
    samp.frame <- data.frame(samp.mean, samp.sd)#
    colnames(samp.frame) <- c("Mean", "Sd")#
    samp.frame$Min <- samp.frame$Mean-date.sub$Sigma#
    samp.frame$Max <- samp.frame$Mean+date.sub$Sigma#
    samp.frame$Lat <- coord.sub$Lat#
    samp.frame$Long <- coord.sub$Long#
    samp.frame <- data.table(samp.frame)#
    lat.frame <- samp.frame[, list(Lat=Lat, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
    long.frame <- samp.frame[, list(Long=Long, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
    fin.frame <- data.frame(lat.frame$Lat, long.frame$Long, lat.frame$ageGrid)#
    colnames(fin.frame) <- c("Lat", "Long", "ageGrid")#
    return(fin.frame)#
}#
mapGenPointDual <- function(map, human.date, megafauna.date, human.sigma, megafauna.sigma, xmin, xmax, human.lat, human.long, megafauna.lat, megafauna.long, interval, x.res, y.res) {#
    human.calibrated.date.frame <- stack.14C.4D(date=human.date, sigma=human.sigma, xmin=xmin, xmax=xmax, lat=human.lat, long=human.long)#
    #human.calibrated.date.frame <- subset(human.calibrated.date.frame, human.calibrated.date.frame$ageGrid < 16500)#
    human.calibrated.date.frame$Legend <- rep("Human", length(human.calibrated.date.frame$ageGrid))#
    megafauna.calibrated.date.frame <- stack.14C.4D(date=megafauna.date, sigma=megafauna.sigma, xmin=xmin, xmax=xmax, lat=megafauna.lat, long=megafauna.long)#
    megafauna.calibrated.date.frame$Legend <- rep("Megafauna", length(megafauna.calibrated.date.frame$ageGrid))#
    blank <- seq(1, 50000, 1)#
    blank.lat <- rep(0, length(blank))#
    blank.long <- rep(0, length(blank))#
    blank.human <- rep("Human", length(blank))#
    blank.megafauna <- rep("Megafauna", length(blank))#
    all.ageGrid <- c(human.calibrated.date.frame$ageGrid,megafauna.calibrated.date.frame$ageGrid, blank, blank)#
    all.lat <- c(human.calibrated.date.frame$Lat,megafauna.calibrated.date.frame$Lat, blank.lat, blank.lat)#
    all.long <- c(human.calibrated.date.frame$Long,megafauna.calibrated.date.frame$Long, blank.long, blank.long)#
    all.legend <- c(human.calibrated.date.frame$Legend,megafauna.calibrated.date.frame$Legend, blank.human, blank.megafauna)#
    calibrated.date.frame <- data.frame(all.ageGrid,all.lat,all.long,all.legend)#
    colnames(calibrated.date.frame) <- c("ageGrid", "Lat", "Long", "Legend")#
    date.interval <- seq(from=xmin, to=xmax, by=interval)#
    date.interval <- rev(date.interval)#
    date.list <- pbapply::pblapply(date.interval, function(x) subset(calibrated.date.frame, calibrated.date.frame$ageGrid > x & calibrated.date.frame$ageGrid < x+interval))#
    animation::ani.options(convert="/usr/local/bin/convert")#
    animation::saveVideo(expr=for (i in seq_along(date.interval)) {#
        #num.f <- formatC(seq(xmin, xmax, interval), width=5, format="d", flag="0")#
        #num <- rev(num.f)#
        num <- formatC(seq(1, length(date.interval), 1), width=6, format="d", flag="0")#
        plots <- ggmap(map, alpha=0.2) +#
        geom_point(data=data.frame(date.list[i]), aes(x=Long, y=Lat, colour=Legend), alpha=0.5, size=4, shape=15)+#
        coord_equal() +#
        coord_map() +#
        theme_tufte() +#
        ggtitle(paste(date.interval[i], " cal BP", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE)#
        ggsave(plots, filename=paste("map",num[i], ".png", sep=""))#
    }, video.name="iberia.mp4", img.name="map")#
    #ffmpeg -f image2 -i map%06d.png -vcodec mjpeg -q:v 0 -r 25 iberia.avi#
}#
#
# addalpha()#
addalpha <- function(colors, alpha=1.0) {#
    r <- col2rgb(colors, alpha=T)#
    # Apply alpha#
    r[4,] <- alpha*255#
    r <- r/255.0#
    return(rgb(r[1,], r[2,], r[3,], r[4,]))#
}#
#
# colorRampPaletteAlpha()#
colorRampPaletteAlpha <- function(colors, n=32, interpolate='linear') {#
    # Create the color ramp normally#
    cr <- colorRampPalette(colors, interpolate=interpolate)(n)#
    # Find the alpha channel#
    a <- col2rgb(colors, alpha=T)[4,]#
    # Interpolate#
    if (interpolate=='linear') {#
        l <- approx(a, n=n)#
    } else {#
        l <- spline(a, n=n)#
    }#
    l$y[l$y > 255] <- 255 # Clamp if spline is > 255#
    cr <- addalpha(cr, l$y/255.0)#
    return(cr)#
}#
mapGenHeatDual <- function(map, human.date, megafauna.date, human.sigma, megafauna.sigma, xmin, xmax, human.lat, human.long, megafauna.lat, megafauna.long, interval, x.res, y.res, land.file) {#
    stack.14C.4D.old <- function(date, sigma, xmin, xmax, lat, long){#
        date <- c(date, 100)#
        sigma <- c(sigma, 50)#
        lat <- c(lat, 0)#
        long <- c(long, 0)#
        date.frame <- data.frame(date, sigma, lat, long)#
        names(date.frame) <- c("Date", "Sigma", "Lat", "Long")#
        date.frame <- date.frame[complete.cases(date.frame),]#
        date.sub <- subset(date.frame, (xmin-500) < Date & Date < (xmax + 500))#
        ids.cus = paste("date", 1:length(date.sub$Date), sep = "")#
        coord.sub <- data.frame(ids.cus, date.sub$Lat, date.sub$Long)#
        names(coord.sub) <- c(".id", "Lat", "Long")#
        samp.intcal <- rep("intcal13", length(date.sub$Date))#
        samp.slugdens <- BchronCalibrate(date.sub$Date, date.sub$Sigma, samp.intcal)#
        samp.ages <- ldply(samp.slugdens, data.frame)#
        samp.mean <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, mean))#
        samp.sd <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, sd))#
        samp.dens <- data.frame(tapply(samp.ages$densities, samp.ages$.id, sum))#
        samp.frame <- data.frame(samp.mean, samp.sd, samp.dens)#
        colnames(samp.frame) <- c("Mean", "Sd", "Density")#
        samp.frame$Min <- samp.frame$Mean-date.sub$Sigma#
        samp.frame$Max <- samp.frame$Mean+date.sub$Sigma#
        samp.frame$Lat <- coord.sub$Lat#
        samp.frame$Long <- coord.sub$Long#
        samp.frame <- data.table(samp.frame)#
        lat.frame <- samp.frame[, list(Lat=Lat, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
        long.frame <- samp.frame[, list(Long=Long, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
        density.frame <- samp.frame[, list(Density=Density, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
#
        fin.frame <- data.frame(lat.frame$Lat, long.frame$Long, lat.frame$ageGrid, density.frame$Density)#
        colnames(fin.frame) <- c("Lat", "Long", "ageGrid", "Density")#
        return(fin.frame)#
    }#
    stack.14C.4D <- function(date, sigma, xmin, xmax, lat, long){#
        date <- c(date, 100)#
        sigma <- c(sigma, 50)#
        lat <- c(lat, 0)#
        long <- c(long, 0)#
        date.frame <- data.frame(date, sigma, lat, long)#
        names(date.frame) <- c("Date", "Sigma", "Lat", "Long")#
        date.frame <- date.frame[complete.cases(date.frame),]#
        date.sub <- subset(date.frame, (xmin-500) < Date & Date < (xmax + 500))#
        ids.cus = paste("Date", 1:length(date.sub$Date), sep = "")#
        coord.sub <- data.frame(ids.cus, date.sub$Lat, date.sub$Long)#
        names(coord.sub) <- c(".id", "Lat", "Long")#
        samp.intcal <- rep("intcal13", length(date.sub$Date))#
        samp.slugdens <- BchronCalibrate(date.sub$Date, date.sub$Sigma, samp.intcal)#
        samp.ages <- ldply(samp.slugdens, data.frame)#
        samp.test <- merge(x=samp.ages, y=coord.sub, by.x=".id", by.y=".id")#
        samp.test$DensityScale <- reshape::rescaler.default(samp.test$densities, type = "range")#
        return(samp.test)#
    }#
    land <- readOGR(land.file)#
    list_of_Lines <- slot(land, "lines")#
    land2 <-  SpatialPolygons(lapply(list_of_Lines, function(x) {#
        Polygons(list(Polygon(slot(slot(x, "Lines")[[1]], "coords"))),#
        ID=slot(x, "ID"))#
    }),#
    proj4string=CRS("+proj=longlat +ellps=WGS84"))#
    landset <- SpatialLines2PolySet(land)#
    polyland <- PolySet2SpatialPolygons(landset)#
    human.calibrated.date.frame <- stack.14C.4D(date=human.date, sigma=human.sigma, xmin=xmin, xmax=xmax, lat=human.lat, long=human.long)#
    #human.calibrated.date.frame <- subset(human.calibrated.date.frame, human.calibrated.date.frame$ageGrid < 16500)#
    human.calibrated.date.frame$Legend <- rep("Human", length(human.calibrated.date.frame$ageGrid))#
    megafauna.calibrated.date.frame <- stack.14C.4D(date=megafauna.date, sigma=megafauna.sigma, xmin=xmin, xmax=xmax, lat=megafauna.lat, long=megafauna.long)#
    megafauna.calibrated.date.frame$Legend <- rep("Megafauna", length(megafauna.calibrated.date.frame$ageGrid))#
    blank <- seq(xmin, xmax, 1)#
    blank.lat <- rep(0, length(blank))#
    blank.long <- rep(0, length(blank))#
    blank.human <- rep("Human", length(blank))#
    blank.megafauna <- rep("Megafauna", length(blank))#
    all.ageGrid <- c(human.calibrated.date.frame$ageGrid,megafauna.calibrated.date.frame$ageGrid, blank, blank)#
    all.lat <- c(human.calibrated.date.frame$Lat,megafauna.calibrated.date.frame$Lat, blank.lat, blank.lat)#
    all.long <- c(human.calibrated.date.frame$Long,megafauna.calibrated.date.frame$Long, blank.long, blank.long)#
    all.legend <- c(human.calibrated.date.frame$Legend,megafauna.calibrated.date.frame$Legend, blank.human, blank.megafauna)#
    calibrated.date.frame <- data.frame(all.ageGrid,all.lat,all.long,all.legend)#
    colnames(calibrated.date.frame) <- c("ageGrid", "Lat", "Long", "Legend")#
    calibrated.date.frame <- calibrated.date.frame[complete.cases(calibrated.date.frame),]#
    dateScrub <- function(dataframe, age.min, age.max) {#
        dataframe$point <- 0#
        dataframe$point[findInterval(dataframe$ageGrid, c(age.min,age.max)) == 1L] <- 1#
        return(dataframe)#
    }#
    date.interval <- seq(from=xmin, to=xmax, by=interval)#
    date.interval <- rev(date.interval)#
    date.min <- date.interval-interval/2#
    date.max <- date.interval+interval/2#
    date.list <- pbapply::pblapply(date.interval, function(x) dateScrub(dataframe=calibrated.date.frame, age.min=x-interval/2, age.max=x+interval/2))#
    heat.function.min <- function(data.frame, x.res, y.res) {#
        data.frame <- data.frame[complete.cases(data.frame),]#
        data.frame.int <- with(data.frame, interp(x=Long, y=Lat, z=point, duplicate="user", dupfun="max", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))#
        land.clip <- crop(data.map, polyland)#
        results <- land.clip@data#
        return(results)#
    }#
    heat.function.max <- function(data.frame, x.res, y.res) {#
        data.frame <- data.frame[complete.cases(data.frame),]#
#
        data.frame.int <- with(data.frame, interp(x=Long, y=Lat, z=point, duplicate="user", dupfun="max", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))#
        land.clip <- crop(data.map, polyland)#
        results <- land.clip@data#
        return(results)#
    }#
    heat.function.mean <- function(data.frame, x.res, y.res) {#
        data.frame <- data.frame[complete.cases(data.frame),]#
        data.frame.int <- with(data.frame, interp(x=Long, y=Lat, z=point, duplicate="user", dupfun="mean", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))#
        land.clip <- crop(data.map, polyland)#
        results <- land.clip@data#
        return(results)#
    }#
    animation::ani.options(convert="/usr/local/bin/convert")#
    animation::saveVideo(expr=for (i in seq_along(date.interval)) {#
        human.data <- subset(date.list[[i]], date.list[[i]]$Legend=="Human")#
        megafauna.data <- subset(date.list[[i]], date.list[[i]]$Legend=="Megafauna")#
        human.small <- subset(human.data, ageGrid < 15000)#
        human.int <- heat.function.mean(human.data, x.res=x.res, y.res=y.res)#
        megafauna.int <- heat.function.mean(megafauna.data, x.res=x.res, y.res=y.res)#
        human.names <- rep("Human", length(human.int$x))#
        megafauna.names <- rep("Megafauna", length(megafauna.int$x))#
        x.vector <- c(human.int$x, megafauna.int$x)#
        y.vector <- c(human.int$y, megafauna.int$y)#
        z.vector <- c(human.int$z/max(human.int$z), megafauna.int$z/max(megafauna.int$z))#
        name.vector <- c(human.names, megafauna.names)#
        total.frame <- data.frame(x.vector, y.vector, z.vector, name.vector)#
        colnames(total.frame) <- c("x", "y", "z", "Legend")#
        #num.f <- formatC(seq(xmin, xmax, interval), width=5, format="d", flag="0")#
        #num <- rev(num.f)#
        num <- formatC(seq(1, length(date.interval), 1), width=6, format="d", flag="0")#
        human.plot <- ggmap(map) +#
        geom_tile(data=human.int, aes(x=x, y=y, fill=z,  alpha=z))+#
        coord_equal() +#
        coord_map() +#
        scale_alpha_continuous(range=c(0.2, 1), guide="none") +#
        scale_fill_gradientn(name = "Latest Date", colors=rev(heat.colors(17)), na.value="white") +#
        scale_y_continuous("Latitude", limits = c(25, 73)) +#
        scale_x_continuous("Longitude", limits = c(-165, -60), breaks=seq(-165, -60, 30)) +#
        theme_tufte() +#
        ggtitle("North America Humans") +#
        ggtitle(paste(date.interval[i], " cal BP | Humans", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE, fill=FALSE)#
        megafauna.plot <- ggmap(map, alpha=0.2) +#
        geom_tile(data=megafauna.int, aes(x=x, y=y, fill=z,  alpha=z))+#
        coord_equal() +#
        coord_map() +#
        scale_alpha_continuous(range=c(0.2, 1), guide="none") +#
        scale_fill_gradient(name = "Latest Date", low="white", high="blue", na.value="white") +#
        scale_y_continuous("Latitude", limits = c(25, 73)) +#
        scale_x_continuous("Longitude", limits = c(-165, -60), breaks=seq(-165, -60, 30)) +#
        theme_tufte() +#
        ggtitle("North America Megafauna") +#
        ggtitle(paste(date.interval[i], " cal BP | Megafauna", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE, fill=FALSE)#
        ggsave(layOut(list(human.plot, 1:50, 1:50),#
        list(megafauna.plot, 1:50, 51:100)), filename=paste("/Users/lee/Dropbox/Documents/SCDPD/Map Runs/map",num[i], ".tiff", sep=""), device="tiff", dpi=320, width=7, height=3.7)#
    }, video.name="iberia.mp4", img.name="map")#
    #ffmpeg -f image2 -i map%06d.png -vcodec mjpeg -q:v 0 -r 25 iberia.avi#
}#
mapGenHeatDualDensity <- function(map, human.date, megafauna.date, human.sigma, megafauna.sigma, xmin, xmax, human.lat, human.long, megafauna.lat, megafauna.long, interval, x.res, y.res, land.file, lat.min, lat.max, long.min, long.max, frame.width, frame.height) {#
    stack.14C.4D <- function(date, sigma, xmin, xmax, lat, long){#
        date <- c(date, 100)#
        sigma <- c(sigma, 50)#
        lat <- c(lat, 0)#
        long <- c(long, 0)#
        date.frame <- data.frame(date, sigma, lat, long)#
        names(date.frame) <- c("Date", "Sigma", "Lat", "Long")#
        date.frame <- date.frame[complete.cases(date.frame),]#
        date.sub <- subset(date.frame, (xmin-500) < Date & Date < (xmax + 500))#
        ids.cus = paste("Date", 1:length(date.sub$Date), sep = "")#
        coord.sub <- data.frame(ids.cus, date.sub$Lat, date.sub$Long)#
        names(coord.sub) <- c(".id", "Lat", "Long")#
        samp.intcal <- rep("intcal13", length(date.sub$Date))#
        samp.slugdens <- BchronCalibrate(date.sub$Date, date.sub$Sigma, samp.intcal)#
        samp.ages <- ldply(samp.slugdens, data.frame)#
        samp.ages <- subset(samp.ages, samp.ages$densities > .0015)#
        samp.test <- merge(x=samp.ages, y=coord.sub, by.x=".id", by.y=".id")#
        samp.test$DensityScale <- reshape::rescaler.default(samp.test$densities, type = "range")#
        return(samp.test)#
    }#
    land <- readOGR(land.file)#
    list_of_Lines <- slot(land, "lines")#
    land2 <-  SpatialPolygons(lapply(list_of_Lines, function(x) {#
        Polygons(list(Polygon(slot(slot(x, "Lines")[[1]], "coords"))),#
        ID=slot(x, "ID"))#
    }),#
    proj4string=CRS("+proj=longlat +ellps=WGS84"))#
    landset <- SpatialLines2PolySet(land)#
    polyland <- PolySet2SpatialPolygons(landset)#
    human.calibrated.date.frame <- stack.14C.4D(date=human.date, sigma=human.sigma, xmin=xmin, xmax=xmax, lat=human.lat, long=human.long)#
    #human.calibrated.date.frame <- subset(human.calibrated.date.frame, human.calibrated.date.frame$ageGrid < 16500)#
    human.calibrated.date.frame$Legend <- rep("Human", length(human.calibrated.date.frame$ageGrid))#
    megafauna.calibrated.date.frame <- stack.14C.4D(date=megafauna.date, sigma=megafauna.sigma, xmin=xmin, xmax=xmax, lat=megafauna.lat, long=megafauna.long)#
    megafauna.calibrated.date.frame$Legend <- rep("Megafauna", length(megafauna.calibrated.date.frame$ageGrid))#
    blank <- seq(xmin, xmax, 1)#
    blank.lat <- rep(0, length(blank))#
    blank.long <- rep(0, length(blank))#
    blank.human <- rep("Human", length(blank))#
    blank.megafauna <- rep("Megafauna", length(blank))#
    blank.0 <- rep(0, length(blank))#
    all.ageGrid <- c(human.calibrated.date.frame$ageGrid,megafauna.calibrated.date.frame$ageGrid, blank, blank)#
    all.lat <- c(human.calibrated.date.frame$Lat,megafauna.calibrated.date.frame$Lat, blank.lat, blank.lat)#
    all.long <- c(human.calibrated.date.frame$Long,megafauna.calibrated.date.frame$Long, blank.long, blank.long)#
    all.densities <- c(human.calibrated.date.frame$densities,megafauna.calibrated.date.frame$densities, blank.0, blank.0)#
#
    all.densityscale <- c(human.calibrated.date.frame$DensityScale,megafauna.calibrated.date.frame$DensityScale, blank.0, blank.0)#
#
    all.legend <- c(human.calibrated.date.frame$Legend,megafauna.calibrated.date.frame$Legend, blank.human, blank.megafauna)#
    calibrated.date.frame <- data.frame(all.ageGrid,all.lat,all.long,all.densities, all.densityscale,all.legend)#
    colnames(calibrated.date.frame) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale", "Legend")#
    calibrated.date.frame <- calibrated.date.frame[complete.cases(calibrated.date.frame),]#
    dateScrubOld <- function(dataframe, age.min, age.max) {#
        dataframe$point <- 0.1#
        dataframe$point[findInterval(dataframe$ageGrid, c(age.min,age.max)) == 1L] <- 1#
        dataframe$DensityPlot <- dataframe$DensityScale*dataframe$point#
        return(dataframe)#
    }#
    dateScrubBad <- function(dataframe, age.min, age.max) {#
        dataframe <- dataframe[complete.cases(dataframe),]#
        dataframe$point <- 0#
        dataframe$point[findInterval(dataframe$ageGrid, c(age.min,age.max)) == 1L] <- 1#
        dataframe.val <- subset(dataframe, dataframe$point==1)#
        dataframe.blank <- dataframe#
        dataframe.blank$densities <- dataframe.blank$densities*0#
        dataframe.blank$DensityScale <- dataframe.blank$DensityScale*0#
        dataframe.blank <- subset(dataframe.blank, dataframe$point==0)#
        all.ageGrid <- c(dataframe.val$ageGrid, dataframe.blank$ageGrid)#
        all.lat <- c(dataframe.val$Lat, dataframe.blank$Lat)#
        all.long <- c(dataframe.val$Long, dataframe.blank$Long)#
        all.densities <- c(dataframe.val$densities, dataframe.blank$densities)#
        all.densityscale <- c(dataframe.val$DensityScale, dataframe.blank$DensityScale)#
        all.legend <- c(as.vector(dataframe.val$Legend), as.vector(dataframe.blank$Legend))#
        full.date.frame <- data.frame(all.ageGrid,all.lat,all.long,all.densities, all.densityscale,all.legend)#
        colnames(full.date.frame) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale", "Legend")#
        full.date.frame <- full.date.frame[complete.cases(full.date.frame),]#
#
        return(full.date.frame)#
    }#
    dateScrub <- function(dataframe, age.min, age.max) {#
        dataframe$point <- 0#
        dataframe$point[findInterval(dataframe$ageGrid, c(age.min,age.max)) == 1L] <- 1#
        dataframe.val <- subset(dataframe, dataframe$point==1)#
        return(dataframe.val)#
    }#
    date.interval <- seq(from=xmin, to=xmax, by=interval)#
    date.interval <- rev(date.interval)#
    date.min <- date.interval-interval/2#
    date.max <- date.interval+interval/2#
    date.list <- pbapply::pblapply(date.interval, function(x) dateScrub(dataframe=calibrated.date.frame, age.min=x-interval/2, age.max=x+interval/2))#
    heat.function.min <- function(data.frame, x.res, y.res) {#
        data.frame <- data.frame[complete.cases(data.frame),]#
        data.frame.int <- with(data.frame, interp(x=Long, y=Lat, z=densities, duplicate="user", dupfun="max", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))#
        land.clip <- crop(data.map, polyland)#
        results <- land.clip@data#
        return(results)#
    }#
    heat.function.max <- function(data.frame, x.res, y.res) {#
        data.frame <- data.frame[complete.cases(data.frame),]#
        data.frame.int <- with(data.frame, interp(x=Long, y=Lat, z=densities, duplicate="user", dupfun="max", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))#
        land.clip <- crop(data.map, polyland)#
        results <- land.clip@data#
        return(results)#
    }#
    heat.function.mean <- function(data.frame, x.res, y.res) {#
        data.frame <- data.frame[complete.cases(data.frame),]#
        data.frame.int <- with(data.frame, interp(x=Long, y=Lat, z=DensityScale, duplicate="user", dupfun="mean", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))#
        land.clip <- crop(data.map, polyland)#
        results <- land.clip@data#
        #results$zmod <- reshape::rescaler.default(results$z, type = "range")#
        return(results)#
    }#
    animation::ani.options(convert="/usr/local/bin/convert")#
    animation::saveVideo(expr=for (i in seq_along(date.interval)) {#
        human.data <- subset(date.list[[i]], date.list[[i]]$Legend=="Human")#
        megafauna.data <- subset(date.list[[i]], date.list[[i]]$Legend=="Megafauna")#
        blank.ageGrid <- c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0)#
        blank.lat <- c(70.5,58.31,50.58,40.2,26.8,27.13,34.95,47.78,71.3,42.6)#
        blank.long <- c(-159, -154.64,-125.25,-124,-98,-81,-76.7,-54.33,-76.44,-100)#
        blank.densities <- c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0)#
        blank.point <- c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0)#
        blank.legend.human <- rep("Human", 10)#
        blank.legend.megafauna <- rep("Megafauna", 10)#
        blank.megafauna.frame <- data.frame(blank.ageGrid, blank.lat, blank.long, blank.densities, blank.densities,blank.legend.megafauna, blank.point)#
        colnames(blank.megafauna.frame) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale", "Legend", "point")#
        blank.human.frame <- data.frame(blank.ageGrid, blank.lat, blank.long, blank.densities, blank.densities,blank.legend.human, blank.point)#
        colnames(blank.human.frame) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale", "Legend", "point")#
        human.data <- rbind(human.data, blank.human.frame)#
        megafauna.data <- rbind(megafauna.data, blank.megafauna.frame)#
        human.int <- heat.function.mean(human.data, x.res=x.res, y.res=y.res)#
        megafauna.int <- heat.function.mean(megafauna.data, x.res=x.res, y.res=y.res)#
        human.names <- rep("Human", length(human.int$x))#
        megafauna.names <- rep("Megafauna", length(megafauna.int$x))#
        x.vector <- c(human.int$x, megafauna.int$x)#
        y.vector <- c(human.int$y, megafauna.int$y)#
        z.vector <- c(human.int$z/max(human.int$z), megafauna.int$z/max(megafauna.int$z))#
        name.vector <- c(human.names, megafauna.names)#
        total.frame <- data.frame(x.vector, y.vector, z.vector, name.vector)#
        colnames(total.frame) <- c("x", "y", "z", "Legend")#
        #num.f <- formatC(seq(xmin, xmax, interval), width=5, format="d", flag="0")#
        #num <- rev(num.f)#
        num <- formatC(seq(1, length(date.interval), 1), width=6, format="d", flag="0")#
        blank.human.plot <- ggmap(map) +#
        coord_equal() +#
        coord_map() +#
        scale_y_continuous("Latitude", limits = c(lat.min, lat.max)) +#
        scale_x_continuous("Longitude", limits = c(long.min, long.max)) +#
        theme_tufte() +#
        ggtitle(paste(date.interval[i], " cal BP | Humans", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE, fill=FALSE)#
        blank.megafauna.plot <- ggmap(map) +#
        coord_equal() +#
        coord_map() +#
        scale_y_continuous("Latitude", limits = c(lat.min, lat.max)) +#
        scale_x_continuous("Longitude", limits = c(long.min, long.max)) +#
        theme_tufte() +#
        ggtitle(paste(date.interval[i], " cal BP | Megafauna", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE, fill=FALSE)#
        val.human.plot <- ggmap(map) +#
        #geom_contour(data=human.int, aes(x=x, y=y, z=z), colour="red", alpha=0.2, binwidth=0.01)+#
        geom_tile(data=human.int, aes(x=x, y=y, fill=z,  alpha=z))+#
        coord_equal() +#
        coord_map() +#
        scale_alpha_continuous(range=c(0, 1), guide="none") +#
        scale_fill_gradient(name = "Latest Date", low="pink", high="red",  limits=c(0, 1)) +#
        scale_y_continuous("Latitude", limits = c(lat.min, lat.max)) +#
        scale_x_continuous("Longitude", limits = c(long.min, long.max)) +#
        theme_tufte() +#
        ggtitle(paste(date.interval[i], " cal BP | Humans", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE, fill=FALSE)#
        val.megafauna.plot <- ggmap(map) +#
        #geom_contour(data=megafauna.int, aes(x=x, y=y, z=z), colour="blue", alpha=0.2, binwidth=0.01)+#
        geom_tile(data=megafauna.int, aes(x=x, y=y, fill=z,  alpha=z))+#
        coord_equal() +#
        coord_map() +#
        scale_alpha_continuous(range=c(0, 1), guide="none") +#
        scale_fill_gradient(name = "Latest Date", low="light blue", high="blue",  limits=c(0, 1)) +#
        scale_y_continuous("Latitude", limits = c(lat.min, lat.max)) +#
        scale_x_continuous("Longitude", limits = c(long.min, long.max)) +#
        theme_tufte() +#
        ggtitle(paste(date.interval[i], " cal BP | Megafauna", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE, fill=FALSE)#
        megafauna.z <- sum(megafauna.int$z)#
        human.z <- sum(human.int$z)#
        human.plot <- if(human.z==0) {#
            blank.human.plot#
        } else {#
            val.human.plot#
        }#
        megafauna.plot <- if(megafauna.z==0) {#
            blank.megafauna.plot#
        } else {#
            val.megafauna.plot#
        }#
        ggsave(layOut(list(human.plot, 1:50, 1:50),#
        list(megafauna.plot, 1:50, 51:100)), filename=paste("/Users/lee/Dropbox/Documents/SCDPD/Map Runs/map",num[i], ".tiff", sep=""), device="tiff", dpi=320, width=frame.width, height=frame.height)#
    }, video.name="iberia.mp4", img.name="map")#
    #ffmpeg -f image2 -i map%06d.tif -vcodec mjpeg -q:v 0 -r 25 megafauna.mov#
}
Si <- get_map(location=c(90, 65), zoom=3, maptype="terrain")
ggmap(Si)
Si <- get_map(location=c(90, 65), zoom=2, maptype="terrain")
ggmap(Si)
scale_y_continuous("Latitude", limits=c(25, 90), breaks=seq(30, 90, 10)) +#
scale_x_continuous("Longitude", limits=c(50, 180), breaks=seq(60, 180, 30)) +
)
ggmap(Si) +#
scale_y_continuous("Latitude", limits=c(25, 90), breaks=seq(30, 90, 10)) +#
scale_x_continuous("Longitude", limits=c(50, 180), breaks=seq(60, 180, 30))
ggmap(Si) +#
scale_y_continuous("Latitude", limits=c(25, 80), breaks=seq(30, 90, 10)) +#
scale_x_continuous("Longitude", limits=c(50, 180), breaks=seq(60, 180, 30))
ggmap(Si) +#
scale_y_continuous("Latitude", limits=c(40, 80), breaks=seq(30, 90, 10)) +#
scale_x_continuous("Longitude", limits=c(50, 180), breaks=seq(60, 180, 30))
mapGenHeatDualDensity(map=Si, human.date=siberia.human.14C, megafauna.date=siberia.megafauna.14C, human.sigma=europe.human.sig, megafauna.sigma=siberia.megafauna.sig, human.lat=siberia.human.lat, human.long=siberia.human.long, megafauna.lat=siberia.megafauna.lat, megafauna.long=siberia.megafauna.long, xmin = 5000, xmax=20000, interval=10, x.res=250, y.res=250, land.file="/Users/lee/Dropbox/Documents/SCDPD/Maps/ne_110m_coastline", lat.min=40, lat.max=80, long.min=50, long.max=180, frame.width=7, frame.height=3.7)
mapGenHeatDualDensity(map=Si, human.date=siberia.human.14C, megafauna.date=siberia.megafauna.14C, human.sigma=siberia.human.sig, megafauna.sigma=siberia.megafauna.sig, human.lat=siberia.human.lat, human.long=siberia.human.long, megafauna.lat=siberia.megafauna.lat, megafauna.long=siberia.megafauna.long, xmin = 5000, xmax=20000, interval=10, x.res=250, y.res=250, land.file="/Users/lee/Dropbox/Documents/SCDPD/Maps/ne_110m_coastline", lat.min=40, lat.max=80, long.min=50, long.max=180, frame.width=7, frame.height=3.7)
mapGenHeatDualDensity(map=Si, human.date=siberia.human.14C, megafauna.date=siberia.megafauna.14C, human.sigma=siberia.human.sig, megafauna.sigma=siberia.megafauna.sig, human.lat=siberia.human.lat, human.long=siberia.human.long, megafauna.lat=siberia.megafauna.lat, megafauna.long=siberia.megafauna.long, xmin = 5000, xmax=20000, interval=10, x.res=250, y.res=250, land.file="/Users/lee/Dropbox/Documents/SCDPD/Maps/ne_110m_coastline", lat.min=40, lat.max=80, long.min=50, long.max=180, frame.width=7, frame.height=3.7)
ggmap(Si)
quartz()
ggmap(Si)
Si <- get_map(location=c(90, 65), zoom=2, maptype="terrain")
mapGenHeatDualDensity(map=Si, human.date=siberia.human.14C, megafauna.date=siberia.megafauna.14C, human.sigma=siberia.human.sig, megafauna.sigma=siberia.megafauna.sig, human.lat=siberia.human.lat, human.long=siberia.human.long, megafauna.lat=siberia.megafauna.lat, megafauna.long=siberia.megafauna.long, xmin = 5000, xmax=20000, interval=10, x.res=250, y.res=250, land.file="/Users/lee/Dropbox/Documents/SCDPD/Maps/ne_110m_coastline", lat.min=40, lat.max=80, long.min=50, long.max=180, frame.width=7, frame.height=3.7)
mapGenHeatDualDensity(map=Si, human.date=siberia.human.14C, megafauna.date=siberia.megafauna.14C, human.sigma=siberia.human.sig, megafauna.sigma=siberia.megafauna.sig, human.lat=siberia.human.lat, human.long=siberia.human.long, megafauna.lat=siberia.megafauna.lat, megafauna.long=siberia.megafauna.long, xmin = 5000, xmax=20000, interval=10, x.res=250, y.res=250, land.file="/Users/lee/Dropbox/Documents/SCDPD/Maps/ne_110m_coastline", lat.min=40, lat.max=80, long.min=50, long.max=179, frame.width=7, frame.height=3.2)
lat.min <- 40
lat.max <- 80
long.min <- 50
long.max <- 180
ggmap(Si) +#
scale_y_continuous("Latitude", limits=c(lat.min, lat.max), breaks=seq(30, 90, 10)) +#
scale_x_continuous("Longitude", limits=c(long.min, long.max), breaks=seq(60, 180, 30))
quartz()
ggmap(Si) +#
scale_y_continuous("Latitude", limits=c(lat.min, lat.max), breaks=seq(30, 90, 10)) +#
scale_x_continuous("Longitude", limits=c(long.min, long.max), breaks=seq(60, 180, 30))
130/2
65 + 50
75-40
35/2
Si <- get_map(location=c(115, 58), zoom=3, maptype="terrain")
ggmap(Si) +#
scale_y_continuous("Latitude", limits=c(40, 80), breaks=seq(30, 90, 10)) +#
scale_x_continuous("Longitude", limits=c(50, 180), breaks=seq(60, 180, 30))
quartz()
ggmap(Si) +#
scale_y_continuous("Latitude", limits=c(40, 80), breaks=seq(30, 90, 10)) +#
scale_x_continuous("Longitude", limits=c(50, 180), breaks=seq(60, 180, 30))
ggmap(Si) +#
scale_y_continuous("Latitude", limits=c(40, 75), breaks=seq(30, 90, 10)) +#
scale_x_continuous("Longitude", limits=c(60, 170), breaks=seq(60, 180, 30))
ggmap(Si) +#
scale_y_continuous("Latitude", limits=c(40, 75), breaks=seq(30, 90, 10)) +#
scale_x_continuous("Longitude", limits=c(58, 165), breaks=seq(60, 180, 30))
ggmap(Si) +#
scale_y_continuous("Latitude", limits=c(40, 75), breaks=seq(30, 90, 10)) +#
scale_x_continuous("Longitude", limits=c(62, 165), breaks=seq(60, 180, 30))
ggmap(Si) +#
scale_y_continuous("Latitude", limits=c(40, 75), breaks=seq(30, 90, 10)) +#
scale_x_continuous("Longitude", limits=c(63, 165), breaks=seq(60, 180, 30))
quartz()
ggmap(Si) +#
scale_y_continuous("Latitude", limits=c(40, 75), breaks=seq(30, 90, 10)) +#
scale_x_continuous("Longitude", limits=c(63, 165), breaks=seq(60, 180, 30))
quartz()
ggmap(Si) +#
scale_y_continuous("Latitude", limits=c(40, 75), breaks=seq(30, 90, 10)) +#
scale_x_continuous("Longitude", limits=c(64, 165), breaks=seq(60, 180, 30))
mapGenHeatDualDensity(map=Si, human.date=siberia.human.14C, megafauna.date=siberia.megafauna.14C, human.sigma=siberia.human.sig, megafauna.sigma=siberia.megafauna.sig, human.lat=siberia.human.lat, human.long=siberia.human.long, megafauna.lat=siberia.megafauna.lat, megafauna.long=siberia.megafauna.long, xmin = 5000, xmax=20000, interval=10, x.res=250, y.res=250, land.file="/Users/lee/Dropbox/Documents/SCDPD/Maps/ne_110m_coastline", lat.min=40, lat.max=75, long.min=64, long.max=165, frame.width=7, frame.height=3.2)
library(shiny)
runApp("~/GitHub/congressImpact")
runApp("~/GitHub/congressImpact")
runApp("~/GitHub/congressImpact")
runApp("~/GitHub/congressImpact")
