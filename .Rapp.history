heat.function.mean <- function(data.frame, x.res, y.res) {#
        data.frame <- data.frame[complete.cases(data.frame),]#
        data.frame.int <- with(data.frame, interp(x=Long, y=Lat, z=DensityScale, duplicate="user", dupfun="mean", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))#
        land.clip <- crop(data.map, polyland)#
        results <- land.clip@data#
        results <- results[complete.cases(results),]#
        #results$zmod <- reshape::rescaler.default(results$z, type = "range")#
        return(results)#
    }
human.int <- heat.function.mean(human.data, x.res=x.res, y.res=y.res)
head(human.int)
val.human.plot <- ggmap(map) +#
        geom_contour(data=human.int, aes(x=x, y=y, z=z), colour="red", alpha=0.2, binwidth=0.001)+#
        geom_tile(data=human.int, aes(x=x, y=y, fill=z,  alpha=z))+#
        coord_equal() +#
        coord_map() +#
        scale_alpha_continuous(range=c(0, 1), guide="none") +#
        scale_fill_gradient(name = "Latest Date", low="pink", high="red",  limits=c(0, 1)) +#
        scale_x_continuous("Longitude", limits=c(-10, 4)) +#
        scale_y_continuous("Latitude", limits=c(35, 45)) +#
        theme_tufte() +#
        ggtitle(paste(date.interval[200], " cal BP | Humans", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE, fill=FALSE)
val.human.plot
range(human.int$z)
tail(human.int)
head(human.data)
range(human.data$Lat)
range(human.data$Long)
human.int <- heat.function.mean(human.data, x.res=x.res, y.res=y.res)
head(human.int)
range(human.int$x)
range(human.int$y)
human.data <- date.list[[200]]#
        human.data <- data.frame(human.data$ageGrid, human.data$Lat, human.data$Long, human.data$densities, human.data$DensityScale, human.data$point)#
        colnames(human.data) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale",  "point")#
        blank.ageGrid <- c(0, 0, 0, 0)#
        blank.long <- c(-10, -10, 2.5, 2.5)#
        blank.lat <- c(45, 35, 35, 45)#
        blank.densities <- c(0, 0, 0, 0)#
        blank.point <- c(0, 0, 0, 0)#
        blank.human.frame <- data.frame(blank.ageGrid, blank.lat, blank.long, blank.densities, blank.densities, blank.point)#
        colnames(blank.human.frame) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale",  "point")#
        human.data <- rbind(human.data, blank.human.frame)#
        human.int <- heat.function.mean(human.data, x.res=x.res, y.res=y.res)
val.human.plot <- ggmap(map) +#
        geom_contour(data=human.int, aes(x=x, y=y, z=z), colour="red", alpha=0.2, binwidth=0.001)+#
        geom_tile(data=human.int, aes(x=x, y=y, fill=z,  alpha=z))+#
        coord_equal() +#
        coord_map() +#
        scale_alpha_continuous(range=c(0, 1), guide="none") +#
        scale_fill_gradient(name = "Latest Date", low="pink", high="red",  limits=c(0, 1)) +#
        scale_x_continuous("Longitude", limits=c(-10, 4)) +#
        scale_y_continuous("Latitude", limits=c(35, 45)) +#
        theme_tufte() +#
        ggtitle(paste(date.interval[200], " cal BP | Humans", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE, fill=FALSE)
val.human.plot
range(human.int$x)
range(human.int$y)
range(human.data$Long)
range(human.data$Lat)
human.data <- date.list[[200]]
range(human.data$Long)
human.data <- data.frame(human.data$ageGrid, human.data$Lat, human.data$Long, human.data$densities, human.data$DensityScale, human.data$point)#
        colnames(human.data) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale",  "point")
range(human.data$Long)
head(human.data)
head(date.list[[200]])
head(calibrated.date.frame)
date <- c(date, 100)#
        sigma <- c(sigma, 50)#
        lat <- c(lat, 0)#
        long <- c(long, 0)
head(lat)
col.data <- collapse.the.dates.new(sites=all.data$Site, region=all.data$Region, context=all.data$Country, dates=all.data$X14C.Yr.BP.uncal, sigma=all.data$Sigma, lat=all.data$Lat.in.Dec, long=all.data$Long.in.Dec, datemin=0, datemax=10000)#
map <- spain#
date <- col.data$CYrBPunc#
sigma <- col.data$Sigma#
lat <- col.data$Lat#
long <- col.data$Long#
interval <- 5#
x.res <- 50#
y.res <- 50#
land.file <- "/Users/lee/Dropbox/Documents/SCDPD/Maps/ne_110m_coastline"#
xmin <- 2950#
xmax <- 6950
head(long)
stack.14C.4D <- function(date, sigma, xmin, xmax, lat, long){#
        date <- c(date, 100)#
        sigma <- c(sigma, 50)#
        lat <- c(lat, 0)#
        long <- c(long, 0)#
        date.frame <- data.frame(date, sigma, lat, long)#
        names(date.frame) <- c("Date", "Sigma", "Lat", "Long")#
        date.frame <- date.frame[complete.cases(date.frame),]#
        date.sub <- subset(date.frame, (xmin-500) < Date & Date < (xmax + 500))#
        ids.cus = paste("Date", 1:length(date.sub$Date), sep = "")#
        coord.sub <- data.frame(ids.cus, date.sub$Lat, date.sub$Long)#
        names(coord.sub) <- c(".id", "Lat", "Long")#
        samp.intcal <- rep("intcal13", length(date.sub$Date))#
        samp.slugdens <- BchronCalibrate(date.sub$Date, date.sub$Sigma, samp.intcal)#
        samp.ages <- ldply(samp.slugdens, data.frame)#
        samp.ages <- subset(samp.ages, samp.ages$densities > .0015)#
        samp.test <- merge(x=samp.ages, y=coord.sub, by.x=".id", by.y=".id")#
        samp.test$DensityScale <- reshape::rescaler.default(samp.test$densities, type = "range")#
        return(samp.test)#
    }#
    land <- readOGR(land.file)#
    list_of_Lines <- slot(land, "lines")#
    land2 <-  SpatialPolygons(lapply(list_of_Lines, function(x) {#
        Polygons(list(Polygon(slot(slot(x, "Lines")[[1]], "coords"))),#
        ID=slot(x, "ID"))#
    }),#
    proj4string=CRS("+proj=longlat +ellps=WGS84"))#
    landset <- SpatialLines2PolySet(land)#
    polyland <- PolySet2SpatialPolygons(landset)#
    calibrated.date.frame <- stack.14C.4D(date=date, sigma=sigma, xmin=xmin, xmax=xmax, lat=lat, long=long)#
    calibrated.date.frame <- calibrated.date.frame[complete.cases(calibrated.date.frame),]#
    dateScrubOld <- function(dataframe, age.min, age.max) {#
        dataframe$point <- 0.1#
        dataframe$point[findInterval(dataframe$ageGrid, c(age.min,age.max)) == 1L] <- 1#
        dataframe$DensityPlot <- dataframe$DensityScale*dataframe$point#
        return(dataframe)#
    }#
    dateScrubBad <- function(dataframe, age.min, age.max) {#
        dataframe <- dataframe[complete.cases(dataframe),]#
        dataframe$point <- 0#
        dataframe$point[findInterval(dataframe$ageGrid, c(age.min,age.max)) == 1L] <- 1#
        dataframe.val <- subset(dataframe, dataframe$point==1)#
        dataframe.blank <- dataframe#
        dataframe.blank$densities <- dataframe.blank$densities*0#
        dataframe.blank$DensityScale <- dataframe.blank$DensityScale*0#
        dataframe.blank <- subset(dataframe.blank, dataframe$point==0)#
        all.ageGrid <- c(dataframe.val$ageGrid, dataframe.blank$ageGrid)#
        all.lat <- c(dataframe.val$Lat, dataframe.blank$Lat)#
        all.long <- c(dataframe.val$Long, dataframe.blank$Long)#
        all.densities <- c(dataframe.val$densities, dataframe.blank$densities)#
        all.densityscale <- c(dataframe.val$DensityScale, dataframe.blank$DensityScale)#
        all.legend <- c(as.vector(dataframe.val$Legend), as.vector(dataframe.blank$Legend))#
        full.date.frame <- data.frame(all.ageGrid,all.lat,all.long,all.densities, all.densityscale,all.legend)#
        colnames(full.date.frame) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale", "Legend")#
        full.date.frame <- full.date.frame[complete.cases(full.date.frame),]#
        return(full.date.frame)#
    }#
    dateScrub <- function(dataframe, age.min, age.max) {#
        dataframe$point <- 0#
        dataframe$point[findInterval(dataframe$ageGrid, c(age.min,age.max)) == 1L] <- 1#
        dataframe.val <- subset(dataframe, dataframe$point==1)#
        return(dataframe.val)#
    }#
    date.interval <- seq(from=xmin, to=xmax, by=interval)#
    date.interval <- rev(date.interval)#
    date.min <- date.interval-interval/2#
    date.max <- date.interval+interval/2#
    date.list <- pbapply::pblapply(date.interval, function(x) dateScrub(dataframe=calibrated.date.frame, age.min=x-interval/2, age.max=x+interval/2))#
    heat.function.min <- function(data.frame, x.res, y.res) {#
        data.frame <- data.frame[complete.cases(data.frame),]#
        data.frame.int <- with(data.frame, interp(x=Long, y=Lat, z=densities, duplicate="user", dupfun="max", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))#
        land.clip <- crop(data.map, polyland)#
        results <- land.clip@data#
        return(results)#
    }#
    heat.function.max <- function(data.frame, x.res, y.res) {#
        data.frame <- data.frame[complete.cases(data.frame),]#
        data.frame.int <- with(data.frame, interp(x=Long, y=Lat, z=densities, duplicate="user", dupfun="max", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))#
        land.clip <- crop(data.map, polyland)#
        results <- land.clip@data#
        return(results)#
    }#
    heat.function.mean <- function(data.frame, x.res, y.res) {#
        data.frame <- data.frame[complete.cases(data.frame),]#
        data.frame.int <- with(data.frame, interp(x=Long, y=Lat, z=DensityScale, duplicate="user", dupfun="mean", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))#
        land.clip <- crop(data.map, polyland)#
        results <- land.clip@data#
        results <- results[complete.cases(results),]#
        #results$zmod <- reshape::rescaler.default(results$z, type = "range")#
        return(results)#
    }
human.data <- date.list[[200]]#
        human.data <- data.frame(human.data$ageGrid, human.data$Lat, human.data$Long, human.data$densities, human.data$DensityScale, human.data$point)#
        colnames(human.data) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale",  "point")#
        blank.ageGrid <- c(0, 0, 0, 0)#
        blank.long <- c(-10, -10, 2.5, 2.5)#
        blank.lat <- c(45, 35, 35, 45)#
        blank.densities <- c(0, 0, 0, 0)#
        blank.point <- c(0, 0, 0, 0)#
        blank.human.frame <- data.frame(blank.ageGrid, blank.lat, blank.long, blank.densities, blank.densities, blank.point)#
        colnames(blank.human.frame) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale",  "point")#
        human.data <- rbind(human.data, blank.human.frame)#
        human.int <- heat.function.mean(human.data, x.res=x.res, y.res=y.res)
val.human.plot <- ggmap(map) +#
        geom_contour(data=human.int, aes(x=x, y=y, z=z), colour="red", alpha=0.2, binwidth=0.001)+#
        geom_tile(data=human.int, aes(x=x, y=y, fill=z,  alpha=z))+#
        coord_equal() +#
        coord_map() +#
        scale_alpha_continuous(range=c(0, 1), guide="none") +#
        scale_fill_gradient(name = "Latest Date", low="pink", high="red",  limits=c(0, 1)) +#
        scale_x_continuous("Longitude", limits=c(-10, 4)) +#
        scale_y_continuous("Latitude", limits=c(35, 45)) +#
        theme_tufte() +#
        ggtitle(paste(date.interval[200], " cal BP | Humans", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE, fill=FALSE)
val.human.plot
land <- readOGR(land.file)#
    list_of_Lines <- slot(land, "lines")#
    land2 <-  SpatialPolygons(lapply(list_of_Lines, function(x) {#
        Polygons(list(Polygon(slot(slot(x, "Lines")[[1]], "coords"))),#
        ID=slot(x, "ID"))#
    }),#
    proj4string=CRS("+proj=longlat +ellps=WGS84"))#
    landset <- SpatialLines2PolySet(land)#
    polyland <- PolySet2SpatialPolygons(landset)
str(polyland)
land.file <- "/Users/lee/Dropbox/Documents/University of Iowa/countries"
land <- readOGR(land.file)
str(land)
land <- subset(land, land@Country==c("Spain", "Portugal"))
head(land@data)
iberia.sub <- subset(land, land@data$COUNTRY==c("Spain", "Portugal"))
plot(iberia.sub)
v
land <- readOGR(land.file)#
    polyland <- subset(land, land@data$COUNTRY==c("Spain", "Portugal"))
human.data <- date.list[[200]]#
        human.data <- data.frame(human.data$ageGrid, human.data$Lat, human.data$Long, human.data$densities, human.data$DensityScale, human.data$point)#
        colnames(human.data) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale",  "point")#
        blank.ageGrid <- c(0, 0, 0, 0)#
        blank.long <- c(-10, -10, 2.5, 2.5)#
        blank.lat <- c(45, 35, 35, 45)#
        blank.densities <- c(0, 0, 0, 0)#
        blank.point <- c(0, 0, 0, 0)#
        blank.human.frame <- data.frame(blank.ageGrid, blank.lat, blank.long, blank.densities, blank.densities, blank.point)#
        colnames(blank.human.frame) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale",  "point")#
        human.data <- rbind(human.data, blank.human.frame)#
        human.int <- heat.function.mean(human.data, x.res=x.res, y.res=y.res)
data.frame <- human.data
data.frame <- data.frame[complete.cases(data.frame),]#
        data.frame.int <- with(data.frame, interp(x=Long, y=Lat, z=DensityScale, duplicate="user", dupfun="mean", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))
land.clip <- crop(data.map, polyland)
head(land.clip)
plot(polylabnd)
plot(plotland)
plot(polyland)
plot(data.map)
lines(polyland)
str(polyland)
?crop
land.clip <- crop(data.map, polyland)
?crop
str(data.map)
land.clip <- crop(data.map, polyland)
crop
land.clip <- sp::crop(data.map, polyland)
?crop
land.clip <- raster::crop(data.map, polyland)
land <- readOGR(land.file)#
    list_of_Lines <- slot(land, "lines")#
    land2 <-  SpatialPolygons(lapply(list_of_Lines, function(x) {#
        Polygons(list(Polygon(slot(slot(x, "Lines")[[1]], "coords"))),#
        ID=slot(x, "ID"))#
    }),#
    proj4string=CRS("+proj=longlat +ellps=WGS84"))#
    landset <- SpatialLines2PolySet(land)#
    polyland <- PolySet2SpatialPolygons(landset)
str(polyland)
polyland <- subset(land, land@data$COUNTRY==c("Spain", "Portugal"))
str(polyland)
land.clip <- over(data.map, polyland)
plot(land.clip)
Error: identicalCRS(x, y) is not TRUE
polyland@ proj4string
data.map@ proj4string
data.map@proj4string <- polyland@ proj4string
land.clip <- crop(data.map, polyland)
land.clip <- over(data.map, polyland)
plot(land.clip)
str(land.clip)
data.frame <- data.frame[complete.cases(data.frame),]#
        data.frame.int <- with(data.frame, interp(x=Long, y=Lat, z=DensityScale, duplicate="user", dupfun="mean", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
land.clip <- crop(data.map, polyland)
land.clip <- crop(data.map, polyland, drop=TRUE)
?crop
?over
land.clip <- over(polyland, data.map)
plot(land.clip)
quartz()
plot(land.clip)
str(land.clip)
land.clip <- over(data.map, polyland)
str(land.clip)
land.clip <- crop(data.map, as(ply, polyland))
land.clip <- crop(data.map, as(polyland, "SpatialPolygons"))
plot(land.clip)
quartz()
plot(land.clip)
heat.function.mean <- function(data.frame, x.res, y.res) {#
        data.frame <- data.frame[complete.cases(data.frame),]#
        data.frame.int <- with(data.frame, interp(x=Long, y=Lat, z=DensityScale, duplicate="user", dupfun="mean", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))#
        land.clip <- crop(data.map, as(polyland, "SpatialPolygons")#
        results <- land.clip@data#
        results <- results[complete.cases(results),]#
        #results$zmod <- reshape::rescaler.default(results$z, type = "range")#
        return(results)#
    }
heat.function.mean <- function(data.frame, x.res, y.res) {#
        data.frame <- data.frame[complete.cases(data.frame),]#
        data.frame.int <- with(data.frame, interp(x=Long, y=Lat, z=DensityScale, duplicate="user", dupfun="mean", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))#
        land.clip <- crop(data.map, as(polyland, "SpatialPolygons"))#
        results <- land.clip@data#
        results <- results[complete.cases(results),]#
        #results$zmod <- reshape::rescaler.default(results$z, type = "range")#
        return(results)#
    }
human.data <- date.list[[200]]#
        human.data <- data.frame(human.data$ageGrid, human.data$Lat, human.data$Long, human.data$densities, human.data$DensityScale, human.data$point)#
        colnames(human.data) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale",  "point")#
        blank.ageGrid <- c(0, 0, 0, 0)#
        blank.long <- c(-10, -10, 2.5, 2.5)#
        blank.lat <- c(45, 35, 35, 45)#
        blank.densities <- c(0, 0, 0, 0)#
        blank.point <- c(0, 0, 0, 0)#
        blank.human.frame <- data.frame(blank.ageGrid, blank.lat, blank.long, blank.densities, blank.densities, blank.point)#
        colnames(blank.human.frame) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale",  "point")#
        human.data <- rbind(human.data, blank.human.frame)
human.int <- heat.function.mean(human.data, x.res=x.res, y.res=y.res)
val.human.plot <- ggmap(map) +#
        geom_contour(data=human.int, aes(x=x, y=y, z=z), colour="red", alpha=0.2, binwidth=0.001)+#
        geom_tile(data=human.int, aes(x=x, y=y, fill=z,  alpha=z))+#
        coord_equal() +#
        coord_map() +#
        scale_alpha_continuous(range=c(0, 1), guide="none") +#
        scale_fill_gradient(name = "Latest Date", low="pink", high="red",  limits=c(0, 1)) +#
        scale_x_continuous("Longitude", limits=c(-10, 4)) +#
        scale_y_continuous("Latitude", limits=c(35, 45)) +#
        theme_tufte() +#
        ggtitle(paste(date.interval[200], " cal BP | Humans", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE, fill=FALSE)
quartz()
val.human.plot
mapGenHeatDensity <- function(map, date, sigma, xmin, xmax, lat, long, interval, x.res, y.res, land.file) {#
    stack.14C.4D <- function(date, sigma, xmin, xmax, lat, long){#
        date <- c(date, 100)#
        sigma <- c(sigma, 50)#
        lat <- c(lat, 0)#
        long <- c(long, 0)#
        date.frame <- data.frame(date, sigma, lat, long)#
        names(date.frame) <- c("Date", "Sigma", "Lat", "Long")#
        date.frame <- date.frame[complete.cases(date.frame),]#
        date.sub <- subset(date.frame, (xmin-500) < Date & Date < (xmax + 500))#
        ids.cus = paste("Date", 1:length(date.sub$Date), sep = "")#
        coord.sub <- data.frame(ids.cus, date.sub$Lat, date.sub$Long)#
        names(coord.sub) <- c(".id", "Lat", "Long")#
        samp.intcal <- rep("intcal13", length(date.sub$Date))#
        samp.slugdens <- BchronCalibrate(date.sub$Date, date.sub$Sigma, samp.intcal)#
        samp.ages <- ldply(samp.slugdens, data.frame)#
        samp.ages <- subset(samp.ages, samp.ages$densities > .0015)#
        samp.test <- merge(x=samp.ages, y=coord.sub, by.x=".id", by.y=".id")#
        samp.test$DensityScale <- reshape::rescaler.default(samp.test$densities, type = "range")#
        return(samp.test)#
    }#
    land <- readOGR(land.file)#
    polyland <- subset(land, land@data$COUNTRY==c("Spain", "Portugal"))#
    calibrated.date.frame <- stack.14C.4D(date=date, sigma=sigma, xmin=xmin, xmax=xmax, lat=lat, long=long)#
    calibrated.date.frame <- calibrated.date.frame[complete.cases(calibrated.date.frame),]#
    dateScrubOld <- function(dataframe, age.min, age.max) {#
        dataframe$point <- 0.1#
        dataframe$point[findInterval(dataframe$ageGrid, c(age.min,age.max)) == 1L] <- 1#
        dataframe$DensityPlot <- dataframe$DensityScale*dataframe$point#
        return(dataframe)#
    }#
    dateScrubBad <- function(dataframe, age.min, age.max) {#
        dataframe <- dataframe[complete.cases(dataframe),]#
        dataframe$point <- 0#
        dataframe$point[findInterval(dataframe$ageGrid, c(age.min,age.max)) == 1L] <- 1#
        dataframe.val <- subset(dataframe, dataframe$point==1)#
        dataframe.blank <- dataframe#
        dataframe.blank$densities <- dataframe.blank$densities*0#
        dataframe.blank$DensityScale <- dataframe.blank$DensityScale*0#
        dataframe.blank <- subset(dataframe.blank, dataframe$point==0)#
        all.ageGrid <- c(dataframe.val$ageGrid, dataframe.blank$ageGrid)#
        all.lat <- c(dataframe.val$Lat, dataframe.blank$Lat)#
        all.long <- c(dataframe.val$Long, dataframe.blank$Long)#
        all.densities <- c(dataframe.val$densities, dataframe.blank$densities)#
        all.densityscale <- c(dataframe.val$DensityScale, dataframe.blank$DensityScale)#
        all.legend <- c(as.vector(dataframe.val$Legend), as.vector(dataframe.blank$Legend))#
        full.date.frame <- data.frame(all.ageGrid,all.lat,all.long,all.densities, all.densityscale,all.legend)#
        colnames(full.date.frame) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale", "Legend")#
        full.date.frame <- full.date.frame[complete.cases(full.date.frame),]#
        return(full.date.frame)#
    }#
    dateScrub <- function(dataframe, age.min, age.max) {#
        dataframe$point <- 0#
        dataframe$point[findInterval(dataframe$ageGrid, c(age.min,age.max)) == 1L] <- 1#
        dataframe.val <- subset(dataframe, dataframe$point==1)#
        return(dataframe.val)#
    }#
    date.interval <- seq(from=xmin, to=xmax, by=interval)#
    date.interval <- rev(date.interval)#
    date.min <- date.interval-interval/2#
    date.max <- date.interval+interval/2#
    date.list <- pbapply::pblapply(date.interval, function(x) dateScrub(dataframe=calibrated.date.frame, age.min=x-interval/2, age.max=x+interval/2))#
    heat.function.min <- function(data.frame, x.res, y.res) {#
        data.frame <- data.frame[complete.cases(data.frame),]#
        data.frame.int <- with(data.frame, interp(x=Long, y=Lat, z=densities, duplicate="user", dupfun="max", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))#
        land.clip <- crop(data.map, polyland)#
        results <- land.clip@data#
        return(results)#
    }#
    heat.function.max <- function(data.frame, x.res, y.res) {#
        data.frame <- data.frame[complete.cases(data.frame),]#
        data.frame.int <- with(data.frame, interp(x=Long, y=Lat, z=densities, duplicate="user", dupfun="max", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))#
        land.clip <- crop(data.map, polyland)#
        results <- land.clip@data#
        return(results)#
    }#
    heat.function.mean <- function(data.frame, x.res, y.res) {#
        data.frame <- data.frame[complete.cases(data.frame),]#
        data.frame.int <- with(data.frame, interp(x=Long, y=Lat, z=DensityScale, duplicate="user", dupfun="mean", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))#
        land.clip <- crop(data.map, as(polyland, "SpatialPolygons"))#
        results <- land.clip@data#
        results <- results[complete.cases(results),]#
        #results$zmod <- reshape::rescaler.default(results$z, type = "range")#
        return(results)#
    }#
    animation::ani.options(convert="/usr/local/bin/convert")#
    animation::saveVideo(expr=for (i in seq_along(date.interval)) {#
        human.data <- date.list[[i]]#
        human.data <- data.frame(human.data$ageGrid, human.data$Lat, human.data$Long, human.data$densities, human.data$DensityScale, human.data$point)#
        colnames(human.data) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale",  "point")#
        blank.ageGrid <- c(0, 0, 0, 0)#
        blank.long <- c(-10, -10, 2.5, 2.5)#
        blank.lat <- c(45, 35, 35, 45)#
        blank.densities <- c(0, 0, 0, 0)#
        blank.point <- c(0, 0, 0, 0)#
        blank.human.frame <- data.frame(blank.ageGrid, blank.lat, blank.long, blank.densities, blank.densities, blank.point)#
        colnames(blank.human.frame) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale",  "point")#
        human.data <- rbind(human.data, blank.human.frame)#
        human.int <- heat.function.mean(human.data, x.res=x.res, y.res=y.res)#
        blank.human.plot <- ggmap(map) +#
        coord_equal() +#
        coord_map() +#
        scale_x_continuous("Longitude", limits=c(-10, 4)) +#
        scale_y_continuous("Latitude", limits=c(35, 45)) +#
        theme_tufte() +#
        ggtitle(paste(date.interval[i], " cal BP | Humans", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE, fill=FALSE)#
        val.human.plot <- ggmap(map) +#
        geom_contour(data=human.int, aes(x=x, y=y, z=z), colour="red", alpha=0.2, binwidth=0.001)+#
        geom_tile(data=human.int, aes(x=x, y=y, fill=z,  alpha=z))+#
        coord_equal() +#
        coord_map() +#
        scale_alpha_continuous(range=c(0, 1), guide="none") +#
        scale_fill_gradient(name = "Latest Date", low="pink", high="red",  limits=c(0, 1)) +#
        scale_x_continuous("Longitude", limits=c(-10, 4)) +#
        scale_y_continuous("Latitude", limits=c(35, 45)) +#
        theme_tufte() +#
        ggtitle(paste(date.interval[i], " cal BP | Humans", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE, fill=FALSE)#
        human.z <- sum(human.int$z)#
        human.plot <- if(human.z==0) {#
            blank.human.plot#
        } else {#
            val.human.plot#
        }#
        ggsave(layOut(list(human.plot, 1:50, 1:50),#
        list(megafauna.plot, 1:50, 51:100)), filename=paste("/Users/lee/Dropbox/Documents/University of Iowa/Map Runs/map",num[i], ".tiff", sep=""), device="tiff", dpi=320, width=7, height=7)#
    }, video.name="iberia.mp4", img.name="map")#
    #ffmpeg -f image2 -i map%06d.tif -vcodec mjpeg -q:v 0 -r 25 iberia.mov#
}
mapGenHeatDensity(map=spain, date=col.data$CYrBPunc, sigma=col.data$Sigma, lat=col.data$Lat.in.Dec, long=col.data$Long.in.Dec, interval=5, x.res=250, y.res=250, land.file="/Users/lee/Dropbox/Documents/SCDPD/Maps/ne_110m_coastline", xmin=2950, xmax=6950)
land.file <- "/Users/lee/Dropbox/Documents/University of Iowa/countries"
mapGenHeatDensity(map=spain, date=col.data$CYrBPunc, sigma=col.data$Sigma, lat=col.data$Lat.in.Dec, long=col.data$Long.in.Dec, interval=5, x.res=250, y.res=250, land.file="/Users/lee/Dropbox/Documents/University of Iowa/countries", xmin=2950, xmax=6950)
traceback()
head(date)
stack.14C.4D <- function(date, sigma, xmin, xmax, lat, long){#
        date <- c(date, 100)#
        sigma <- c(sigma, 50)#
        lat <- c(lat, 0)#
        long <- c(long, 0)#
        date.frame <- data.frame(date, sigma, lat, long)#
        names(date.frame) <- c("Date", "Sigma", "Lat", "Long")#
        date.frame <- date.frame[complete.cases(date.frame),]#
        date.sub <- subset(date.frame, (xmin-500) < Date & Date < (xmax + 500))#
        ids.cus = paste("Date", 1:length(date.sub$Date), sep = "")#
        coord.sub <- data.frame(ids.cus, date.sub$Lat, date.sub$Long)#
        names(coord.sub) <- c(".id", "Lat", "Long")#
        samp.intcal <- rep("intcal13", length(date.sub$Date))#
        samp.slugdens <- BchronCalibrate(date.sub$Date, date.sub$Sigma, samp.intcal)#
        samp.ages <- ldply(samp.slugdens, data.frame)#
        samp.ages <- subset(samp.ages, samp.ages$densities > .0015)#
        samp.test <- merge(x=samp.ages, y=coord.sub, by.x=".id", by.y=".id")#
        samp.test$DensityScale <- reshape::rescaler.default(samp.test$densities, type = "range")#
        return(samp.test)#
    }#
    land <- readOGR(land.file)#
    polyland <- subset(land, land@data$COUNTRY==c("Spain", "Portugal"))#
    calibrated.date.frame <- stack.14C.4D(date=date, sigma=sigma, xmin=xmin, xmax=xmax, lat=lat, long=long)
col.data <- collapse.the.dates.new(sites=all.data$Site, region=all.data$Region, context=all.data$Country, dates=all.data$X14C.Yr.BP.uncal, sigma=all.data$Sigma, lat=all.data$Lat.in.Dec, long=all.data$Long.in.Dec, datemin=0, datemax=10000)#
map <- spain#
date <- col.data$CYrBPunc#
sigma <- col.data$Sigma#
lat <- col.data$Lat#
long <- col.data$Long#
interval <- 5#
x.res <- 50#
y.res <- 50#
land.file <- "/Users/lee/Dropbox/Documents/University of Iowa/countries"#
xmin <- 2950#
xmax <- 6950
date <- c(date, 100)#
        sigma <- c(sigma, 50)#
        lat <- c(lat, 0)#
        long <- c(long, 0)#
        date.frame <- data.frame(date, sigma, lat, long)#
        names(date.frame) <- c("Date", "Sigma", "Lat", "Long")#
        date.frame <- date.frame[complete.cases(date.frame),]#
        date.sub <- subset(date.frame, (xmin-500) < Date & Date < (xmax + 500))#
        ids.cus = paste("Date", 1:length(date.sub$Date), sep = "")#
        coord.sub <- data.frame(ids.cus, date.sub$Lat, date.sub$Long)#
        names(coord.sub) <- c(".id", "Lat", "Long")
head(coord.sub)
samp.intcal <- rep("intcal13", length(date.sub$Date))#
        samp.slugdens <- BchronCalibrate(date.sub$Date, date.sub$Sigma, samp.intcal)#
        samp.ages <- ldply(samp.slugdens, data.frame)
head(data.frame)
#Erase everything that comes before#
rm(list = ls(all = TRUE))#
#
#packrat::init("~/Dropbox/4.2 ky event/Data Analysis/R Code/For Distribution/Neolithic")#
#
#Compatibility#
if(.Platform$OS.type=="windows") {#
    quartz<-function() windows()#
}#
#
###Load Packages#
library(TTR)#
library(ggplot2)#
library(gridExtra)#
library(scales)#
library(gtable)#
library(wq)#
library(Bchron)#
library(plyr)#
library(bcp)#
#library(mgcv)#
library(reshape)#
library(akima)#
library(ggmap)#
library(ggthemes)#
library(pbapply)#
library(colorRamps)#
library(grDevices)#
library(sp)#
library(PBSmapping)#
library(raster)#
library(maptools)#
library(rgeos)#
library(rgdal)#
###Download Packages (if needed) at http://www.bleedrake.com/Neolithic/Neolithic.zip#
#
###Load Data#
iberia.koppen <- read.csv(file="/Users/lee/Dropbox/Documents/University of Iowa/4.2 ky event/Radiocarbon Final/Iberia_Koppen/Sheet 1-Table 1.csv")#
#
###Load Calibration Curves#
intcal.13 <- read.csv(file="http://www.bleedrake.com/Neolithic/intcal13.csv")#
#####Collapse Dates#
collapse.the.dates.begin <- function(sites, biogeo, general, dates, sigma, lat, long) {#
    n.t <- rep(100, length(sites))#
    df <- data.frame(sites, biogeo, general, dates, sigma, lat, long)#
    colnames(df) <- c("Site", "Biogeo_Uni", "St_Area_NE", "CYrBPunc", "Sigma", "Lat", "Long")#
    df <- arrange(df, desc(CYrBPunc))#
    df <- arrange(df, desc(Site))#
    df <- arrange(df, desc(Biogeo_Uni))#
    df <- arrange(df, desc(St_Area_NE))#
    df$Ttest <- c(#
    (abs(df[1:(nrow(df)-1),4]-df[2:nrow(df), 4]))/((sqrt(df[2:nrow(df), 5]^2 + df[1:(nrow(df)-1),5]^2)*sqrt(1/100))), NA)#
    df$pvalue <- c((2*pt(df[1:nrow(df),6], 100, lower=FALSE)))#
    df$Collapse <- rep("No", length(sites))#
    df <- transform(df, Collapse = ifelse(pvalue > 0.05, "Yes", Collapse))#
    df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
    df <- as.data.frame(df)#
    df <- df[complete.cases(df),]#
    return(df)#
}#
#
neolithic.bio <- collapse.the.dates.begin(sites=iberia.koppen$Site, biogeo=iberia.koppen$Koppen, general=iberia.koppen$Region, dates=iberia.koppen$CYrBPunc, sigma=iberia.koppen$Sigma, lat=iberia.koppen$Lat, long=iberia.koppen$Long_)#
###Create vectors from data set by region#
####################################################
#######Calibration & Confidence Band Function#######
####################################################
#
###Multicore apply function with status bar#
mcpblapply <- function (X, FUN, ..., mc.preschedule = TRUE, mc.set.seed = TRUE,#
mc.silent = FALSE, mc.cores = getOption("mc.cores", 2L),#
mc.cleanup = TRUE, mc.allow.recursive = TRUE, USE.NAMES = TRUE, simplify = TRUE)#
{#
    FUN <- match.fun(FUN)#
    if (!is.vector(X) || is.object(X))#
    X <- as.list(X)#
    B <- length(X)#
    if (!(interactive() && dopb() && B >= 1))#
    return(mclapply(X, FUN, ...#
    ))#
    pb <- startpb(0, B)#
    rval <- vector("list", B)#
    for (i in 1:B) {#
        rval[i] <- list(FUN(X[[i]], ...))#
        setpb(pb, i)#
    }#
    close(pb)#
    names(rval) <- names(X)#
    rval#
}#
#
mcpbsapply <- function (X, FUN, ..., mc.preschedule = TRUE, mc.set.seed = TRUE,#
mc.silent = FALSE, mc.cores = getOption("mc.cores", 2L),#
mc.cleanup = TRUE, mc.allow.recursive = TRUE, USE.NAMES = TRUE, simplify = TRUE)#
{#
    FUN <- match.fun(FUN)#
    answer <- mcpblapply(X = X, FUN = FUN,  ..., USE.NAMES = TRUE)#
    if (USE.NAMES && is.character(X) && is.null(names(answer)))#
    names(answer) <- X#
    if (!identical(simplify, FALSE) && length(answer))#
    simplify2array(answer, higher = (simplify == "array"))#
    else answer#
}#
#
mcreplicate <- function(n, expr, simplify = "array", mc.cores = getOption("mc.cores", 2L)) {#
    mcpbsapply(integer(n), eval.parent(substitute(function(...) expr)), mc.cores = getOption("mc.cores", 2L),#
    simplify = simplify)#
}#
conf.loess <- function(x, sigma, n, reps, xmin, xmax) {#
    samp.intcal <- rep("intcal13", length(x))#
    samp.slugdens <- BchronCalibrate(x, sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    res.by <- by(samp.ages$ageGrid, samp.ages$.id, median)#
    res.t <- t(res.by)#
    samp.age.grid <- c(samp.ages$ageGrid, xmin, xmax)#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.grid <- sort(samp.age.grid, decreasing=TRUE)#
    samp.grid <- samp.grid[samp.grid < xmax & samp.grid > xmin]#
    samp.hist <- hist(samp.grid, breaks=length(time))#
    samp.hist <- data.frame(time, samp.hist$counts, samp.hist$counts/sum(samp.hist$counts))#
    colnames(samp.hist) <- c("Age", "Counts", "Density")#
    #samp.hist <- arrange(samp.all, desc(Age))#
    makeloess <- function(x, n){#
        time <- seq(xmin+5, xmax-5, 10)#
        samp.age <- sample(x, size=n, replace=TRUE)#
        samp.dist <- sapply(1:n, function(x) rnorm(500, samp.age, 85))#
        samp.dist <- as.vector(samp.dist)#
        samp.dist <- c(xmax, xmin, samp.dist)#
        samp.date <- tapply(samp.dist, cut(samp.dist, length(time)), length)#
        samp.loess <- lowess(time, samp.date, f=0.15)#
        samp.fitted <- samp.loess$y#
        return(samp.fitted)#
    }#
    samp.replicate <- (replicate(reps, makeloess(res.t, n)))#
    samp.replicate <- as.data.frame(samp.replicate)#
    samp.replicate[is.na(samp.replicate)] <- 0#
    samp.replicate <- sweep(samp.replicate,2,colSums(samp.replicate),`/`)#
    samp.results.replicate <- transform(samp.replicate, MEAN=apply(samp.replicate,1, mean, na.rm = TRUE))#
    samp.results.replicate <- transform(samp.results.replicate, SD=apply(samp.results.replicate,1, sd, na.rm = TRUE))#
    samp.descriptive <- data.frame(time, samp.results.replicate$MEAN, samp.results.replicate$SD)#
    colnames(samp.descriptive) <- c("Age", "Mean", "SD")#
    #samp.descriptive <- arrange(samp.descriptive, desc(Age))#
    samp.all <- data.frame(time, samp.hist$Density, samp.hist$Counts, samp.descriptive$Mean, samp.descriptive$SD, samp.replicate)#
    names(samp.all)[names(samp.all)=="time"] <- "Age"#
    names(samp.all)[names(samp.all)=="samp.descriptive.Mean"] <- "Mean"#
    names(samp.all)[names(samp.all)=="samp.descriptive.SD"] <- "SD"#
    names(samp.all)[names(samp.all)=="samp.hist.Density"] <- "Density"#
    names(samp.all)[names(samp.all)=="samp.hist.Counts"] <- "Counts"#
    samp.all <- arrange(samp.all, desc(Age))#
    return(samp.all)#
}#
######Function to Generate Confidence Bands around SCDRD#
conf.cal.loess <- function(dates, sigma, n, reps, sites, xmin, xmax, ..., cores = getOption("mc.cores", 2L), collapse.dates=FALSE) {#
    collapse.the.dates <- function(sites, dates, sigma) {#
        n.t <- rep(100, length(sites))#
        df <- data.frame(sites, dates, sigma)#
        colnames(df) <- c("Sites", "Date", "Sigma")#
        df <- arrange(df, desc(Date))#
        df <- arrange(df, desc(Sites))#
        df$Ttest <- c(#
        (abs(df[1:(nrow(df)-1),2]-df[2:nrow(df), 2]))/((sqrt(df[2:nrow(df), 3]^2 + df[1:(nrow(df)-1),3]^2)*sqrt(1/100))), NA)#
        df$pvalue <- c((2*pt(df[1:nrow(df),4], 100, lower=FALSE)))#
        df$Collapse <- rep("No", length(sites))#
        df <- transform(df, Collapse = ifelse(pvalue > 0.05, "Yes", Collapse))#
        df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
        df <- as.data.frame(df)#
        df <- df[complete.cases(df),]#
        return(df)#
    }#
    uncollapse.the.dates <- function(sites, dates, sigma) {#
        df <- data.frame(sites, dates, sigma)#
        colnames(df) <- c("Sites", "Date", "Sigma")#
        return(df)#
    }#
    date.data <- if(isTRUE(collapse.dates)){#
        collapse.the.dates(sites, dates, sigma)#
    } else {#
        uncollapse.the.dates(sites, dates, sigma)#
    }#
    samp.intcal <- rep("intcal13", length(date.data$Date))#
    samp.slugdens <- BchronCalibrate(date.data$Date, date.data$Sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    res.by <- by(samp.ages$ageGrid, samp.ages$.id, median)#
    res.t <- t(res.by)#
    fill <- seq(xmin, xmax, 1)#
    samp.age.grid <- c(samp.ages$ageGrid, fill)#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.grid <- sort(samp.age.grid, decreasing=TRUE)#
    samp.grid <- samp.grid[samp.grid < xmax & samp.grid > xmin]#
    samp.hist <- hist(samp.grid, breaks=length(time))#
    samp.hist <- data.frame(time, samp.hist$counts, samp.hist$counts/sum(samp.hist$counts))#
    colnames(samp.hist) <- c("Age", "Counts", "Density")#
    #samp.hist <- arrange(samp.all, desc(Age))#
    makeloess <- function(dates, n){#
        time <- seq(xmin+5, xmax-5, 10)#
        n.s <- length(dates)#
        samp.order <- sample(n.s, size=n, replace=TRUE)#
        samp.dist.n <- samp.slugdens[samp.order]#
        temp.ages <- ldply(samp.dist.n, data.frame)#
        temp.age.grid <- c(temp.ages$ageGrid, fill)#
        temp.grid <- temp.age.grid[temp.age.grid < xmax & samp.grid > xmin]#
        samp.dist <- c(fill, temp.grid)#
        samp.dist <- as.vector(samp.dist)#
        samp.dist <- c(xmax, xmin, samp.dist)#
        samp.date <- tapply(samp.dist, cut(samp.dist, length(time)), length)#
        samp.loess <- lowess(time, samp.date, f=0.15)#
        samp.fitted <- samp.loess$y#
        return(samp.fitted)#
    }#
    samp.replicate <- (mcreplicate(reps, makeloess(dates, n)))#
    samp.replicate.dat <- as.data.frame(samp.replicate)#
    samp.replicate.dat[is.na(samp.replicate.dat)] <- 0#
    samp.replicated <- sweep(samp.replicate.dat,2,colSums(samp.replicate.dat),`/`)#
    samp.results.replicated.m <- transform(samp.replicated, MEAN=apply(X=samp.replicated, MARGIN=1, FUN=mean, na.rm = TRUE))#
    samp.results.replicated.s <- transform(samp.replicated, SD=apply(X=samp.replicated, MARGIN=1, FUN=sd, na.rm = TRUE))#
    samp.descriptive <- data.frame(time, samp.results.replicated.m$MEAN, samp.results.replicated.s$SD)#
    colnames(samp.descriptive) <- c("Age", "Mean", "SD")#
    #samp.descriptive <- arrange(samp.descriptive, desc(Age))#
    samp.all <- data.frame(time, samp.hist$Density, samp.hist$Counts, samp.descriptive$Mean, samp.descriptive$SD)#
    names(samp.all)[names(samp.all)=="time"] <- "Age"#
    names(samp.all)[names(samp.all)=="samp.descriptive.Mean"] <- "Mean"#
    names(samp.all)[names(samp.all)=="samp.descriptive.SD"] <- "SD"#
    names(samp.all)[names(samp.all)=="samp.hist.Density"] <- "Density"#
    names(samp.all)[names(samp.all)=="samp.hist.Counts"] <- "Counts"#
    samp.all <- arrange(samp.all, desc(Age))#
    return(samp.all)#
}#
#
###Traditional SCDPD#
BchronDensityCollapse <- function (dates, sigma, sites,  dfs = rep(100, length(dates)), numMix = 30,#
iterations = 10000, burn = 2000, thin = 8, updateAges = FALSE, collapse.dates=FALSE)#
{#
    collapse.the.dates <- function(sites, dates, sigma) {#
        n.t <- rep(100, length(sites))#
        df <- data.frame(sites, dates, sigma)#
        colnames(df) <- c("Sites", "Date", "Sigma")#
        df <- arrange(df, desc(Date))#
        df <- arrange(df, desc(Sites))#
        df$Ttest <- c(#
        (abs(df[1:(nrow(df)-1),2]-df[2:nrow(df), 2]))/((sqrt(df[2:nrow(df), 3]^2 + df[1:(nrow(df)-1),3]^2)*sqrt(1/100))), NA)#
        df$pvalue <- c((2*pt(df[1:nrow(df),4], 100, lower=FALSE)))#
        df$Collapse <- rep("No", length(sites))#
        df <- transform(df, Collapse = ifelse(pvalue > 0.05, "Yes", Collapse))#
        df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
        return(df)#
    }#
    uncollapse.the.dates <- function(sites, dates, sigma) {#
        df <- data.frame(sites, dates, sigma)#
        colnames(df) <- c("Sites", "Date", "Sigma")#
        return(df)#
    }#
    date.data <- if(isTRUE(collapse.dates)){#
        collapse.the.dates(sites, dates, sigma)#
    } else {#
        uncollapse.the.dates(sites, dates, sigma)#
    }#
    pathToCalCurves = system.file("data",#
    package = "Bchron")#
    calCurves <- rep("intcal13", length(date.data$Date))#
    ages <- date.data$Date#
    ageSds <- date.data$Sigma#
    if (length(ages) != length(ageSds))#
    stop("ages and 1-sigma errors must be same length")#
    if (length(ages) != length(calCurves))#
    stop("ages and Calibration curves must be same length")#
    x = BchronCalibrate(ages = ages, ageSds = ageSds, calCurves = calCurves,#
    pathToCalCurves = pathToCalCurves, eps = 0, dfs = rep(100,#
    length(ages)))#
    xSmall = BchronCalibrate(ages = ages, ageSds = ageSds, calCurves = calCurves,#
    pathToCalCurves = pathToCalCurves, dfs = rep(100, length(ages)))#
    n = length(x)#
    thetaRange = range(xSmall[[1]]$ageGrid)#
    for (i in 2:n) thetaRange = range(c(thetaRange, xSmall[[i]]$ageGrid))#
    offset = vector(length = n)#
    for (i in 1:n) {#
        offset[i] = ifelse(x[[i]]$calCurve == "normal", 61, 0)#
    }#
    gauss <- function(x, mu, sig) {#
        u <- (x - mu)/sig#
        y <- exp(-u * u/2)#
        y#
    }#
    gbase <- function(x, mus) {#
        sig <- (mus[2] - mus[1])/2#
        G <- outer(x, mus, gauss, sig)#
        G#
    }#
    clrInv = function(phi) {#
        return(exp(phi)/sum(exp(phi)))#
    }#
    J = numMix#
    mu = seq(thetaRange[1], thetaRange[2], length = numMix)#
    theta = vector(length = n)#
    for (j in 1:n) theta[j] = round(stats::rnorm(1, mean = x[[j]]$ageGrid[match(max(x[[j]]$densities),#
    x[[j]]$densities)], sd = ageSds[j]), 3)#
    phi = c(stats::runif(J - 1, -10, 10), 0)#
    p = as.numeric(clrInv(phi))#
    G = gbase(theta, mu)#
    remaining = (iterations - burn)/thin#
    thetaStore = matrix(ncol = length(theta), nrow = remaining)#
    pStore = matrix(ncol = J, nrow = remaining)#
    thetaAll = matrix(NA, ncol = n, nrow = iterations)#
    for (j in 1:n) thetaAll[, j] = sample(xSmall[[j]]$ageGrid,#
    size = iterations, prob = xSmall[[j]]$densities, replace = TRUE)#
    mu2 = mu#
    sigma2 = (mu[2] - mu[1])/2#
    my_dnorm = function(x) stats::dnorm(x, mean = mu2, sd = sigma2)#
    pb = utils::txtProgressBar(min = 1, max = iterations, style = 3,#
    width = 60, title = "Running BchronDensity")#
    for (i in 1:iterations) {#
        utils::setTxtProgressBar(pb, i)#
        if (i > burn & i%%thin == 0) {#
            ind = (i - burn)/thin#
            thetaStore[ind, ] = theta#
            pStore[ind, ] = p#
        }#
        if (updateAges) {#
            for (j in 1:n) {#
                thetaNew = round(stats::rnorm(1, theta[j], 0.5),#
                3)#
                thetaNewMatch = as.integer(thetaNew + offset[j]) +#
                1#
                thetaNewLogDens = max(log(x[[j]]$densities[thetaNewMatch]),#
                -1e+06)#
                priorNew.dens = sum(p * stats::dnorm(thetaNew,#
                mean = mu2, sd = sigma2))#
                thetaMatch = as.integer(theta[j] + offset[j]) +#
                1#
                thetaLogDens = max(log(x[[j]]$densities[thetaMatch]),#
                -1e+06)#
                priorDens = sum(p * stats::dnorm(theta[j], mean = mu2,#
                sd = sigma2))#
                logRtheta = thetaNewLogDens - thetaLogDens +#
                log(priorNew.dens) - log(priorDens)#
                if (stats::runif(1) < exp(logRtheta))#
                theta[j] = thetaNew#
            }#
        }#
        else {#
            theta = thetaAll[i, ]#
        }#
        for (j in 1:(J - 1)) {#
            phiNew = stats::rnorm(1, phi[j], 1)#
            phiAllNew = phi#
            phiAllNew[j] = phiNew#
            pNew = as.numeric(clrInv(phiAllNew))#
            phiNewLogDens = sum(log(G %*% pNew))#
            phiLogDens = sum(log(G %*% p))#
            logRphi = phiNewLogDens - phiLogDens + stats::dunif(phiNew,#
            -10, 10, log = TRUE) - stats::dunif(phi[j], -10,#
            10, log = TRUE)#
            if (stats::runif(1) < exp(logRphi)) {#
                phi[j] = phiNew#
                p = as.numeric(clrInv(phi))#
            }#
        }#
    }#
    output = list(theta = thetaStore, p = pStore, mu = mu, calAges = xSmall,#
    G = G)#
    class(output) = "BchronDensityRun"#
    return(output)#
}#
#
###Function to modify existing SCDPD from BchronDensity (modified from Bchron)#
SlugDens.t <- function (x, xmin, xmax)#
{#
    n = length(x$calAges)#
    thetaRange = range(x$calAges[[1]]$ageGrid)#
    for (i in 2:n) thetaRange = range(c(thetaRange, x$calAges[[i]]$ageGrid))#
    dateGrid = seq(xmin, xmax, length = 1000)#
    gauss <- function(x, mu, sig) {#
        u <- (x - mu)/sig#
        y <- exp(-u * u/2)#
        y#
    }#
    gbase <- function(x, mus) {#
        sig <- (mus[2] - mus[1])/2#
        G <- outer(x, mus, gauss, sig)#
        G#
    }#
    Gstar = gbase(dateGrid, x$mu)#
    dens = vector(length = length(dateGrid))#
    for (i in 1:nrow(x$p)) {#
        dens = dens + Gstar %*% x$p[i, ]#
    }#
    densFinal = dens/sum(dens)#
    slugbase <- data.frame(dateGrid,densFinal)#
    colnames(slugbase) <- c("Age", "Density")#
    slugbase <- arrange(slugbase, desc(Age))#
    return(slugbase)#
}#
#
SlugSig <- function(x, sigma, n, reps, xmin, xmax) {#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.intcal <- rep("intcal13", length(x))#
    samp.slugdens <- BchronDensity(x, sigma, samp.intcal, numMix = 30, iterations=10000, burn=2000, thin=8, updateAges=FALSE)#
    samp.hist <- SlugDens.t(samp.slugdens, xmin, xmax)#
    makeloess <- function(x, n){#
        time <- seq(xmin+5, xmax-5, 10)#
        samp.14C <- sample(x, size=n, replace=TRUE)#
        samp.sig <- sample(sigma, size=n, replace=TRUE)#
        samp.dist.n <- BchronDensity(samp.14C, samp.sig, rep("intcal13", n), numMix = 30, iterations=10000, burn=2000, thin=8, updateAges=FALSE)#
        samp.dist <- SlugDens.t(samp.dist.n, xmin, xmax)#
        samp.loess <- lowess(samp.dist$Age, samp.dist$Density, f=0.15)#
        samp.fitted <- samp.loess$y#
        return(samp.fitted)#
    }#
    samp.replicate <- (pbreplicate(reps, makeloess(x, n)))#
    samp.replicate <- as.data.frame(samp.replicate)#
    samp.replicate[is.na(samp.replicate)] <- 0#
    samp.replicate <- sweep(samp.replicate,2,colSums(samp.replicate),`/`)#
    samp.results.replicate <- transform(samp.replicate, MEAN=apply(samp.replicate,1, mean, na.rm = TRUE))#
    samp.results.replicate <- transform(samp.results.replicate, SD=apply(samp.results.replicate,1, sd, na.rm = TRUE))#
    samp.descriptive <- data.frame(samp.hist$Age, samp.results.replicate$MEAN, samp.results.replicate$SD)#
    colnames(samp.descriptive) <- c("Age", "Mean", "SD")#
    #samp.descriptive <- arrange(samp.descriptive, desc(Age))#
    samp.all <- data.frame(samp.hist$Age, samp.hist$Density, samp.descriptive$Mean, samp.descriptive$SD, samp.replicate)#
    names(samp.all)[names(samp.all)=="samp.hist.Age"] <- "Age"#
    names(samp.all)[names(samp.all)=="samp.descriptive.Mean"] <- "Mean"#
    names(samp.all)[names(samp.all)=="samp.descriptive.SD"] <- "SD"#
    names(samp.all)[names(samp.all)=="samp.hist.Density"] <- "Density"#
    samp.all <- arrange(samp.all, desc(Age))#
    return(samp.all)#
}#
########
stack.14C <- function(x, sigma, xmin, xmax){#
    samp.intcal <- rep("intcal13", length(x))#
    samp.slugdens <- BchronCalibrate(x, sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    fill <- seq(xmin, xmax, 1)#
    samp.age.grid <- c(samp.ages$ageGrid, fill)#
    samp.grid <- sort(samp.age.grid, decreasing=TRUE)#
    samp.grid <- samp.grid[samp.grid < xmax & samp.grid > xmin]#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.hist <- hist(samp.grid, breaks=length(time))#
    samp.hist <- data.frame(time, samp.hist$counts, samp.hist$counts/sum(samp.hist$counts))#
    colnames(samp.hist) <- c("Age", "Counts", "Density")#
    return(samp.hist)#
}#
median.stack.14C <- function(x, sigma, xmin, xmax){#
    samp.intcal <- rep("intcal13", length(x))#
    samp.slugdens <- BchronCalibrate(x, sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.median <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, median))#
    medians.all <-as.vector(samp.median[,1])#
    n <- length(medians.all)#
    medians <- medians.all[medians.all < xmax & medians.all > xmin]#
    return(medians)#
}#
stack.14C.4D <- function(date, sigma, xmin, xmax, lat, long){#
    date.frame <- data.frame(date, sigma, lat, long)#
    names(date.frame) <- c("Date", "Sigma", "Lat", "Long")#
    date.sub <- subset(date.frame, xmin < Date & Date < xmax)#
    ids.cus = paste("Date", 1:length(date.sub$Date), sep = "")#
    coord.sub <- data.frame(ids.cus, date.sub$Lat, date.sub$Long)#
    names(coord.sub) <- c(".id", "Lat", "Long")#
    samp.intcal <- rep("intcal13", length(date.sub$Date))#
    samp.slugdens <- BchronCalibrate(date.sub$Date, date.sub$Sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.coord <- merge(samp.ages, coord.sub, by.x=".id")#
    return(samp.coord)#
}#
median.stack.14C <- function(x, sigma, xmin, xmax){#
    samp.intcal <- rep("intcal13", length(x))#
    samp.slugdens <- BchronCalibrate(x, sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.median <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, median))#
    medians.all <-as.vector(samp.median[,1])#
    n <- length(medians.all)#
    medians <- medians.all[medians.all < xmax & medians.all > xmin]#
    return(medians)#
}#
#
mapGen <- function(map, date, sigma, xmin, xmax, lat, long, interval, x.res, y.res) {#
    calibrated.date.frame <- stack.14C.4D(date=date, sigma=sigma, xmin=xmin, xmax=xmax, lat=lat, long=long)#
    date.interval <- seq(from=xmin, to=xmax, by=interval)#
    date.interval <- rev(date.interval)#
    results.int.dur <- with(calibrated.date.frame, interp(x=Long, y=Lat, z=ageGrid, duplicate="mean", nx=x.res, ny=y.res))#
    results.int.dur.melt <- melt(results.int.dur$z, na.rm=TRUE)#
    colnames(results.int.dur.melt) <- c("x", "y", "z")#
    results.int.dur.melt$x <- results.int.dur$x[results.int.dur.melt$x]#
    results.int.dur.melt$y <- results.int.dur$y[results.int.dur.melt$y]#
    results.int.dur.melt[is.na(results.int.dur.melt)] <- 0#
    animation::saveGIF(expr=for (i in seq_along(date.interval)) {#
        num <- seq(1, length(date.interval), 1)#
        plots <- ggmap(map, alpha=0.2) +#
        #stat_contour(data=results.int.dur.melt, aes(x=x, y=y, z=z, fill=z, alpha=z))+#
        geom_tile(data=results.int.dur.melt, aes(x=x, y=y, z=z, fill=z, alpha=z))+#
        coord_equal() +#
        scale_fill_gradient(name = "14C Activity", low="white", high="red", limits = c(date.interval[i], date.interval[i]+interval)) +#
        scale_alpha(guide="none") +#
        scale_y_continuous("Latitude", limits = c(35, 46)) +#
        scale_x_continuous("Longitude", limits = c(-10, 5)) +#
        coord_map() +#
        theme_tufte() +#
        ggtitle(paste(date.interval[i])) +#
        guides(size=FALSE)#
        ggsave(plots, filename=paste("map",num[i], ".png", sep=""))#
    }, movie.name="iberia.gif", convert = "gm convert" )#
}#
#
plotGen <- function(calibrated.date.frame, interval, x.res, y.res) {#
    date.interval <- seq(from=min(calibrated.date.frame$ageGrid), to=max(calibrated.date.frame$ageGrid), by=interval)#
    date.list <- pbapply::pblapply(date.interval, function(x) subset(calibrated.date.frame, calibrated.date.frame$ageGrid > x && calibrated.date.frame$ageGrid < x+interval))#
    interpolation <- function(cal.date.frame) {#
        results.int.dur <- with(cal.date.frame, interp(x=Long, y=Lat, z=ageGrid, duplicate="mean", nx=x.res, ny=y.res))#
        results.int.dur.melt <- melt(results.int.dur$z, na.rm=TRUE)#
        colnames(results.int.dur.melt) <- c("x", "y", "z")#
        results.int.dur.melt$x <- results.int.dur$x[results.int.dur.melt$x]#
        results.int.dur.melt$y <- results.int.dur$y[results.int.dur.melt$y]#
        results.int.dur.melt[is.na(results.int.dur.melt)] <- 0#
        return(results.int.dur.melt)#
    }#
    date.list.interp <- lapply(date.list, function(x) interpolation(x))#
    for (i in seq_along(date.list.interp)) {#
        num <- seq(1, length(date.list.interp), 1)#
        plots <- ggplot() +#
        #stat_contour(data=data.frame(date.list.interp[i]), aes(x=x, y=y, z=z, fill=z, alpha=z))+#
        geom_tile(data=data.frame(date.list.interp[i]), aes(x=x, y=y, z=z, fill=z, alpha=z))+#
        coord_equal() +#
        scale_fill_gradient(name = "14C Activity", low="white", high="red", na.value="white") +#
        scale_alpha(guide="none") +#
        scale_y_continuous("Latitude", limits = c(35, 46)) +#
        scale_x_continuous("Longitude", limits = c(-10, 5)) +#
        coord_map() +#
        theme_tufte() +#
        ggtitle("10,000 BP") +#
        guides(size=FALSE)#
        ggsave(plots, filename=paste("map",num[i], ".png", sep=""))#
    }#
}#
plotGenAlt <- function(date, sigma, xmin, xmax, lat, long, interval, x.res, y.res) {#
    calibrated.date.frame <- stack.14C.4D(date=date, sigma=sigma, xmin=xmin, xmax=xmax, lat=lat, long=long)#
    date.interval <- seq(from=xmin, to=xmax, by=interval)#
    date.interval <- rev(date.interval)#
    results.int.dur <- with(calibrated.date.frame, interp(x=Long, y=Lat, z=ageGrid, duplicate="mean", nx=x.res, ny=y.res))#
    results.int.dur.melt <- melt(results.int.dur$z, na.rm=TRUE)#
    colnames(results.int.dur.melt) <- c("x", "y", "z")#
    results.int.dur.melt$x <- results.int.dur$x[results.int.dur.melt$x]#
    results.int.dur.melt$y <- results.int.dur$y[results.int.dur.melt$y]#
    results.int.dur.melt[is.na(results.int.dur.melt)] <- 0#
    animation::saveGIF(expr=for (i in seq_along(date.interval)) {#
        num <- seq(1, length(date.interval), 1)#
        plots <- ggplot() +#
        #stat_contour(data=results.int.dur.melt, aes(x=x, y=y, z=z, fill=z, alpha=z))+#
        geom_tile(data=results.int.dur.melt, aes(x=x, y=y, z=z, fill=z, alpha=z))+#
        coord_equal() +#
        scale_fill_gradient(name = "14C Activity", low="white", high="red", na.value="white", limits = c(date.interval[i], date.interval[i]+interval)) +#
        scale_alpha(guide="none") +#
        scale_y_continuous("Latitude", limits = c(35, 46)) +#
        scale_x_continuous("Longitude", limits = c(-10, 5)) +#
        coord_map() +#
        theme_tufte() +#
        ggtitle("10,000 BP") +#
        guides(size=FALSE)#
        ggsave(plots, filename=paste("map",num[i], ".png", sep=""))#
    }, movie.name="iberia.gif")#
}#
mapGenAlt <- function(map, date, sigma, xmin, xmax, lat, long, interval, x.res, y.res) {#
    calibrated.date.frame <- stack.14C.4D(date=date, sigma=sigma, xmin=xmin, xmax=xmax, lat=lat, long=long)#
    date.interval <- seq(from=xmin, to=xmax, by=interval)#
    date.interval <- rev(date.interval)#
    date.list <- pbapply::pblapply(date.interval, function(x) subset(calibrated.date.frame, calibrated.date.frame$ageGrid > x & calibrated.date.frame$ageGrid < x+interval))#
    interpolation <- function(cal.date.frame) {#
        results.int.dur <- with(cal.date.frame, interp(x=Long, y=Lat, z=ageGrid, duplicate="mean", nx=x.res, ny=y.res))#
        results.int.dur.melt <- reshape2::melt(results.int.dur$z, na.rm=TRUE)#
        colnames(results.int.dur.melt) <- c("x", "y", "z")#
        results.int.dur.melt$x <- results.int.dur$x[results.int.dur.melt$x]#
        results.int.dur.melt$y <- results.int.dur$y[results.int.dur.melt$y]#
        results.int.dur.melt[complete.cases(results.int.dur.melt),]#
        return(results.int.dur.melt)#
    }#
    date.list.interp <- pbapply::pblapply(date.list, function(x) interpolation(x))#
    animation::saveGIF(expr=for (i in seq_along(date.interval)) {#
        num <- formatC(seq(1, length(date.interval), 1), width=6, format="d", flag="0")#
        plots <- ggmap(map, alpha=0.2) +#
        geom_tile(data=data.frame(date.list.interp[i]), aes(x=x, y=y, fill=z, alpha=z))+#
        coord_equal() +#
        scale_fill_gradientn(guide="none", name = "14C Activity", colours=rev(heat.colors(20)), limits = c(date.interval[i], date.interval[i]+interval, na.value="white")) +#
        scale_alpha_continuous(guide="none", na.value=0) +#
        scale_y_continuous("Latitude", limits = c(35, 46)) +#
        scale_x_continuous("Longitude", limits = c(-10, 5)) +#
        coord_map() +#
        theme_tufte() +#
        ggtitle(paste(date.interval[i], " cal BP", sep="")) +#
        guides(size=FALSE, colour=FALSE)#
        ggsave(plots, filename=paste("heatmap",num[i], ".png", sep=""))#
    }, movie.name="iberia.gif", convert = "gm convert" )#
}#
#
mapGenPixel <- function(map, date, sigma, xmin, xmax, lat, long, interval, x.res, y.res) {#
    calibrated.date.frame <- stack.14C.4D(date=date, sigma=sigma, xmin=xmin, xmax=xmax, lat=lat, long=long)#
    date.interval <- seq(from=xmin, to=xmax, by=interval)#
    date.interval <- rev(date.interval)#
    date.list <- pbapply::pblapply(date.interval, function(x) subset(calibrated.date.frame, calibrated.date.frame$ageGrid > x & calibrated.date.frame$ageGrid < x+interval))#
    interpolation <- function(cal.date.frame) {#
        results.int.dur <- with(cal.date.frame, interp(x=Long, y=Lat, z=ageGrid, duplicate="mean", nx=x.res, ny=y.res))#
        results.int.dur.melt <- reshape2::melt(results.int.dur$z, na.rm=TRUE)#
        colnames(results.int.dur.melt) <- c("x", "y", "z")#
        results.int.dur.melt$x <- results.int.dur$x[results.int.dur.melt$x]#
        results.int.dur.melt$y <- results.int.dur$y[results.int.dur.melt$y]#
        results.int.dur.melt[complete.cases(results.int.dur.melt),]#
        return(results.int.dur.melt)#
    }#
    date.list.interp <- pbapply::pblapply(date.list, function(x) interpolation(x))#
    animation::saveGIF(expr=for (i in seq_along(date.interval)) {#
        num <- formatC(seq(1, length(date.interval), 1), width=6, format="d", flag="0")#
        plots <- ggmap(map, alpha=0.2) +#
        geom_tile(data=data.frame(date.list.interp[i]), aes(x=x, y=y, fill=mod, alpha=mod))+#
        coord_equal() +#
        scale_fill_gradientn(guide="none", name = "14C Activity", colours=rev(heat.colors(20)), limits = c(date.interval[i], date.interval[i]+interval, na.value="white")) +#
        scale_alpha_continuous(guide="none", na.value=0) +#
        scale_y_continuous("Latitude", limits = c(35, 46)) +#
        scale_x_continuous("Longitude", limits = c(-10, 5)) +#
        coord_map() +#
        theme_tufte() +#
        ggtitle(paste(date.interval[i], " cal BP", sep="")) +#
        guides(size=FALSE, colour=FALSE)#
        ggsave(plots, filename=paste("heatmap",num[i], ".png", sep=""))#
    }, movie.name="iberia.gif", convert = "gm convert" )#
}#
mapGenPoint <- function(map, date, sigma, xmin, xmax, lat, long, interval, x.res, y.res) {#
    calibrated.date.frame <- stack.14C.4D(date=date, sigma=sigma, xmin=xmin, xmax=xmax, lat=lat, long=long)#
    date.interval <- seq(from=xmin, to=xmax, by=interval)#
    date.interval <- rev(date.interval)#
    date.list <- pbapply::pblapply(date.interval, function(x) subset(calibrated.date.frame, calibrated.date.frame$ageGrid > x & calibrated.date.frame$ageGrid < x+interval))#
    animation::ani.options(convert="/usr/local/bin/convert")#
    animation::saveVideo(expr=for (i in seq_along(date.interval)) {#
        num.f <- formatC(seq(xmin, xmax, interval), width=5, format="d", flag="0")#
        num <- rev(num.f)#
        #num <- formatC(seq(1, length(date.interval), 1), width=6, format="d", flag="0")#
        plots <- ggmap(map, alpha=0.2) +#
        geom_point(data=data.frame(date.list[i]), aes(x=Long, y=Lat), colour="red", alpha=0.05, size=7, shape=15)+#
        coord_equal() +#
        scale_y_continuous("Latitude", limits = c(35, 46)) +#
        scale_x_continuous("Longitude", limits = c(-10, 5)) +#
        coord_map() +#
        theme_tufte() +#
        ggtitle(paste(date.interval[i], " cal BP", sep="")) +#
        guides(size=FALSE, colour=FALSE, alpha=FALSE, shape=FALSE)#
        ggsave(plots, filename=paste("map",num[i], ".png", sep=""))#
    }, video.name="iberia.mp4", img.name="map")#
    #ffmpeg -f image2 -i map%06d.png -vcodec mjpeg -q:v 0 -r 25 iberia.avi#
}
all.data <- read.csv(file="~/Dropbox/4.2 ky event/Radiocarbon Final/All Iberia/Just Dates-1-Table 1.csv")
mapGenHeatDensity <- function(map, date, sigma, xmin, xmax, lat, long, interval, x.res, y.res, land.file) {#
    stack.14C.4D <- function(date, sigma, xmin, xmax, lat, long){#
        date <- c(date, 100)#
        sigma <- c(sigma, 50)#
        lat <- c(lat, 0)#
        long <- c(long, 0)#
        date.frame <- data.frame(date, sigma, lat, long)#
        names(date.frame) <- c("Date", "Sigma", "Lat", "Long")#
        date.frame <- date.frame[complete.cases(date.frame),]#
        date.sub <- subset(date.frame, (xmin-500) < Date & Date < (xmax + 500))#
        ids.cus = paste("Date", 1:length(date.sub$Date), sep = "")#
        coord.sub <- data.frame(ids.cus, date.sub$Lat, date.sub$Long)#
        names(coord.sub) <- c(".id", "Lat", "Long")#
        samp.intcal <- rep("intcal13", length(date.sub$Date))#
        samp.slugdens <- BchronCalibrate(date.sub$Date, date.sub$Sigma, samp.intcal)#
        samp.ages <- ldply(samp.slugdens, data.frame)#
        samp.ages <- subset(samp.ages, samp.ages$densities > .0015)#
        samp.test <- merge(x=samp.ages, y=coord.sub, by.x=".id", by.y=".id")#
        samp.test$DensityScale <- reshape::rescaler.default(samp.test$densities, type = "range")#
        return(samp.test)#
    }#
    land <- readOGR(land.file)#
    polyland <- subset(land, land@data$COUNTRY==c("Spain", "Portugal"))#
    calibrated.date.frame <- stack.14C.4D(date=date, sigma=sigma, xmin=xmin, xmax=xmax, lat=lat, long=long)#
    calibrated.date.frame <- calibrated.date.frame[complete.cases(calibrated.date.frame),]#
    dateScrubOld <- function(dataframe, age.min, age.max) {#
        dataframe$point <- 0.1#
        dataframe$point[findInterval(dataframe$ageGrid, c(age.min,age.max)) == 1L] <- 1#
        dataframe$DensityPlot <- dataframe$DensityScale*dataframe$point#
        return(dataframe)#
    }#
    dateScrubBad <- function(dataframe, age.min, age.max) {#
        dataframe <- dataframe[complete.cases(dataframe),]#
        dataframe$point <- 0#
        dataframe$point[findInterval(dataframe$ageGrid, c(age.min,age.max)) == 1L] <- 1#
        dataframe.val <- subset(dataframe, dataframe$point==1)#
        dataframe.blank <- dataframe#
        dataframe.blank$densities <- dataframe.blank$densities*0#
        dataframe.blank$DensityScale <- dataframe.blank$DensityScale*0#
        dataframe.blank <- subset(dataframe.blank, dataframe$point==0)#
        all.ageGrid <- c(dataframe.val$ageGrid, dataframe.blank$ageGrid)#
        all.lat <- c(dataframe.val$Lat, dataframe.blank$Lat)#
        all.long <- c(dataframe.val$Long, dataframe.blank$Long)#
        all.densities <- c(dataframe.val$densities, dataframe.blank$densities)#
        all.densityscale <- c(dataframe.val$DensityScale, dataframe.blank$DensityScale)#
        all.legend <- c(as.vector(dataframe.val$Legend), as.vector(dataframe.blank$Legend))#
        full.date.frame <- data.frame(all.ageGrid,all.lat,all.long,all.densities, all.densityscale,all.legend)#
        colnames(full.date.frame) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale", "Legend")#
        full.date.frame <- full.date.frame[complete.cases(full.date.frame),]#
        return(full.date.frame)#
    }#
    dateScrub <- function(dataframe, age.min, age.max) {#
        dataframe$point <- 0#
        dataframe$point[findInterval(dataframe$ageGrid, c(age.min,age.max)) == 1L] <- 1#
        dataframe.val <- subset(dataframe, dataframe$point==1)#
        return(dataframe.val)#
    }#
    date.interval <- seq(from=xmin, to=xmax, by=interval)#
    date.interval <- rev(date.interval)#
    date.min <- date.interval-interval/2#
    date.max <- date.interval+interval/2#
    date.list <- pbapply::pblapply(date.interval, function(x) dateScrub(dataframe=calibrated.date.frame, age.min=x-interval/2, age.max=x+interval/2))#
    heat.function.min <- function(data.frame, x.res, y.res) {#
        data.frame <- data.frame[complete.cases(data.frame),]#
        data.frame.int <- with(data.frame, interp(x=Long, y=Lat, z=densities, duplicate="user", dupfun="max", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))#
        land.clip <- crop(data.map, polyland)#
        results <- land.clip@data#
        return(results)#
    }#
    heat.function.max <- function(data.frame, x.res, y.res) {#
        data.frame <- data.frame[complete.cases(data.frame),]#
        data.frame.int <- with(data.frame, interp(x=Long, y=Lat, z=densities, duplicate="user", dupfun="max", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))#
        land.clip <- crop(data.map, polyland)#
        results <- land.clip@data#
        return(results)#
    }#
    heat.function.mean <- function(data.frame, x.res, y.res) {#
        data.frame <- data.frame[complete.cases(data.frame),]#
        data.frame.int <- with(data.frame, interp(x=Long, y=Lat, z=DensityScale, duplicate="user", dupfun="mean", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))#
        land.clip <- crop(data.map, as(polyland, "SpatialPolygons"))#
        results <- land.clip@data#
        results <- results[complete.cases(results),]#
        #results$zmod <- reshape::rescaler.default(results$z, type = "range")#
        return(results)#
    }#
    animation::ani.options(convert="/usr/local/bin/convert")#
    animation::saveVideo(expr=for (i in seq_along(date.interval)) {#
        human.data <- date.list[[i]]#
        human.data <- data.frame(human.data$ageGrid, human.data$Lat, human.data$Long, human.data$densities, human.data$DensityScale, human.data$point)#
        colnames(human.data) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale",  "point")#
        blank.ageGrid <- c(0, 0, 0, 0)#
        blank.long <- c(-10, -10, 2.5, 2.5)#
        blank.lat <- c(45, 35, 35, 45)#
        blank.densities <- c(0, 0, 0, 0)#
        blank.point <- c(0, 0, 0, 0)#
        blank.human.frame <- data.frame(blank.ageGrid, blank.lat, blank.long, blank.densities, blank.densities, blank.point)#
        colnames(blank.human.frame) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale",  "point")#
        human.data <- rbind(human.data, blank.human.frame)#
        human.int <- heat.function.mean(human.data, x.res=x.res, y.res=y.res)#
        blank.human.plot <- ggmap(map) +#
        coord_equal() +#
        coord_map() +#
        scale_x_continuous("Longitude", limits=c(-10, 4)) +#
        scale_y_continuous("Latitude", limits=c(35, 45)) +#
        theme_tufte() +#
        ggtitle(paste(date.interval[i], " cal BP | Humans", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE, fill=FALSE)#
        val.human.plot <- ggmap(map) +#
        geom_contour(data=human.int, aes(x=x, y=y, z=z), colour="red", alpha=0.2, binwidth=0.001)+#
        geom_tile(data=human.int, aes(x=x, y=y, fill=z,  alpha=z))+#
        coord_equal() +#
        coord_map() +#
        scale_alpha_continuous(range=c(0, 1), guide="none") +#
        scale_fill_gradient(name = "Latest Date", low="pink", high="red",  limits=c(0, 1)) +#
        scale_x_continuous("Longitude", limits=c(-10, 4)) +#
        scale_y_continuous("Latitude", limits=c(35, 45)) +#
        theme_tufte() +#
        ggtitle(paste(date.interval[i], " cal BP | Humans", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE, fill=FALSE)#
        human.z <- sum(human.int$z)#
        human.plot <- if(human.z==0) {#
            blank.human.plot#
        } else {#
            val.human.plot#
        }#
        ggsave(layOut(list(human.plot, 1:50, 1:50),#
        list(megafauna.plot, 1:50, 51:100)), filename=paste("/Users/lee/Dropbox/Documents/University of Iowa/Map Runs/map",num[i], ".tiff", sep=""), device="tiff", dpi=320, width=7, height=7)#
    }, video.name="iberia.mp4", img.name="map")#
    #ffmpeg -f image2 -i map%06d.tif -vcodec mjpeg -q:v 0 -r 25 iberia.mov#
}#
spain <- get_map(location="Spain", zoom=6, maptype="terrain")#
#
mapGenHeatDensity(map=spain, date=col.data$CYrBPunc, sigma=col.data$Sigma, lat=col.data$Lat.in.Dec, long=col.data$Long.in.Dec, interval=5, x.res=250, y.res=250, land.file="/Users/lee/Dropbox/Documents/University of Iowa/countries", xmin=2950, xmax=6950)
col.data <- collapse.the.dates.new(sites=all.data$Site, region=all.data$Region, context=all.data$Country, dates=all.data$X14C.Yr.BP.uncal, sigma=all.data$Sigma, lat=all.data$Lat.in.Dec, long=all.data$Long.in.Dec, datemin=0, datemax=10000)
collapse.the.dates.new <- function(sites, region, context, dates, sigma, lat, long, datemin, datemax) {#
    n.t <- rep(100, length(sites))#
    df <- data.frame(sites, region, context, lat, long, as.numeric(dates), as.numeric(sigma))#
    colnames(df) <- c("Site", "Region", "Context", "Lat", "Long", "CYrBPunc", "Sigma")#
    df <- subset(df, df$CYrBPunc < datemax & df$CYrBPunc > datemin)#
    df <- arrange(df, desc(CYrBPunc))#
    df <- arrange(df, desc(Site))#
    df <- arrange(df, desc(Region))#
    df$Ttest <- c(#
    (abs(df[1:(nrow(df)-1),6]-df[2:nrow(df), 6]))/((sqrt(df[2:nrow(df), 7]^2 + df[1:(nrow(df)-1),7]^2)*sqrt(1/100))), NA)#
    df$pvalue <- c((2*pt(df[1:nrow(df),8], 100, lower=FALSE)))#
    df$Collapse <- rep("No", length(df$Site))#
    df <- transform(df, Collapse = ifelse(pvalue > 0.05, "Yes", Collapse))#
    df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
    df <- as.data.frame(df)#
    df <- df[complete.cases(df),]#
    return(df)#
}#
col.data <- collapse.the.dates.new(sites=all.data$Site, region=all.data$Region, context=all.data$Country, dates=all.data$X14C.Yr.BP.uncal, sigma=all.data$Sigma, lat=all.data$Lat.in.Dec, long=all.data$Long.in.Dec, datemin=0, datemax=10000)
mapGenHeatDensity(map=spain, date=col.data$CYrBPunc, sigma=col.data$Sigma, lat=col.data$Lat.in.Dec, long=col.data$Long.in.Dec, interval=5, x.res=250, y.res=250, land.file="/Users/lee/Dropbox/Documents/University of Iowa/countries", xmin=2950, xmax=6950)
mapGenHeatDensity <- function(map, date, sigma, xmin, xmax, lat, long, interval, x.res, y.res, land.file) {#
    stack.14C.4D <- function(date, sigma, xmin, xmax, lat, long){#
        date <- c(date, 100)#
        sigma <- c(sigma, 50)#
        lat <- c(lat, 0)#
        long <- c(long, 0)#
        date.frame <- data.frame(date, sigma, lat, long)#
        names(date.frame) <- c("Date", "Sigma", "Lat", "Long")#
        date.frame <- date.frame[complete.cases(date.frame),]#
        date.sub <- subset(date.frame, (xmin-500) < Date & Date < (xmax + 500))#
        ids.cus = paste("Date", 1:length(date.sub$Date), sep = "")#
        coord.sub <- data.frame(ids.cus, date.sub$Lat, date.sub$Long)#
        names(coord.sub) <- c(".id", "Lat", "Long")#
        samp.intcal <- rep("intcal13", length(date.sub$Date))#
        samp.slugdens <- BchronCalibrate(date.sub$Date, date.sub$Sigma, samp.intcal)#
        samp.ages <- ldply(samp.slugdens, data.frame)#
        samp.ages <- subset(samp.ages, samp.ages$densities > .0015)#
        samp.test <- merge(x=samp.ages, y=coord.sub, by.x=".id", by.y=".id")#
        samp.test$DensityScale <- reshape::rescaler.default(samp.test$densities, type = "range")#
        return(samp.test)#
    }#
    land <- readOGR(land.file)#
    polyland <- subset(land, land@data$COUNTRY==c("Spain", "Portugal"))#
    calibrated.date.frame <- stack.14C.4D(date=date, sigma=sigma, xmin=xmin, xmax=xmax, lat=lat, long=long)#
    calibrated.date.frame <- calibrated.date.frame[complete.cases(calibrated.date.frame),]#
    dateScrubOld <- function(dataframe, age.min, age.max) {#
        dataframe$point <- 0.1#
        dataframe$point[findInterval(dataframe$ageGrid, c(age.min,age.max)) == 1L] <- 1#
        dataframe$DensityPlot <- dataframe$DensityScale*dataframe$point#
        return(dataframe)#
    }#
    dateScrubBad <- function(dataframe, age.min, age.max) {#
        dataframe <- dataframe[complete.cases(dataframe),]#
        dataframe$point <- 0#
        dataframe$point[findInterval(dataframe$ageGrid, c(age.min,age.max)) == 1L] <- 1#
        dataframe.val <- subset(dataframe, dataframe$point==1)#
        dataframe.blank <- dataframe#
        dataframe.blank$densities <- dataframe.blank$densities*0#
        dataframe.blank$DensityScale <- dataframe.blank$DensityScale*0#
        dataframe.blank <- subset(dataframe.blank, dataframe$point==0)#
        all.ageGrid <- c(dataframe.val$ageGrid, dataframe.blank$ageGrid)#
        all.lat <- c(dataframe.val$Lat, dataframe.blank$Lat)#
        all.long <- c(dataframe.val$Long, dataframe.blank$Long)#
        all.densities <- c(dataframe.val$densities, dataframe.blank$densities)#
        all.densityscale <- c(dataframe.val$DensityScale, dataframe.blank$DensityScale)#
        all.legend <- c(as.vector(dataframe.val$Legend), as.vector(dataframe.blank$Legend))#
        full.date.frame <- data.frame(all.ageGrid,all.lat,all.long,all.densities, all.densityscale,all.legend)#
        colnames(full.date.frame) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale", "Legend")#
        full.date.frame <- full.date.frame[complete.cases(full.date.frame),]#
        return(full.date.frame)#
    }#
    dateScrub <- function(dataframe, age.min, age.max) {#
        dataframe$point <- 0#
        dataframe$point[findInterval(dataframe$ageGrid, c(age.min,age.max)) == 1L] <- 1#
        dataframe.val <- subset(dataframe, dataframe$point==1)#
        return(dataframe.val)#
    }#
    date.interval <- seq(from=xmin, to=xmax, by=interval)#
    date.interval <- rev(date.interval)#
    date.min <- date.interval-interval/2#
    date.max <- date.interval+interval/2#
    date.list <- pbapply::pblapply(date.interval, function(x) dateScrub(dataframe=calibrated.date.frame, age.min=x-interval/2, age.max=x+interval/2))#
    heat.function.min <- function(data.frame, x.res, y.res) {#
        data.frame <- data.frame[complete.cases(data.frame),]#
        data.frame.int <- with(data.frame, interp(x=Long, y=Lat, z=densities, duplicate="user", dupfun="max", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))#
        land.clip <- crop(data.map, polyland)#
        results <- land.clip@data#
        return(results)#
    }#
    heat.function.max <- function(data.frame, x.res, y.res) {#
        data.frame <- data.frame[complete.cases(data.frame),]#
        data.frame.int <- with(data.frame, interp(x=Long, y=Lat, z=densities, duplicate="user", dupfun="max", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))#
        land.clip <- crop(data.map, polyland)#
        results <- land.clip@data#
        return(results)#
    }#
    heat.function.mean <- function(data.frame, x.res, y.res) {#
        data.frame <- data.frame[complete.cases(data.frame),]#
        data.frame.int <- with(data.frame, interp(x=Long, y=Lat, z=DensityScale, duplicate="user", dupfun="mean", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))#
        land.clip <- crop(data.map, as(polyland, "SpatialPolygons"))#
        results <- land.clip@data#
        results <- results[complete.cases(results),]#
        #results$zmod <- reshape::rescaler.default(results$z, type = "range")#
        return(results)#
    }#
    animation::ani.options(convert="/usr/local/bin/convert")#
    animation::saveVideo(expr=for (i in seq_along(date.interval)) {#
        human.data <- date.list[[i]]#
        human.data <- data.frame(human.data$ageGrid, human.data$Lat, human.data$Long, human.data$densities, human.data$DensityScale, human.data$point)#
        colnames(human.data) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale",  "point")#
        blank.ageGrid <- c(0, 0, 0, 0)#
        blank.long <- c(-10, -10, 2.5, 2.5)#
        blank.lat <- c(45, 35, 35, 45)#
        blank.densities <- c(0, 0, 0, 0)#
        blank.point <- c(0, 0, 0, 0)#
        blank.human.frame <- data.frame(blank.ageGrid, blank.lat, blank.long, blank.densities, blank.densities, blank.point)#
        colnames(blank.human.frame) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale",  "point")#
        human.data <- rbind(human.data, blank.human.frame)#
        human.int <- heat.function.mean(human.data, x.res=x.res, y.res=y.res)#
        num <- formatC(seq(1, length(date.interval), 1), width=6, format="d", flag="0")#
        blank.human.plot <- ggmap(map) +#
        coord_equal() +#
        coord_map() +#
        scale_x_continuous("Longitude", limits=c(-10, 4)) +#
        scale_y_continuous("Latitude", limits=c(35, 45)) +#
        theme_tufte() +#
        ggtitle(paste(date.interval[i], " cal BP | Humans", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE, fill=FALSE)#
        val.human.plot <- ggmap(map) +#
        geom_contour(data=human.int, aes(x=x, y=y, z=z), colour="red", alpha=0.2, binwidth=0.001)+#
        geom_tile(data=human.int, aes(x=x, y=y, fill=z,  alpha=z))+#
        coord_equal() +#
        coord_map() +#
        scale_alpha_continuous(range=c(0, 1), guide="none") +#
        scale_fill_gradient(name = "Latest Date", low="pink", high="red",  limits=c(0, 1)) +#
        scale_x_continuous("Longitude", limits=c(-10, 4)) +#
        scale_y_continuous("Latitude", limits=c(35, 45)) +#
        theme_tufte() +#
        ggtitle(paste(date.interval[i], " cal BP | Humans", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE, fill=FALSE)#
        human.z <- sum(human.int$z)#
        human.plot <- if(human.z==0) {#
            blank.human.plot#
        } else {#
            val.human.plot#
        }#
        ggsave(human.plot, filename=paste("/Users/lee/Dropbox/Documents/University of Iowa/Map Runs/map",num[i], ".tiff", sep=""), device="tiff", dpi=320, width=7, height=7)#
    }, video.name="iberia.mp4", img.name="map")#
    #ffmpeg -f image2 -i map%06d.tif -vcodec mjpeg -q:v 0 -r 25 iberia.mov#
}
mapGenHeatDensity(map=spain, date=col.data$CYrBPunc, sigma=col.data$Sigma, lat=col.data$Lat.in.Dec, long=col.data$Long.in.Dec, interval=5, x.res=250, y.res=250, land.file="/Users/lee/Dropbox/Documents/University of Iowa/countries", xmin=2950, xmax=6950)
map <- spain#
date <- col.data$CYrBPunc#
sigma <- col.data$Sigma#
lat <- col.data$Lat#
long <- col.data$Long#
interval <- 5#
x.res <- 50#
y.res <- 50#
land.file <- "/Users/lee/Dropbox/Documents/University of Iowa/countries"#
xmin <- 2950#
xmax <- 6950
stack.14C.4D <- function(date, sigma, xmin, xmax, lat, long){#
        date <- c(date, 100)#
        sigma <- c(sigma, 50)#
        lat <- c(lat, 0)#
        long <- c(long, 0)#
        date.frame <- data.frame(date, sigma, lat, long)#
        names(date.frame) <- c("Date", "Sigma", "Lat", "Long")#
        date.frame <- date.frame[complete.cases(date.frame),]#
        date.sub <- subset(date.frame, (xmin-500) < Date & Date < (xmax + 500))#
        ids.cus = paste("Date", 1:length(date.sub$Date), sep = "")#
        coord.sub <- data.frame(ids.cus, date.sub$Lat, date.sub$Long)#
        names(coord.sub) <- c(".id", "Lat", "Long")#
        samp.intcal <- rep("intcal13", length(date.sub$Date))#
        samp.slugdens <- BchronCalibrate(date.sub$Date, date.sub$Sigma, samp.intcal)#
        samp.ages <- ldply(samp.slugdens, data.frame)#
        samp.ages <- subset(samp.ages, samp.ages$densities > .0015)#
        samp.test <- merge(x=samp.ages, y=coord.sub, by.x=".id", by.y=".id")#
        samp.test$DensityScale <- reshape::rescaler.default(samp.test$densities, type = "range")#
        return(samp.test)#
    }#
    land <- readOGR(land.file)#
    polyland <- subset(land, land@data$COUNTRY==c("Spain", "Portugal"))#
    calibrated.date.frame <- stack.14C.4D(date=date, sigma=sigma, xmin=xmin, xmax=xmax, lat=lat, long=long)#
    calibrated.date.frame <- calibrated.date.frame[complete.cases(calibrated.date.frame),]#
    dateScrubOld <- function(dataframe, age.min, age.max) {#
        dataframe$point <- 0.1#
        dataframe$point[findInterval(dataframe$ageGrid, c(age.min,age.max)) == 1L] <- 1#
        dataframe$DensityPlot <- dataframe$DensityScale*dataframe$point#
        return(dataframe)#
    }#
    dateScrubBad <- function(dataframe, age.min, age.max) {#
        dataframe <- dataframe[complete.cases(dataframe),]#
        dataframe$point <- 0#
        dataframe$point[findInterval(dataframe$ageGrid, c(age.min,age.max)) == 1L] <- 1#
        dataframe.val <- subset(dataframe, dataframe$point==1)#
        dataframe.blank <- dataframe#
        dataframe.blank$densities <- dataframe.blank$densities*0#
        dataframe.blank$DensityScale <- dataframe.blank$DensityScale*0#
        dataframe.blank <- subset(dataframe.blank, dataframe$point==0)#
        all.ageGrid <- c(dataframe.val$ageGrid, dataframe.blank$ageGrid)#
        all.lat <- c(dataframe.val$Lat, dataframe.blank$Lat)#
        all.long <- c(dataframe.val$Long, dataframe.blank$Long)#
        all.densities <- c(dataframe.val$densities, dataframe.blank$densities)#
        all.densityscale <- c(dataframe.val$DensityScale, dataframe.blank$DensityScale)#
        all.legend <- c(as.vector(dataframe.val$Legend), as.vector(dataframe.blank$Legend))#
        full.date.frame <- data.frame(all.ageGrid,all.lat,all.long,all.densities, all.densityscale,all.legend)#
        colnames(full.date.frame) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale", "Legend")#
        full.date.frame <- full.date.frame[complete.cases(full.date.frame),]#
        return(full.date.frame)#
    }#
    dateScrub <- function(dataframe, age.min, age.max) {#
        dataframe$point <- 0#
        dataframe$point[findInterval(dataframe$ageGrid, c(age.min,age.max)) == 1L] <- 1#
        dataframe.val <- subset(dataframe, dataframe$point==1)#
        return(dataframe.val)#
    }#
    date.interval <- seq(from=xmin, to=xmax, by=interval)#
    date.interval <- rev(date.interval)#
    date.min <- date.interval-interval/2#
    date.max <- date.interval+interval/2#
    date.list <- pbapply::pblapply(date.interval, function(x) dateScrub(dataframe=calibrated.date.frame, age.min=x-interval/2, age.max=x+interval/2))#
    heat.function.min <- function(data.frame, x.res, y.res) {#
        data.frame <- data.frame[complete.cases(data.frame),]#
        data.frame.int <- with(data.frame, interp(x=Long, y=Lat, z=densities, duplicate="user", dupfun="max", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))#
        land.clip <- crop(data.map, polyland)#
        results <- land.clip@data#
        return(results)#
    }#
    heat.function.max <- function(data.frame, x.res, y.res) {#
        data.frame <- data.frame[complete.cases(data.frame),]#
        data.frame.int <- with(data.frame, interp(x=Long, y=Lat, z=densities, duplicate="user", dupfun="max", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))#
        land.clip <- crop(data.map, polyland)#
        results <- land.clip@data#
        return(results)#
    }#
    heat.function.mean <- function(data.frame, x.res, y.res) {#
        data.frame <- data.frame[complete.cases(data.frame),]#
        data.frame.int <- with(data.frame, interp(x=Long, y=Lat, z=DensityScale, duplicate="user", dupfun="mean", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))#
        land.clip <- crop(data.map, as(polyland, "SpatialPolygons"))#
        results <- land.clip@data#
        results <- results[complete.cases(results),]#
        #results$zmod <- reshape::rescaler.default(results$z, type = "range")#
        return(results)#
    }
human.data <- date.list[[200]]
human.data <- data.frame(human.data$ageGrid, human.data$Lat, human.data$Long, human.data$densities, human.data$DensityScale, human.data$point)#
        colnames(human.data) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale",  "point")#
        blank.ageGrid <- c(0, 0, 0, 0)#
        blank.long <- c(-10, -10, 2.5, 2.5)#
        blank.lat <- c(45, 35, 35, 45)#
        blank.densities <- c(0, 0, 0, 0)#
        blank.point <- c(0, 0, 0, 0)#
        blank.human.frame <- data.frame(blank.ageGrid, blank.lat, blank.long, blank.densities, blank.densities, blank.point)#
        colnames(blank.human.frame) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale",  "point")#
        human.data <- rbind(human.data, blank.human.frame)#
        human.int <- heat.function.mean(human.data, x.res=x.res, y.res=y.res)
head(human.int)
blank.human.plot <- ggmap(map) +#
        coord_equal() +#
        coord_map() +#
        scale_x_continuous("Longitude", limits=c(-10, 4)) +#
        scale_y_continuous("Latitude", limits=c(35, 45)) +#
        theme_tufte() +#
        ggtitle(paste(date.interval[200], " cal BP | Humans", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE, fill=FALSE)#
        val.human.plot <- ggmap(map) +#
        geom_contour(data=human.int, aes(x=x, y=y, z=z), colour="red", alpha=0.2, binwidth=0.001)+#
        geom_tile(data=human.int, aes(x=x, y=y, fill=z,  alpha=z))+#
        coord_equal() +#
        coord_map() +#
        scale_alpha_continuous(range=c(0, 1), guide="none") +#
        scale_fill_gradient(name = "Latest Date", low="pink", high="red",  limits=c(0, 1)) +#
        scale_x_continuous("Longitude", limits=c(-10, 4)) +#
        scale_y_continuous("Latitude", limits=c(35, 45)) +#
        theme_tufte() +#
        ggtitle(paste(date.interval[200], " cal BP | Humans", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE, fill=FALSE)
human.z <- sum(human.int$z)
human.plot <- if(human.z==0) {#
            blank.human.plot#
        } else {#
            val.human.plot#
        }
quartz(0)
human.plot
human.data <- date.list[[50]]#
        human.data <- data.frame(human.data$ageGrid, human.data$Lat, human.data$Long, human.data$densities, human.data$DensityScale, human.data$point)#
        colnames(human.data) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale",  "point")#
        blank.ageGrid <- c(0, 0, 0, 0)#
        blank.long <- c(-10, -10, 2.5, 2.5)#
        blank.lat <- c(45, 35, 35, 45)#
        blank.densities <- c(0, 0, 0, 0)#
        blank.point <- c(0, 0, 0, 0)#
        blank.human.frame <- data.frame(blank.ageGrid, blank.lat, blank.long, blank.densities, blank.densities, blank.point)#
        colnames(blank.human.frame) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale",  "point")#
        human.data <- rbind(human.data, blank.human.frame)#
        human.int <- heat.function.mean(human.data, x.res=x.res, y.res=y.res)
blank.human.plot <- ggmap(map) +#
        coord_equal() +#
        coord_map() +#
        scale_x_continuous("Longitude", limits=c(-10, 4)) +#
        scale_y_continuous("Latitude", limits=c(35, 45)) +#
        theme_tufte() +#
        ggtitle(paste(date.interval[50], " cal BP | Humans", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE, fill=FALSE)#
        val.human.plot <- ggmap(map) +#
        #geom_contour(data=human.int, aes(x=x, y=y, z=z), colour="red", alpha=0.2, binwidth=0.001)+#
        geom_tile(data=human.int, aes(x=x, y=y, fill=z,  alpha=z))+#
        coord_equal() +#
        coord_map() +#
        scale_alpha_continuous(range=c(0, 1), guide="none") +#
        scale_fill_gradient(name = "Latest Date", low="pink", high="red",  limits=c(0, 1)) +#
        scale_x_continuous("Longitude", limits=c(-10, 4)) +#
        scale_y_continuous("Latitude", limits=c(35, 45)) +#
        theme_tufte() +#
        ggtitle(paste(date.interval[50], " cal BP | Humans", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE, fill=FALSE)
human.z <- sum(human.int$z)#
        human.plot <- if(human.z==0) {#
            blank.human.plot#
        } else {#
            val.human.plot#
        }
quartz()
human.plot
mapGenHeatDensity <- function(map, date, sigma, xmin, xmax, lat, long, interval, x.res, y.res, land.file) {#
    stack.14C.4D <- function(date, sigma, xmin, xmax, lat, long){#
        date <- c(date, 100)#
        sigma <- c(sigma, 50)#
        lat <- c(lat, 0)#
        long <- c(long, 0)#
        date.frame <- data.frame(date, sigma, lat, long)#
        names(date.frame) <- c("Date", "Sigma", "Lat", "Long")#
        date.frame <- date.frame[complete.cases(date.frame),]#
        date.sub <- subset(date.frame, (xmin-500) < Date & Date < (xmax + 500))#
        ids.cus = paste("Date", 1:length(date.sub$Date), sep = "")#
        coord.sub <- data.frame(ids.cus, date.sub$Lat, date.sub$Long)#
        names(coord.sub) <- c(".id", "Lat", "Long")#
        samp.intcal <- rep("intcal13", length(date.sub$Date))#
        samp.slugdens <- BchronCalibrate(date.sub$Date, date.sub$Sigma, samp.intcal)#
        samp.ages <- ldply(samp.slugdens, data.frame)#
        samp.ages <- subset(samp.ages, samp.ages$densities > .0015)#
        samp.test <- merge(x=samp.ages, y=coord.sub, by.x=".id", by.y=".id")#
        samp.test$DensityScale <- reshape::rescaler.default(samp.test$densities, type = "range")#
        return(samp.test)#
    }#
    land <- readOGR(land.file)#
    polyland <- subset(land, land@data$COUNTRY==c("Spain", "Portugal"))#
    calibrated.date.frame <- stack.14C.4D(date=date, sigma=sigma, xmin=xmin, xmax=xmax, lat=lat, long=long)#
    calibrated.date.frame <- calibrated.date.frame[complete.cases(calibrated.date.frame),]#
    dateScrubOld <- function(dataframe, age.min, age.max) {#
        dataframe$point <- 0.1#
        dataframe$point[findInterval(dataframe$ageGrid, c(age.min,age.max)) == 1L] <- 1#
        dataframe$DensityPlot <- dataframe$DensityScale*dataframe$point#
        return(dataframe)#
    }#
    dateScrubBad <- function(dataframe, age.min, age.max) {#
        dataframe <- dataframe[complete.cases(dataframe),]#
        dataframe$point <- 0#
        dataframe$point[findInterval(dataframe$ageGrid, c(age.min,age.max)) == 1L] <- 1#
        dataframe.val <- subset(dataframe, dataframe$point==1)#
        dataframe.blank <- dataframe#
        dataframe.blank$densities <- dataframe.blank$densities*0#
        dataframe.blank$DensityScale <- dataframe.blank$DensityScale*0#
        dataframe.blank <- subset(dataframe.blank, dataframe$point==0)#
        all.ageGrid <- c(dataframe.val$ageGrid, dataframe.blank$ageGrid)#
        all.lat <- c(dataframe.val$Lat, dataframe.blank$Lat)#
        all.long <- c(dataframe.val$Long, dataframe.blank$Long)#
        all.densities <- c(dataframe.val$densities, dataframe.blank$densities)#
        all.densityscale <- c(dataframe.val$DensityScale, dataframe.blank$DensityScale)#
        all.legend <- c(as.vector(dataframe.val$Legend), as.vector(dataframe.blank$Legend))#
        full.date.frame <- data.frame(all.ageGrid,all.lat,all.long,all.densities, all.densityscale,all.legend)#
        colnames(full.date.frame) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale", "Legend")#
        full.date.frame <- full.date.frame[complete.cases(full.date.frame),]#
        return(full.date.frame)#
    }#
    dateScrub <- function(dataframe, age.min, age.max) {#
        dataframe$point <- 0#
        dataframe$point[findInterval(dataframe$ageGrid, c(age.min,age.max)) == 1L] <- 1#
        dataframe.val <- subset(dataframe, dataframe$point==1)#
        return(dataframe.val)#
    }#
    date.interval <- seq(from=xmin, to=xmax, by=interval)#
    date.interval <- rev(date.interval)#
    date.min <- date.interval-interval/2#
    date.max <- date.interval+interval/2#
    date.list <- pbapply::pblapply(date.interval, function(x) dateScrub(dataframe=calibrated.date.frame, age.min=x-interval/2, age.max=x+interval/2))#
    heat.function.min <- function(data.frame, x.res, y.res) {#
        data.frame <- data.frame[complete.cases(data.frame),]#
        data.frame.int <- with(data.frame, interp(x=Long, y=Lat, z=densities, duplicate="user", dupfun="max", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))#
        land.clip <- crop(data.map, polyland)#
        results <- land.clip@data#
        return(results)#
    }#
    heat.function.max <- function(data.frame, x.res, y.res) {#
        data.frame <- data.frame[complete.cases(data.frame),]#
        data.frame.int <- with(data.frame, interp(x=Long, y=Lat, z=densities, duplicate="user", dupfun="max", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))#
        land.clip <- crop(data.map, polyland)#
        results <- land.clip@data#
        return(results)#
    }#
    heat.function.mean <- function(data.frame, x.res, y.res) {#
        data.frame <- data.frame[complete.cases(data.frame),]#
        data.frame.int <- with(data.frame, interp(x=Long, y=Lat, z=DensityScale, duplicate="user", dupfun="mean", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))#
        land.clip <- crop(data.map, as(polyland, "SpatialPolygons"))#
        results <- land.clip@data#
        results <- results[complete.cases(results),]#
        #results$zmod <- reshape::rescaler.default(results$z, type = "range")#
        return(results)#
    }#
    animation::ani.options(convert="/usr/local/bin/convert")#
    animation::saveVideo(expr=for (i in seq_along(date.interval)) {#
        human.data <- date.list[[i]]#
        human.data <- data.frame(human.data$ageGrid, human.data$Lat, human.data$Long, human.data$densities, human.data$DensityScale, human.data$point)#
        colnames(human.data) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale",  "point")#
        blank.ageGrid <- c(0, 0, 0, 0)#
        blank.long <- c(-10, -10, 2.5, 2.5)#
        blank.lat <- c(45, 35, 35, 45)#
        blank.densities <- c(0, 0, 0, 0)#
        blank.point <- c(0, 0, 0, 0)#
        blank.human.frame <- data.frame(blank.ageGrid, blank.lat, blank.long, blank.densities, blank.densities, blank.point)#
        colnames(blank.human.frame) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale",  "point")#
        human.data <- rbind(human.data, blank.human.frame)#
        human.int <- heat.function.mean(human.data, x.res=x.res, y.res=y.res)#
        num <- formatC(seq(1, length(date.interval), 1), width=6, format="d", flag="0")#
        blank.human.plot <- ggmap(map) +#
        coord_equal() +#
        coord_map() +#
        scale_x_continuous("Longitude", limits=c(-10, 4)) +#
        scale_y_continuous("Latitude", limits=c(35, 45)) +#
        theme_tufte() +#
        ggtitle(paste(date.interval[i], " cal BP | Humans", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE, fill=FALSE)#
        val.human.plot <- ggmap(map) +#
        #geom_contour(data=human.int, aes(x=x, y=y, z=z), colour="red", alpha=0.2, binwidth=0.001)+#
        geom_tile(data=human.int, aes(x=x, y=y, fill=z,  alpha=z))+#
        coord_equal() +#
        coord_map() +#
        scale_alpha_continuous(range=c(0, 1), guide="none") +#
        scale_fill_gradient(name = "Latest Date", low="pink", high="red",  limits=c(0, 1)) +#
        scale_x_continuous("Longitude", limits=c(-10, 4)) +#
        scale_y_continuous("Latitude", limits=c(35, 45)) +#
        theme_tufte() +#
        ggtitle(paste(date.interval[i], " cal BP | Humans", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE, fill=FALSE)#
        human.z <- sum(human.int$z)#
        human.plot <- if(human.z==0) {#
            blank.human.plot#
        } else {#
            val.human.plot#
        }#
        ggsave(human.plot, filename=paste("/Users/lee/Dropbox/Documents/University of Iowa/Map Runs/map",num[i], ".tiff", sep=""), device="tiff", dpi=320, width=7, height=7)#
    }, video.name="iberia.mp4", img.name="map")#
    #ffmpeg -f image2 -i map%06d.tif -vcodec mjpeg -q:v 0 -r 25 iberia.mov#
}
mapGenHeatDensity(map=spain, date=col.data$CYrBPunc, sigma=col.data$Sigma, lat=col.data$Lat.in.Dec, long=col.data$Long.in.Dec, interval=5, x.res=250, y.res=250, land.file="/Users/lee/Dropbox/Documents/University of Iowa/countries", xmin=2950, xmax=6950)
mapGenHeatDensity(map=spain, date=col.data$CYrBPunc, sigma=col.data$Sigma, lat=col.data$Lat.in.Dec, long=col.data$Long.in.Dec, interval=5, x.res=250, y.res=250, land.file="/Users/lee/Dropbox/Documents/University of Iowa/countries", xmin=6950, xmax=2950)
mapGenHeatDensity <- function(map, date, sigma, xmin, xmax, lat, long, interval, x.res, y.res, land.file) {#
    stack.14C.4D <- function(date, sigma, xmin, xmax, lat, long){#
        date <- c(date, 100)#
        sigma <- c(sigma, 50)#
        lat <- c(lat, 0)#
        long <- c(long, 0)#
        date.frame <- data.frame(date, sigma, lat, long)#
        names(date.frame) <- c("Date", "Sigma", "Lat", "Long")#
        date.frame <- date.frame[complete.cases(date.frame),]#
        date.sub <- subset(date.frame, (xmin-500) < Date & Date < (xmax + 500))#
        ids.cus = paste("Date", 1:length(date.sub$Date), sep = "")#
        coord.sub <- data.frame(ids.cus, date.sub$Lat, date.sub$Long)#
        names(coord.sub) <- c(".id", "Lat", "Long")#
        samp.intcal <- rep("intcal13", length(date.sub$Date))#
        samp.slugdens <- BchronCalibrate(date.sub$Date, date.sub$Sigma, samp.intcal)#
        samp.ages <- ldply(samp.slugdens, data.frame)#
        samp.ages <- subset(samp.ages, samp.ages$densities > .0015)#
        samp.test <- merge(x=samp.ages, y=coord.sub, by.x=".id", by.y=".id")#
        samp.test$DensityScale <- reshape::rescaler.default(samp.test$densities, type = "range")#
        return(samp.test)#
    }#
    land <- readOGR(land.file)#
    polyland <- subset(land, land@data$COUNTRY==c("Spain", "Portugal"))#
    calibrated.date.frame <- stack.14C.4D(date=date, sigma=sigma, xmin=xmin, xmax=xmax, lat=lat, long=long)#
    calibrated.date.frame <- calibrated.date.frame[complete.cases(calibrated.date.frame),]#
    dateScrubOld <- function(dataframe, age.min, age.max) {#
        dataframe$point <- 0.1#
        dataframe$point[findInterval(dataframe$ageGrid, c(age.min,age.max)) == 1L] <- 1#
        dataframe$DensityPlot <- dataframe$DensityScale*dataframe$point#
        return(dataframe)#
    }#
    dateScrubBad <- function(dataframe, age.min, age.max) {#
        dataframe <- dataframe[complete.cases(dataframe),]#
        dataframe$point <- 0#
        dataframe$point[findInterval(dataframe$ageGrid, c(age.min,age.max)) == 1L] <- 1#
        dataframe.val <- subset(dataframe, dataframe$point==1)#
        dataframe.blank <- dataframe#
        dataframe.blank$densities <- dataframe.blank$densities*0#
        dataframe.blank$DensityScale <- dataframe.blank$DensityScale*0#
        dataframe.blank <- subset(dataframe.blank, dataframe$point==0)#
        all.ageGrid <- c(dataframe.val$ageGrid, dataframe.blank$ageGrid)#
        all.lat <- c(dataframe.val$Lat, dataframe.blank$Lat)#
        all.long <- c(dataframe.val$Long, dataframe.blank$Long)#
        all.densities <- c(dataframe.val$densities, dataframe.blank$densities)#
        all.densityscale <- c(dataframe.val$DensityScale, dataframe.blank$DensityScale)#
        all.legend <- c(as.vector(dataframe.val$Legend), as.vector(dataframe.blank$Legend))#
        full.date.frame <- data.frame(all.ageGrid,all.lat,all.long,all.densities, all.densityscale,all.legend)#
        colnames(full.date.frame) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale", "Legend")#
        full.date.frame <- full.date.frame[complete.cases(full.date.frame),]#
        return(full.date.frame)#
    }#
    dateScrub <- function(dataframe, age.min, age.max) {#
        dataframe$point <- 0#
        dataframe$point[findInterval(dataframe$ageGrid, c(age.min,age.max)) == 1L] <- 1#
        dataframe.val <- subset(dataframe, dataframe$point==1)#
        return(dataframe.val)#
    }#
    date.interval <- seq(from=xmin, to=xmax, by=interval)#
    date.interval <- rev(date.interval)#
    date.min <- date.interval-interval/2#
    date.max <- date.interval+interval/2#
    date.list <- pbapply::pblapply(date.interval, function(x) dateScrub(dataframe=calibrated.date.frame, age.min=x-interval/2, age.max=x+interval/2))#
    heat.function.min <- function(data.frame, x.res, y.res) {#
        data.frame <- data.frame[complete.cases(data.frame),]#
        data.frame.int <- with(data.frame, interp(x=Long, y=Lat, z=densities, duplicate="user", dupfun="max", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))#
        land.clip <- crop(data.map, polyland)#
        results <- land.clip@data#
        return(results)#
    }#
    heat.function.max <- function(data.frame, x.res, y.res) {#
        data.frame <- data.frame[complete.cases(data.frame),]#
        data.frame.int <- with(data.frame, interp(x=Long, y=Lat, z=densities, duplicate="user", dupfun="max", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))#
        land.clip <- crop(data.map, polyland)#
        results <- land.clip@data#
        return(results)#
    }#
    heat.function.mean <- function(data.frame, x.res, y.res) {#
        data.frame <- data.frame[complete.cases(data.frame),]#
        data.frame.int <- with(data.frame, interp(x=Long, y=Lat, z=DensityScale, duplicate="user", dupfun="mean", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))#
        land.clip <- crop(data.map, as(polyland, "SpatialPolygons"))#
        results <- land.clip@data#
        results <- results[complete.cases(results),]#
        #results$zmod <- reshape::rescaler.default(results$z, type = "range")#
        return(results)#
    }#
    animation::ani.options(convert="/usr/local/bin/convert")#
    animation::saveVideo(expr=for (i in seq_along(date.interval)) {#
        human.data <- date.list[[i]]#
        human.data <- data.frame(human.data$ageGrid, human.data$Lat, human.data$Long, human.data$densities, human.data$DensityScale, human.data$point)#
        colnames(human.data) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale",  "point")#
        blank.ageGrid <- c(0, 0, 0, 0)#
        blank.long <- c(-10, -10, 2.5, 2.5)#
        blank.lat <- c(45, 35, 35, 45)#
        blank.densities <- c(0, 0, 0, 0)#
        blank.point <- c(0, 0, 0, 0)#
        blank.human.frame <- data.frame(blank.ageGrid, blank.lat, blank.long, blank.densities, blank.densities, blank.point)#
        colnames(blank.human.frame) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale",  "point")#
        human.data.all <- rbind(human.data, blank.human.frame)#
        human.int <- heat.function.mean(human.data.all, x.res=x.res, y.res=y.res)#
        num <- formatC(seq(1, length(date.interval), 1), width=6, format="d", flag="0")#
        blank.human.plot <- ggmap(map) +#
        coord_equal() +#
        coord_map() +#
        scale_x_continuous("Longitude", limits=c(-10, 4)) +#
        scale_y_continuous("Latitude", limits=c(35, 45)) +#
        theme_tufte() +#
        ggtitle(paste(date.interval[i], " cal BP | Humans", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE, fill=FALSE)#
        val.human.plot <- ggmap(map) +#
        #geom_contour(data=human.int, aes(x=x, y=y, z=z), colour="red", alpha=0.2, binwidth=0.001)+#
        geom_tile(data=human.int, aes(x=x, y=y, fill=z,  alpha=z))+#
        coord_equal() +#
        coord_map() +#
        scale_alpha_continuous(range=c(0, 1), guide="none") +#
        scale_fill_gradient(name = "Latest Date", low="pink", high="red",  limits=c(0, 1)) +#
        scale_x_continuous("Longitude", limits=c(-10, 4)) +#
        scale_y_continuous("Latitude", limits=c(35, 45)) +#
        theme_tufte() +#
        ggtitle(paste(date.interval[i], " cal BP | Humans", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE, fill=FALSE)#
        human.z <- sum(human.int$z)#
        human.plot <- if(human.z==0) {#
            blank.human.plot#
        } else {#
            val.human.plot#
        }#
        ggsave(human.plot, filename=paste("/Users/lee/Dropbox/Documents/University of Iowa/Map Runs/map",num[i], ".tiff", sep=""), device="tiff", dpi=320, width=7, height=7)#
    }, video.name="iberia.mp4", img.name="map")#
    #ffmpeg -f image2 -i map%06d.tif -vcodec mjpeg -q:v 0 -r 25 iberia.mov#
}
mapGenHeatDensity(map=spain, date=col.data$CYrBPunc, sigma=col.data$Sigma, lat=col.data$Lat.in.Dec, long=col.data$Long.in.Dec, interval=5, x.res=250, y.res=250, land.file="/Users/lee/Dropbox/Documents/University of Iowa/countries", xmin=6950, xmax=2950)
mapGenHeatDensity(map=spain, date=col.data$CYrBPunc, sigma=col.data$Sigma, lat=col.data$Lat.in.Dec, long=col.data$Long.in.Dec, interval=5, x.res=250, y.res=250, land.file="/Users/lee/Dropbox/Documents/University of Iowa/countries", xmin=2950, xmax=6950)
mapGenHeatDensity <- function(map, date, sigma, xmin, xmax, lat, long, interval, x.res, y.res, land.file) {#
    stack.14C.4D <- function(date, sigma, xmin, xmax, lat, long){#
        date <- c(date, 100)#
        sigma <- c(sigma, 50)#
        lat <- c(lat, 0)#
        long <- c(long, 0)#
        date.frame <- data.frame(date, sigma, lat, long)#
        names(date.frame) <- c("Date", "Sigma", "Lat", "Long")#
        date.frame <- date.frame[complete.cases(date.frame),]#
        date.sub <- subset(date.frame, (xmin-500) < Date & Date < (xmax + 500))#
        ids.cus = paste("Date", 1:length(date.sub$Date), sep = "")#
        coord.sub <- data.frame(ids.cus, date.sub$Lat, date.sub$Long)#
        names(coord.sub) <- c(".id", "Lat", "Long")#
        samp.intcal <- rep("intcal13", length(date.sub$Date))#
        samp.slugdens <- BchronCalibrate(date.sub$Date, date.sub$Sigma, samp.intcal)#
        samp.ages <- ldply(samp.slugdens, data.frame)#
        samp.ages <- subset(samp.ages, samp.ages$densities > .0015)#
        samp.test <- merge(x=samp.ages, y=coord.sub, by.x=".id", by.y=".id")#
        samp.test$DensityScale <- reshape::rescaler.default(samp.test$densities, type = "range")#
        return(samp.test)#
    }#
    land <- readOGR(land.file)#
    polyland <- subset(land, land@data$COUNTRY==c("Spain", "Portugal"))#
    calibrated.date.frame <- stack.14C.4D(date=date, sigma=sigma, xmin=xmin, xmax=xmax, lat=lat, long=long)#
    calibrated.date.frame <- calibrated.date.frame[complete.cases(calibrated.date.frame),]#
    dateScrubOld <- function(dataframe, age.min, age.max) {#
        dataframe$point <- 0.1#
        dataframe$point[findInterval(dataframe$ageGrid, c(age.min,age.max)) == 1L] <- 1#
        dataframe$DensityPlot <- dataframe$DensityScale*dataframe$point#
        return(dataframe)#
    }#
    dateScrubBad <- function(dataframe, age.min, age.max) {#
        dataframe <- dataframe[complete.cases(dataframe),]#
        dataframe$point <- 0#
        dataframe$point[findInterval(dataframe$ageGrid, c(age.min,age.max)) == 1L] <- 1#
        dataframe.val <- subset(dataframe, dataframe$point==1)#
        dataframe.blank <- dataframe#
        dataframe.blank$densities <- dataframe.blank$densities*0#
        dataframe.blank$DensityScale <- dataframe.blank$DensityScale*0#
        dataframe.blank <- subset(dataframe.blank, dataframe$point==0)#
        all.ageGrid <- c(dataframe.val$ageGrid, dataframe.blank$ageGrid)#
        all.lat <- c(dataframe.val$Lat, dataframe.blank$Lat)#
        all.long <- c(dataframe.val$Long, dataframe.blank$Long)#
        all.densities <- c(dataframe.val$densities, dataframe.blank$densities)#
        all.densityscale <- c(dataframe.val$DensityScale, dataframe.blank$DensityScale)#
        all.legend <- c(as.vector(dataframe.val$Legend), as.vector(dataframe.blank$Legend))#
        full.date.frame <- data.frame(all.ageGrid,all.lat,all.long,all.densities, all.densityscale,all.legend)#
        colnames(full.date.frame) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale", "Legend")#
        full.date.frame <- full.date.frame[complete.cases(full.date.frame),]#
        return(full.date.frame)#
    }#
    dateScrub <- function(dataframe, age.min, age.max) {#
        dataframe$point <- 0#
        dataframe$point[findInterval(dataframe$ageGrid, c(age.min,age.max)) == 1L] <- 1#
        dataframe.val <- subset(dataframe, dataframe$point==1)#
        return(dataframe.val)#
    }#
    date.interval <- seq(from=xmin, to=xmax, by=interval)#
    date.interval <- rev(date.interval)#
    date.min <- date.interval-interval/2#
    date.max <- date.interval+interval/2#
    date.list <- pbapply::pblapply(date.interval, function(x) dateScrub(dataframe=calibrated.date.frame, age.min=x-interval/2, age.max=x+interval/2))#
    heat.function.min <- function(data.frame, x.res, y.res) {#
        data.frame <- data.frame[complete.cases(data.frame),]#
        data.frame.int <- with(data.frame, interp(x=Long, y=Lat, z=densities, duplicate="user", dupfun="max", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))#
        land.clip <- crop(data.map, polyland)#
        results <- land.clip@data#
        return(results)#
    }#
    heat.function.max <- function(data.frame, x.res, y.res) {#
        data.frame <- data.frame[complete.cases(data.frame),]#
        data.frame.int <- with(data.frame, interp(x=Long, y=Lat, z=densities, duplicate="user", dupfun="max", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))#
        land.clip <- crop(data.map, polyland)#
        results <- land.clip@data#
        return(results)#
    }#
    heat.function.mean <- function(data.frame, x.res, y.res) {#
        data.frame <- data.frame[complete.cases(data.frame),]#
        data.frame.int <- with(data.frame, interp(x=Long, y=Lat, z=DensityScale, duplicate="user", dupfun="mean", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))#
        land.clip <- crop(data.map, as(polyland, "SpatialPolygons"))#
        results <- land.clip@data#
        results <- results[complete.cases(results),]#
        #results$zmod <- reshape::rescaler.default(results$z, type = "range")#
        return(results)#
    }#
    animation::ani.options(convert="/usr/local/bin/convert")#
    animation::saveVideo(expr=for (i in seq_along(date.interval)) {#
        human.data <- date.list[[i]]#
        human.data <- data.frame(human.data$ageGrid, human.data$Lat, human.data$Long, human.data$densities, human.data$DensityScale, human.data$point)#
        colnames(human.data) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale",  "point")#
        blank.ageGrid <- c(0, 0, 0, 0)#
        blank.long <- c(-10, -10, 2.5, 2.5)#
        blank.lat <- c(45, 35, 35, 45)#
        blank.densities <- c(0, 0, 0, 0)#
        blank.point <- c(0, 0, 0, 0)#
        blank.human.frame <- data.frame(blank.ageGrid, blank.lat, blank.long, blank.densities, blank.densities, blank.point)#
        colnames(blank.human.frame) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale",  "point")#
        human.data.all <- rbind(human.data, blank.human.frame)#
        human.int <- heat.function.mean(human.data.all, x.res=x.res, y.res=y.res)#
        num <- formatC(seq(1, length(date.interval), 1), width=6, format="d", flag="0")#
        blank.human.plot <- ggmap(map) +#
        coord_equal() +#
        coord_map() +#
        scale_x_continuous("Longitude", limits=c(-10, 4)) +#
        scale_y_continuous("Latitude", limits=c(35, 45)) +#
        theme_tufte() +#
        ggtitle(paste(date.interval[i], " cal BP | Humans", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE, fill=FALSE)#
        val.human.plot <- ggmap(map) +#
        #geom_contour(data=human.int, aes(x=x, y=y, z=z), colour="red", alpha=0.2, binwidth=0.001)+#
        geom_tile(data=human.int, aes(x=x, y=y, fill=z,  alpha=z))+#
        coord_equal() +#
        coord_map() +#
        scale_alpha_continuous(range=c(0, 1), guide="none") +#
        scale_fill_gradient(name = "Latest Date", low="pink", high="red",  limits=c(0, 1)) +#
        scale_x_continuous("Longitude", limits=c(-10, 4)) +#
        scale_y_continuous("Latitude", limits=c(35, 45)) +#
        theme_tufte() +#
        ggtitle(paste(date.interval[i], " cal BP | Humans", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE, fill=FALSE)#
        human.z <- sum(human.int$z)#
        human.plot <- if(human.z==0) {#
            blank.human.plot#
        } else {#
            val.human.plot#
        }#
        ggsave(val.human.plot, filename=paste("/Users/lee/Dropbox/Documents/University of Iowa/Map Runs/map",num[i], ".tiff", sep=""), device="tiff", dpi=320, width=7, height=7)#
    }, video.name="iberia.mp4", img.name="map")#
    #ffmpeg -f image2 -i map%06d.tif -vcodec mjpeg -q:v 0 -r 25 iberia.mov#
}
mapGenHeatDensity(map=spain, date=col.data$CYrBPunc, sigma=col.data$Sigma, lat=col.data$Lat.in.Dec, long=col.data$Long.in.Dec, interval=5, x.res=250, y.res=250, land.file="/Users/lee/Dropbox/Documents/University of Iowa/countries", xmin=2950, xmax=6950)
human.data <- date.list[[5]]#
        human.data <- data.frame(human.data$ageGrid, human.data$Lat, human.data$Long, human.data$densities, human.data$DensityScale, human.data$point)#
        colnames(human.data) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale",  "point")#
        blank.ageGrid <- c(0, 0, 0, 0)#
        blank.long <- c(-10, -10, 2.5, 2.5)#
        blank.lat <- c(45, 35, 35, 45)#
        blank.densities <- c(0, 0, 0, 0)#
        blank.point <- c(0, 0, 0, 0)#
        blank.human.frame <- data.frame(blank.ageGrid, blank.lat, blank.long, blank.densities, blank.densities, blank.point)#
        colnames(blank.human.frame) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale",  "point")#
        human.data.all <- rbind(human.data, blank.human.frame)#
        human.int <- heat.function.mean(human.data.all, x.res=x.res, y.res=y.res)#
        num <- formatC(seq(1, length(date.interval), 1), width=6, format="d", flag="0")#
        blank.human.plot <- ggmap(map) +#
        coord_equal() +#
        coord_map() +#
        scale_x_continuous("Longitude", limits=c(-10, 4)) +#
        scale_y_continuous("Latitude", limits=c(35, 45)) +#
        theme_tufte() +#
        ggtitle(paste(date.interval[5], " cal BP | Humans", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE, fill=FALSE)#
        val.human.plot <- ggmap(map) +#
        #geom_contour(data=human.int, aes(x=x, y=y, z=z), colour="red", alpha=0.2, binwidth=0.001)+#
        geom_tile(data=human.int, aes(x=x, y=y, fill=z,  alpha=z))+#
        coord_equal() +#
        coord_map() +#
        scale_alpha_continuous(range=c(0, 1), guide="none") +#
        scale_fill_gradient(name = "Latest Date", low="pink", high="red",  limits=c(0, 1)) +#
        scale_x_continuous("Longitude", limits=c(-10, 4)) +#
        scale_y_continuous("Latitude", limits=c(35, 45)) +#
        theme_tufte() +#
        ggtitle(paste(date.interval[5], " cal BP | Humans", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE, fill=FALSE)#
        human.z <- sum(human.int$z)#
        human.plot <- if(human.z==0) {#
            blank.human.plot#
        } else {#
            val.human.plot#
        }
quartx()
quartz()
human.plot
head(date.list[40])
mapGenHeatDensity <- function(map, date, sigma, xmin, xmax, lat, long, interval, x.res, y.res, land.file) {#
    stack.14C.4D <- function(date, sigma, xmin, xmax, lat, long){#
        date <- c(date, 100)#
        sigma <- c(sigma, 50)#
        lat <- c(lat, 0)#
        long <- c(long, 0)#
        date.frame <- data.frame(date, sigma, lat, long)#
        names(date.frame) <- c("Date", "Sigma", "Lat", "Long")#
        date.frame <- date.frame[complete.cases(date.frame),]#
        date.sub <- subset(date.frame, (xmin-500) < Date & Date < (xmax + 500))#
        ids.cus = paste("Date", 1:length(date.sub$Date), sep = "")#
        coord.sub <- data.frame(ids.cus, date.sub$Lat, date.sub$Long)#
        names(coord.sub) <- c(".id", "Lat", "Long")#
        samp.intcal <- rep("intcal13", length(date.sub$Date))#
        samp.slugdens <- BchronCalibrate(date.sub$Date, date.sub$Sigma, samp.intcal)#
        samp.ages <- ldply(samp.slugdens, data.frame)#
        samp.ages <- subset(samp.ages, samp.ages$densities > .0015)#
        samp.test <- merge(x=samp.ages, y=coord.sub, by.x=".id", by.y=".id")#
        samp.test$DensityScale <- reshape::rescaler.default(samp.test$densities, type = "range")#
        return(samp.test)#
    }#
    land <- readOGR(land.file)#
    polyland <- subset(land, land@data$COUNTRY==c("Spain", "Portugal"))#
    calibrated.date.frame <- stack.14C.4D(date=date, sigma=sigma, xmin=xmin, xmax=xmax, lat=lat, long=long)#
    calibrated.date.frame <- calibrated.date.frame[complete.cases(calibrated.date.frame),]#
    dateScrubOld <- function(dataframe, age.min, age.max) {#
        dataframe$point <- 0.1#
        dataframe$point[findInterval(dataframe$ageGrid, c(age.min,age.max)) == 1L] <- 1#
        dataframe$DensityPlot <- dataframe$DensityScale*dataframe$point#
        return(dataframe)#
    }#
    dateScrubBad <- function(dataframe, age.min, age.max) {#
        dataframe <- dataframe[complete.cases(dataframe),]#
        dataframe$point <- 0#
        dataframe$point[findInterval(dataframe$ageGrid, c(age.min,age.max)) == 1L] <- 1#
        dataframe.val <- subset(dataframe, dataframe$point==1)#
        dataframe.blank <- dataframe#
        dataframe.blank$densities <- dataframe.blank$densities*0#
        dataframe.blank$DensityScale <- dataframe.blank$DensityScale*0#
        dataframe.blank <- subset(dataframe.blank, dataframe$point==0)#
        all.ageGrid <- c(dataframe.val$ageGrid, dataframe.blank$ageGrid)#
        all.lat <- c(dataframe.val$Lat, dataframe.blank$Lat)#
        all.long <- c(dataframe.val$Long, dataframe.blank$Long)#
        all.densities <- c(dataframe.val$densities, dataframe.blank$densities)#
        all.densityscale <- c(dataframe.val$DensityScale, dataframe.blank$DensityScale)#
        all.legend <- c(as.vector(dataframe.val$Legend), as.vector(dataframe.blank$Legend))#
        full.date.frame <- data.frame(all.ageGrid,all.lat,all.long,all.densities, all.densityscale,all.legend)#
        colnames(full.date.frame) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale", "Legend")#
        full.date.frame <- full.date.frame[complete.cases(full.date.frame),]#
        return(full.date.frame)#
    }#
    dateScrub <- function(dataframe, age.min, age.max) {#
        dataframe$point <- 0#
        dataframe$point[findInterval(dataframe$ageGrid, c(age.min,age.max)) == 1L] <- 1#
        dataframe.val <- subset(dataframe, dataframe$point==1)#
        return(dataframe.val)#
    }#
    date.interval <- seq(from=xmin, to=xmax, by=interval)#
    date.interval <- rev(date.interval)#
    date.min <- date.interval-interval/2#
    date.max <- date.interval+interval/2#
    date.list <- pbapply::pblapply(date.interval, function(x) dateScrub(dataframe=calibrated.date.frame, age.min=x-interval/2, age.max=x+interval/2))#
    heat.function.min <- function(data.frame, x.res, y.res) {#
        data.frame <- data.frame[complete.cases(data.frame),]#
        data.frame.int <- with(data.frame, interp(x=Long, y=Lat, z=densities, duplicate="user", dupfun="max", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))#
        land.clip <- crop(data.map, polyland)#
        results <- land.clip@data#
        return(results)#
    }#
    heat.function.max <- function(data.frame, x.res, y.res) {#
        data.frame <- data.frame[complete.cases(data.frame),]#
        data.frame.int <- with(data.frame, interp(x=Long, y=Lat, z=densities, duplicate="user", dupfun="max", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))#
        land.clip <- crop(data.map, polyland)#
        results <- land.clip@data#
        return(results)#
    }#
    heat.function.mean <- function(data.frame, x.res, y.res) {#
        data.frame <- data.frame[complete.cases(data.frame),]#
        data.frame.int <- with(data.frame, interp(x=Long, y=Lat, z=DensityScale, duplicate="user", dupfun="mean", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))#
        land.clip <- crop(data.map, as(polyland, "SpatialPolygons"))#
        results <- land.clip@data#
        results <- results[complete.cases(results),]#
        #results$zmod <- reshape::rescaler.default(results$z, type = "range")#
        return(results)#
    }#
    animation::ani.options(convert="/usr/local/bin/convert")#
    animation::saveVideo(expr=for (i in seq_along(date.interval)) {#
        human.data <- date.list[i]#
        human.data <- data.frame(human.data$ageGrid, human.data$Lat, human.data$Long, human.data$densities, human.data$DensityScale, human.data$point)#
        colnames(human.data) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale",  "point")#
        blank.ageGrid <- c(0, 0, 0, 0)#
        blank.long <- c(-10, -10, 2.5, 2.5)#
        blank.lat <- c(45, 35, 35, 45)#
        blank.densities <- c(0, 0, 0, 0)#
        blank.point <- c(0, 0, 0, 0)#
        blank.human.frame <- data.frame(blank.ageGrid, blank.lat, blank.long, blank.densities, blank.densities, blank.point)#
        colnames(blank.human.frame) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale",  "point")#
        human.data.all <- rbind(human.data, blank.human.frame)#
        human.int <- heat.function.mean(human.data.all, x.res=x.res, y.res=y.res)#
        num <- formatC(seq(1, length(date.interval), 1), width=6, format="d", flag="0")#
        blank.human.plot <- ggmap(map) +#
        coord_equal() +#
        coord_map() +#
        scale_x_continuous("Longitude", limits=c(-10, 4)) +#
        scale_y_continuous("Latitude", limits=c(35, 45)) +#
        theme_tufte() +#
        ggtitle(paste(date.interval[i], " cal BP | Humans", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE, fill=FALSE)#
        val.human.plot <- ggmap(map) +#
        #geom_contour(data=human.int, aes(x=x, y=y, z=z), colour="red", alpha=0.2, binwidth=0.001)+#
        geom_tile(data=human.int, aes(x=x, y=y, fill=z,  alpha=z))+#
        coord_equal() +#
        coord_map() +#
        scale_alpha_continuous(range=c(0, 1), guide="none") +#
        scale_fill_gradient(name = "Latest Date", low="pink", high="red",  limits=c(0, 1)) +#
        scale_x_continuous("Longitude", limits=c(-10, 4)) +#
        scale_y_continuous("Latitude", limits=c(35, 45)) +#
        theme_tufte() +#
        ggtitle(paste(date.interval[i], " cal BP | Humans", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE, fill=FALSE)#
        human.z <- sum(human.int$z)#
        human.plot <- if(human.z==0) {#
            blank.human.plot#
        } else {#
            val.human.plot#
        }#
        ggsave(human.plot, filename=paste("/Users/lee/Dropbox/Documents/University of Iowa/Map Runs/map",num[i], ".tiff", sep=""), device="tiff", dpi=320, width=7, height=7)#
    }, video.name="iberia.mp4", img.name="map")#
    #ffmpeg -f image2 -i map%06d.tif -vcodec mjpeg -q:v 0 -r 25 iberia.mov#
}
mapGenHeatDensity(map=spain, date=col.data$CYrBPunc, sigma=col.data$Sigma, lat=col.data$Lat.in.Dec, long=col.data$Long.in.Dec, interval=5, x.res=250, y.res=250, land.file="/Users/lee/Dropbox/Documents/University of Iowa/countries", xmin=2950, xmax=6950)
human.data <- date.list[i]
human.data <- date.list[40]
head(human.data)
human.data <- data.frame(date.list[40])
head(human.data)
mapGenHeatDensity <- function(map, date, sigma, xmin, xmax, lat, long, interval, x.res, y.res, land.file) {#
    stack.14C.4D <- function(date, sigma, xmin, xmax, lat, long){#
        date <- c(date, 100)#
        sigma <- c(sigma, 50)#
        lat <- c(lat, 0)#
        long <- c(long, 0)#
        date.frame <- data.frame(date, sigma, lat, long)#
        names(date.frame) <- c("Date", "Sigma", "Lat", "Long")#
        date.frame <- date.frame[complete.cases(date.frame),]#
        date.sub <- subset(date.frame, (xmin-500) < Date & Date < (xmax + 500))#
        ids.cus = paste("Date", 1:length(date.sub$Date), sep = "")#
        coord.sub <- data.frame(ids.cus, date.sub$Lat, date.sub$Long)#
        names(coord.sub) <- c(".id", "Lat", "Long")#
        samp.intcal <- rep("intcal13", length(date.sub$Date))#
        samp.slugdens <- BchronCalibrate(date.sub$Date, date.sub$Sigma, samp.intcal)#
        samp.ages <- ldply(samp.slugdens, data.frame)#
        samp.ages <- subset(samp.ages, samp.ages$densities > .0015)#
        samp.test <- merge(x=samp.ages, y=coord.sub, by.x=".id", by.y=".id")#
        samp.test$DensityScale <- reshape::rescaler.default(samp.test$densities, type = "range")#
        return(samp.test)#
    }#
    land <- readOGR(land.file)#
    polyland <- subset(land, land@data$COUNTRY==c("Spain", "Portugal"))#
    calibrated.date.frame <- stack.14C.4D(date=date, sigma=sigma, xmin=xmin, xmax=xmax, lat=lat, long=long)#
    calibrated.date.frame <- calibrated.date.frame[complete.cases(calibrated.date.frame),]#
    dateScrubOld <- function(dataframe, age.min, age.max) {#
        dataframe$point <- 0.1#
        dataframe$point[findInterval(dataframe$ageGrid, c(age.min,age.max)) == 1L] <- 1#
        dataframe$DensityPlot <- dataframe$DensityScale*dataframe$point#
        return(dataframe)#
    }#
    dateScrubBad <- function(dataframe, age.min, age.max) {#
        dataframe <- dataframe[complete.cases(dataframe),]#
        dataframe$point <- 0#
        dataframe$point[findInterval(dataframe$ageGrid, c(age.min,age.max)) == 1L] <- 1#
        dataframe.val <- subset(dataframe, dataframe$point==1)#
        dataframe.blank <- dataframe#
        dataframe.blank$densities <- dataframe.blank$densities*0#
        dataframe.blank$DensityScale <- dataframe.blank$DensityScale*0#
        dataframe.blank <- subset(dataframe.blank, dataframe$point==0)#
        all.ageGrid <- c(dataframe.val$ageGrid, dataframe.blank$ageGrid)#
        all.lat <- c(dataframe.val$Lat, dataframe.blank$Lat)#
        all.long <- c(dataframe.val$Long, dataframe.blank$Long)#
        all.densities <- c(dataframe.val$densities, dataframe.blank$densities)#
        all.densityscale <- c(dataframe.val$DensityScale, dataframe.blank$DensityScale)#
        all.legend <- c(as.vector(dataframe.val$Legend), as.vector(dataframe.blank$Legend))#
        full.date.frame <- data.frame(all.ageGrid,all.lat,all.long,all.densities, all.densityscale,all.legend)#
        colnames(full.date.frame) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale", "Legend")#
        full.date.frame <- full.date.frame[complete.cases(full.date.frame),]#
        return(full.date.frame)#
    }#
    dateScrub <- function(dataframe, age.min, age.max) {#
        dataframe$point <- 0#
        dataframe$point[findInterval(dataframe$ageGrid, c(age.min,age.max)) == 1L] <- 1#
        dataframe.val <- subset(dataframe, dataframe$point==1)#
        return(dataframe.val)#
    }#
    date.interval <- seq(from=xmin, to=xmax, by=interval)#
    date.interval <- rev(date.interval)#
    date.min <- date.interval-interval/2#
    date.max <- date.interval+interval/2#
    date.list <- pbapply::pblapply(date.interval, function(x) dateScrub(dataframe=calibrated.date.frame, age.min=x-interval/2, age.max=x+interval/2))#
    heat.function.min <- function(data.frame, x.res, y.res) {#
        data.frame <- data.frame[complete.cases(data.frame),]#
        data.frame.int <- with(data.frame, interp(x=Long, y=Lat, z=densities, duplicate="user", dupfun="max", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))#
        land.clip <- crop(data.map, polyland)#
        results <- land.clip@data#
        return(results)#
    }#
    heat.function.max <- function(data.frame, x.res, y.res) {#
        data.frame <- data.frame[complete.cases(data.frame),]#
        data.frame.int <- with(data.frame, interp(x=Long, y=Lat, z=densities, duplicate="user", dupfun="max", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))#
        land.clip <- crop(data.map, polyland)#
        results <- land.clip@data#
        return(results)#
    }#
    heat.function.mean <- function(data.frame, x.res, y.res) {#
        data.frame <- data.frame[complete.cases(data.frame),]#
        data.frame.int <- with(data.frame, interp(x=Long, y=Lat, z=DensityScale, duplicate="user", dupfun="mean", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))#
        land.clip <- crop(data.map, as(polyland, "SpatialPolygons"))#
        results <- land.clip@data#
        results <- results[complete.cases(results),]#
        #results$zmod <- reshape::rescaler.default(results$z, type = "range")#
        return(results)#
    }#
    animation::ani.options(convert="/usr/local/bin/convert")#
    animation::saveVideo(expr=for (i in seq_along(date.interval)) {#
        human.data <- data.frame(date.list[i])#
        human.data <- data.frame(human.data$ageGrid, human.data$Lat, human.data$Long, human.data$densities, human.data$DensityScale, human.data$point)#
        colnames(human.data) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale",  "point")#
        blank.ageGrid <- c(0, 0, 0, 0)#
        blank.long <- c(-10, -10, 2.5, 2.5)#
        blank.lat <- c(45, 35, 35, 45)#
        blank.densities <- c(0, 0, 0, 0)#
        blank.point <- c(0, 0, 0, 0)#
        blank.human.frame <- data.frame(blank.ageGrid, blank.lat, blank.long, blank.densities, blank.densities, blank.point)#
        colnames(blank.human.frame) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale",  "point")#
        human.data.all <- rbind(human.data, blank.human.frame)#
        human.int <- heat.function.mean(human.data.all, x.res=x.res, y.res=y.res)#
        num <- formatC(seq(1, length(date.interval), 1), width=6, format="d", flag="0")#
        blank.human.plot <- ggmap(map) +#
        coord_equal() +#
        coord_map() +#
        scale_x_continuous("Longitude", limits=c(-10, 4)) +#
        scale_y_continuous("Latitude", limits=c(35, 45)) +#
        theme_tufte() +#
        ggtitle(paste(date.interval[i], " cal BP | Humans", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE, fill=FALSE)#
        val.human.plot <- ggmap(map) +#
        #geom_contour(data=human.int, aes(x=x, y=y, z=z), colour="red", alpha=0.2, binwidth=0.001)+#
        geom_tile(data=human.int, aes(x=x, y=y, fill=z,  alpha=z))+#
        coord_equal() +#
        coord_map() +#
        scale_alpha_continuous(range=c(0, 1), guide="none") +#
        scale_fill_gradient(name = "Latest Date", low="pink", high="red",  limits=c(0, 1)) +#
        scale_x_continuous("Longitude", limits=c(-10, 4)) +#
        scale_y_continuous("Latitude", limits=c(35, 45)) +#
        theme_tufte() +#
        ggtitle(paste(date.interval[i], " cal BP | Humans", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE, fill=FALSE)#
        human.z <- sum(human.int$z)#
        human.plot <- if(human.z==0) {#
            blank.human.plot#
        } else {#
            val.human.plot#
        }#
        ggsave(human.plot, filename=paste("/Users/lee/Dropbox/Documents/University of Iowa/Map Runs/map",num[i], ".tiff", sep=""), device="tiff", dpi=320, width=7, height=7)#
    }, video.name="iberia.mp4", img.name="map")#
    #ffmpeg -f image2 -i map%06d.tif -vcodec mjpeg -q:v 0 -r 25 iberia.mov#
}
mapGenHeatDensity(map=spain, date=col.data$CYrBPunc, sigma=col.data$Sigma, lat=col.data$Lat.in.Dec, long=col.data$Long.in.Dec, interval=5, x.res=250, y.res=250, land.file="/Users/lee/Dropbox/Documents/University of Iowa/countries", xmin=2950, xmax=6950)
human.data <- data.frame(date.list[i])#
human.data <- date.list[[40]]
head(human.data)
dataframe <- human.data
dataframe <- data.frame[complete.cases(data.frame),]#
        data.frame.int <- with(dataframe, interp(x=Long, y=Lat, z=DensityScale, duplicate="user", dupfun="mean", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")
dataframe <- data.frame[complete.cases(dataframe),]#
        data.frame.int <- with(dataframe, interp(x=Long, y=Lat, z=DensityScale, duplicate="user", dupfun="mean", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")
dataframe <- dataframe[complete.cases(dataframe),]#
        data.frame.int <- with(dataframe, interp(x=Long, y=Lat, z=DensityScale, duplicate="user", dupfun="mean", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]
coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))#
        land.clip <- crop(data.map, as(polyland, "SpatialPolygons"))
results <- land.clip@data
head(results)
tail(results)
results <- results[complete.cases(results),]
head(results)
tail(results)
mapGenHeatDensity <- function(map, date, sigma, xmin, xmax, lat, long, interval, x.res, y.res, land.file) {#
    stack.14C.4D <- function(date, sigma, xmin, xmax, lat, long){#
        date <- c(date, 100)#
        sigma <- c(sigma, 50)#
        lat <- c(lat, 0)#
        long <- c(long, 0)#
        date.frame <- data.frame(date, sigma, lat, long)#
        names(date.frame) <- c("Date", "Sigma", "Lat", "Long")#
        date.frame <- date.frame[complete.cases(date.frame),]#
        date.sub <- subset(date.frame, (xmin-500) < Date & Date < (xmax + 500))#
        ids.cus = paste("Date", 1:length(date.sub$Date), sep = "")#
        coord.sub <- data.frame(ids.cus, date.sub$Lat, date.sub$Long)#
        names(coord.sub) <- c(".id", "Lat", "Long")#
        samp.intcal <- rep("intcal13", length(date.sub$Date))#
        samp.slugdens <- BchronCalibrate(date.sub$Date, date.sub$Sigma, samp.intcal)#
        samp.ages <- ldply(samp.slugdens, data.frame)#
        samp.ages <- subset(samp.ages, samp.ages$densities > .0015)#
        samp.test <- merge(x=samp.ages, y=coord.sub, by.x=".id", by.y=".id")#
        samp.test$DensityScale <- reshape::rescaler.default(samp.test$densities, type = "range")#
        return(samp.test)#
    }#
    land <- readOGR(land.file)#
    polyland <- subset(land, land@data$COUNTRY==c("Spain", "Portugal"))#
    calibrated.date.frame <- stack.14C.4D(date=date, sigma=sigma, xmin=xmin, xmax=xmax, lat=lat, long=long)#
    calibrated.date.frame <- calibrated.date.frame[complete.cases(calibrated.date.frame),]#
    dateScrubOld <- function(dataframe, age.min, age.max) {#
        dataframe$point <- 0.1#
        dataframe$point[findInterval(dataframe$ageGrid, c(age.min,age.max)) == 1L] <- 1#
        dataframe$DensityPlot <- dataframe$DensityScale*dataframe$point#
        return(dataframe)#
    }#
    dateScrubBad <- function(dataframe, age.min, age.max) {#
        dataframe <- dataframe[complete.cases(dataframe),]#
        dataframe$point <- 0#
        dataframe$point[findInterval(dataframe$ageGrid, c(age.min,age.max)) == 1L] <- 1#
        dataframe.val <- subset(dataframe, dataframe$point==1)#
        dataframe.blank <- dataframe#
        dataframe.blank$densities <- dataframe.blank$densities*0#
        dataframe.blank$DensityScale <- dataframe.blank$DensityScale*0#
        dataframe.blank <- subset(dataframe.blank, dataframe$point==0)#
        all.ageGrid <- c(dataframe.val$ageGrid, dataframe.blank$ageGrid)#
        all.lat <- c(dataframe.val$Lat, dataframe.blank$Lat)#
        all.long <- c(dataframe.val$Long, dataframe.blank$Long)#
        all.densities <- c(dataframe.val$densities, dataframe.blank$densities)#
        all.densityscale <- c(dataframe.val$DensityScale, dataframe.blank$DensityScale)#
        all.legend <- c(as.vector(dataframe.val$Legend), as.vector(dataframe.blank$Legend))#
        full.date.frame <- data.frame(all.ageGrid,all.lat,all.long,all.densities, all.densityscale,all.legend)#
        colnames(full.date.frame) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale", "Legend")#
        full.date.frame <- full.date.frame[complete.cases(full.date.frame),]#
        return(full.date.frame)#
    }#
    dateScrub <- function(dataframe, age.min, age.max) {#
        dataframe$point <- 0#
        dataframe$point[findInterval(dataframe$ageGrid, c(age.min,age.max)) == 1L] <- 1#
        dataframe.val <- subset(dataframe, dataframe$point==1)#
        return(dataframe.val)#
    }#
    date.interval <- seq(from=xmin, to=xmax, by=interval)#
    date.interval <- rev(date.interval)#
    date.min <- date.interval-interval/2#
    date.max <- date.interval+interval/2#
    date.list <- pbapply::pblapply(date.interval, function(x) dateScrub(dataframe=calibrated.date.frame, age.min=x-interval/2, age.max=x+interval/2))#
    heat.function.min <- function(data.frame, x.res, y.res) {#
        data.frame <- data.frame[complete.cases(data.frame),]#
        data.frame.int <- with(data.frame, interp(x=Long, y=Lat, z=densities, duplicate="user", dupfun="max", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))#
        land.clip <- crop(data.map, polyland)#
        results <- land.clip@data#
        return(results)#
    }#
    heat.function.max <- function(data.frame, x.res, y.res) {#
        data.frame <- data.frame[complete.cases(data.frame),]#
        data.frame.int <- with(data.frame, interp(x=Long, y=Lat, z=densities, duplicate="user", dupfun="max", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))#
        land.clip <- crop(data.map, polyland)#
        results <- land.clip@data#
        return(results)#
    }#
    heat.function.mean <- function(dataframe, x.res, y.res) {#
        dataframe <- dataframe[complete.cases(dataframe),]#
        data.frame.int <- with(dataframe, interp(x=Long, y=Lat, z=DensityScale, duplicate="user", dupfun="mean", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))#
        land.clip <- crop(data.map, as(polyland, "SpatialPolygons"))#
        results <- land.clip@data#
        results <- results[complete.cases(results),]#
        #results$zmod <- reshape::rescaler.default(results$z, type = "range")#
        return(results)#
    }#
    animation::ani.options(convert="/usr/local/bin/convert")#
    animation::saveVideo(expr=for (i in seq_along(date.interval)) {#
        human.data <- date.list[[i]]#
        human.data <- data.frame(human.data$ageGrid, human.data$Lat, human.data$Long, human.data$densities, human.data$DensityScale, human.data$point)#
        colnames(human.data) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale",  "point")#
        blank.ageGrid <- c(0, 0, 0, 0)#
        blank.long <- c(-10, -10, 2.5, 2.5)#
        blank.lat <- c(45, 35, 35, 45)#
        blank.densities <- c(0, 0, 0, 0)#
        blank.point <- c(0, 0, 0, 0)#
        blank.human.frame <- data.frame(blank.ageGrid, blank.lat, blank.long, blank.densities, blank.densities, blank.point)#
        colnames(blank.human.frame) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale",  "point")#
        human.data.all <- rbind(human.data, blank.human.frame)#
        human.int <- heat.function.mean(human.data.all, x.res=x.res, y.res=y.res)#
        num <- formatC(seq(1, length(date.interval), 1), width=6, format="d", flag="0")#
        blank.human.plot <- ggmap(map) +#
        coord_equal() +#
        coord_map() +#
        scale_x_continuous("Longitude", limits=c(-10, 4)) +#
        scale_y_continuous("Latitude", limits=c(35, 45)) +#
        theme_tufte() +#
        ggtitle(paste(date.interval[i], " cal BP | Humans", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE, fill=FALSE)#
        val.human.plot <- ggmap(map) +#
        #geom_contour(data=human.int, aes(x=x, y=y, z=z), colour="red", alpha=0.2, binwidth=0.001)+#
        geom_tile(data=human.int, aes(x=x, y=y, fill=z,  alpha=z))+#
        coord_equal() +#
        coord_map() +#
        scale_alpha_continuous(range=c(0, 1), guide="none") +#
        scale_fill_gradient(name = "Latest Date", low="pink", high="red",  limits=c(0, 1)) +#
        scale_x_continuous("Longitude", limits=c(-10, 4)) +#
        scale_y_continuous("Latitude", limits=c(35, 45)) +#
        theme_tufte() +#
        ggtitle(paste(date.interval[i], " cal BP | Humans", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE, fill=FALSE)#
        human.z <- sum(human.int$z)#
        human.plot <- if(human.z==0) {#
            blank.human.plot#
        } else {#
            val.human.plot#
        }#
        ggsave(human.plot, filename=paste("/Users/lee/Dropbox/Documents/University of Iowa/Map Runs/map",num[i], ".tiff", sep=""), device="tiff", dpi=320, width=7, height=7)#
    }, video.name="iberia.mp4", img.name="map")#
    #ffmpeg -f image2 -i map%06d.tif -vcodec mjpeg -q:v 0 -r 25 iberia.mov#
}
mapGenHeatDensity(map=spain, date=col.data$CYrBPunc, sigma=col.data$Sigma, lat=col.data$Lat.in.Dec, long=col.data$Long.in.Dec, interval=5, x.res=250, y.res=250, land.file="/Users/lee/Dropbox/Documents/University of Iowa/countries", xmin=2950, xmax=6950)
mapGenHeatDensity(map=spain, date=col.data$CYrBPunc, sigma=col.data$Sigma, lat=col.data$Lat, long=col.data$Long, interval=5, x.res=250, y.res=250, land.file="/Users/lee/Dropbox/Documents/University of Iowa/countries", xmin=2950, xmax=6950)
#Erase everything that comes before#
rm(list = ls(all = TRUE))#
#
#packrat::init("~/Dropbox/4.2 ky event/Data Analysis/R Code/For Distribution/Neolithic")#
#
#Compatibility#
if(.Platform$OS.type=="windows") {#
    quartz<-function() windows()#
}#
#
###Load Packages#
library(TTR)#
library(ggplot2)#
library(gridExtra)#
library(scales)#
library(gtable)#
library(wq)#
library(Bchron)#
library(plyr)#
library(bcp)#
#library(mgcv)#
library(reshape)#
library(akima)#
library(ggmap)#
library(ggthemes)#
library(pbapply)#
library(colorRamps)#
library(grDevices)#
library(sp)#
library(PBSmapping)#
library(raster)#
library(maptools)#
library(rgeos)#
library(rgdal)#
###Download Packages (if needed) at http://www.bleedrake.com/Neolithic/Neolithic.zip#
#
###Load Data#
iberia.koppen <- read.csv(file="/Users/lee/Dropbox/Documents/University of Iowa/4.2 ky event/Radiocarbon Final/Iberia_Koppen/Sheet 1-Table 1.csv")#
#
###Load Calibration Curves#
intcal.13 <- read.csv(file="http://www.bleedrake.com/Neolithic/intcal13.csv")#
#####Collapse Dates#
collapse.the.dates.begin <- function(sites, biogeo, general, dates, sigma, lat, long) {#
    n.t <- rep(100, length(sites))#
    df <- data.frame(sites, biogeo, general, dates, sigma, lat, long)#
    colnames(df) <- c("Site", "Biogeo_Uni", "St_Area_NE", "CYrBPunc", "Sigma", "Lat", "Long")#
    df <- arrange(df, desc(CYrBPunc))#
    df <- arrange(df, desc(Site))#
    df <- arrange(df, desc(Biogeo_Uni))#
    df <- arrange(df, desc(St_Area_NE))#
    df$Ttest <- c(#
    (abs(df[1:(nrow(df)-1),4]-df[2:nrow(df), 4]))/((sqrt(df[2:nrow(df), 5]^2 + df[1:(nrow(df)-1),5]^2)*sqrt(1/100))), NA)#
    df$pvalue <- c((2*pt(df[1:nrow(df),6], 100, lower=FALSE)))#
    df$Collapse <- rep("No", length(sites))#
    df <- transform(df, Collapse = ifelse(pvalue > 0.05, "Yes", Collapse))#
    df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
    df <- as.data.frame(df)#
    df <- df[complete.cases(df),]#
    return(df)#
}#
#
neolithic.bio <- collapse.the.dates.begin(sites=iberia.koppen$Site, biogeo=iberia.koppen$Koppen, general=iberia.koppen$Region, dates=iberia.koppen$CYrBPunc, sigma=iberia.koppen$Sigma, lat=iberia.koppen$Lat, long=iberia.koppen$Long_)#
###Create vectors from data set by region#
####################################################
#######Calibration & Confidence Band Function#######
####################################################
#
###Multicore apply function with status bar#
mcpblapply <- function (X, FUN, ..., mc.preschedule = TRUE, mc.set.seed = TRUE,#
mc.silent = FALSE, mc.cores = getOption("mc.cores", 2L),#
mc.cleanup = TRUE, mc.allow.recursive = TRUE, USE.NAMES = TRUE, simplify = TRUE)#
{#
    FUN <- match.fun(FUN)#
    if (!is.vector(X) || is.object(X))#
    X <- as.list(X)#
    B <- length(X)#
    if (!(interactive() && dopb() && B >= 1))#
    return(mclapply(X, FUN, ...#
    ))#
    pb <- startpb(0, B)#
    rval <- vector("list", B)#
    for (i in 1:B) {#
        rval[i] <- list(FUN(X[[i]], ...))#
        setpb(pb, i)#
    }#
    close(pb)#
    names(rval) <- names(X)#
    rval#
}#
#
mcpbsapply <- function (X, FUN, ..., mc.preschedule = TRUE, mc.set.seed = TRUE,#
mc.silent = FALSE, mc.cores = getOption("mc.cores", 2L),#
mc.cleanup = TRUE, mc.allow.recursive = TRUE, USE.NAMES = TRUE, simplify = TRUE)#
{#
    FUN <- match.fun(FUN)#
    answer <- mcpblapply(X = X, FUN = FUN,  ..., USE.NAMES = TRUE)#
    if (USE.NAMES && is.character(X) && is.null(names(answer)))#
    names(answer) <- X#
    if (!identical(simplify, FALSE) && length(answer))#
    simplify2array(answer, higher = (simplify == "array"))#
    else answer#
}#
#
mcreplicate <- function(n, expr, simplify = "array", mc.cores = getOption("mc.cores", 2L)) {#
    mcpbsapply(integer(n), eval.parent(substitute(function(...) expr)), mc.cores = getOption("mc.cores", 2L),#
    simplify = simplify)#
}#
conf.loess <- function(x, sigma, n, reps, xmin, xmax) {#
    samp.intcal <- rep("intcal13", length(x))#
    samp.slugdens <- BchronCalibrate(x, sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    res.by <- by(samp.ages$ageGrid, samp.ages$.id, median)#
    res.t <- t(res.by)#
    samp.age.grid <- c(samp.ages$ageGrid, xmin, xmax)#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.grid <- sort(samp.age.grid, decreasing=TRUE)#
    samp.grid <- samp.grid[samp.grid < xmax & samp.grid > xmin]#
    samp.hist <- hist(samp.grid, breaks=length(time))#
    samp.hist <- data.frame(time, samp.hist$counts, samp.hist$counts/sum(samp.hist$counts))#
    colnames(samp.hist) <- c("Age", "Counts", "Density")#
    #samp.hist <- arrange(samp.all, desc(Age))#
    makeloess <- function(x, n){#
        time <- seq(xmin+5, xmax-5, 10)#
        samp.age <- sample(x, size=n, replace=TRUE)#
        samp.dist <- sapply(1:n, function(x) rnorm(500, samp.age, 85))#
        samp.dist <- as.vector(samp.dist)#
        samp.dist <- c(xmax, xmin, samp.dist)#
        samp.date <- tapply(samp.dist, cut(samp.dist, length(time)), length)#
        samp.loess <- lowess(time, samp.date, f=0.15)#
        samp.fitted <- samp.loess$y#
        return(samp.fitted)#
    }#
    samp.replicate <- (replicate(reps, makeloess(res.t, n)))#
    samp.replicate <- as.data.frame(samp.replicate)#
    samp.replicate[is.na(samp.replicate)] <- 0#
    samp.replicate <- sweep(samp.replicate,2,colSums(samp.replicate),`/`)#
    samp.results.replicate <- transform(samp.replicate, MEAN=apply(samp.replicate,1, mean, na.rm = TRUE))#
    samp.results.replicate <- transform(samp.results.replicate, SD=apply(samp.results.replicate,1, sd, na.rm = TRUE))#
    samp.descriptive <- data.frame(time, samp.results.replicate$MEAN, samp.results.replicate$SD)#
    colnames(samp.descriptive) <- c("Age", "Mean", "SD")#
    #samp.descriptive <- arrange(samp.descriptive, desc(Age))#
    samp.all <- data.frame(time, samp.hist$Density, samp.hist$Counts, samp.descriptive$Mean, samp.descriptive$SD, samp.replicate)#
    names(samp.all)[names(samp.all)=="time"] <- "Age"#
    names(samp.all)[names(samp.all)=="samp.descriptive.Mean"] <- "Mean"#
    names(samp.all)[names(samp.all)=="samp.descriptive.SD"] <- "SD"#
    names(samp.all)[names(samp.all)=="samp.hist.Density"] <- "Density"#
    names(samp.all)[names(samp.all)=="samp.hist.Counts"] <- "Counts"#
    samp.all <- arrange(samp.all, desc(Age))#
    return(samp.all)#
}#
######Function to Generate Confidence Bands around SCDRD#
conf.cal.loess <- function(dates, sigma, n, reps, sites, xmin, xmax, ..., cores = getOption("mc.cores", 2L), collapse.dates=FALSE) {#
    collapse.the.dates <- function(sites, dates, sigma) {#
        n.t <- rep(100, length(sites))#
        df <- data.frame(sites, dates, sigma)#
        colnames(df) <- c("Sites", "Date", "Sigma")#
        df <- arrange(df, desc(Date))#
        df <- arrange(df, desc(Sites))#
        df$Ttest <- c(#
        (abs(df[1:(nrow(df)-1),2]-df[2:nrow(df), 2]))/((sqrt(df[2:nrow(df), 3]^2 + df[1:(nrow(df)-1),3]^2)*sqrt(1/100))), NA)#
        df$pvalue <- c((2*pt(df[1:nrow(df),4], 100, lower=FALSE)))#
        df$Collapse <- rep("No", length(sites))#
        df <- transform(df, Collapse = ifelse(pvalue > 0.05, "Yes", Collapse))#
        df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
        df <- as.data.frame(df)#
        df <- df[complete.cases(df),]#
        return(df)#
    }#
    uncollapse.the.dates <- function(sites, dates, sigma) {#
        df <- data.frame(sites, dates, sigma)#
        colnames(df) <- c("Sites", "Date", "Sigma")#
        return(df)#
    }#
    date.data <- if(isTRUE(collapse.dates)){#
        collapse.the.dates(sites, dates, sigma)#
    } else {#
        uncollapse.the.dates(sites, dates, sigma)#
    }#
    samp.intcal <- rep("intcal13", length(date.data$Date))#
    samp.slugdens <- BchronCalibrate(date.data$Date, date.data$Sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    res.by <- by(samp.ages$ageGrid, samp.ages$.id, median)#
    res.t <- t(res.by)#
    fill <- seq(xmin, xmax, 1)#
    samp.age.grid <- c(samp.ages$ageGrid, fill)#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.grid <- sort(samp.age.grid, decreasing=TRUE)#
    samp.grid <- samp.grid[samp.grid < xmax & samp.grid > xmin]#
    samp.hist <- hist(samp.grid, breaks=length(time))#
    samp.hist <- data.frame(time, samp.hist$counts, samp.hist$counts/sum(samp.hist$counts))#
    colnames(samp.hist) <- c("Age", "Counts", "Density")#
    #samp.hist <- arrange(samp.all, desc(Age))#
    makeloess <- function(dates, n){#
        time <- seq(xmin+5, xmax-5, 10)#
        n.s <- length(dates)#
        samp.order <- sample(n.s, size=n, replace=TRUE)#
        samp.dist.n <- samp.slugdens[samp.order]#
        temp.ages <- ldply(samp.dist.n, data.frame)#
        temp.age.grid <- c(temp.ages$ageGrid, fill)#
        temp.grid <- temp.age.grid[temp.age.grid < xmax & samp.grid > xmin]#
        samp.dist <- c(fill, temp.grid)#
        samp.dist <- as.vector(samp.dist)#
        samp.dist <- c(xmax, xmin, samp.dist)#
        samp.date <- tapply(samp.dist, cut(samp.dist, length(time)), length)#
        samp.loess <- lowess(time, samp.date, f=0.15)#
        samp.fitted <- samp.loess$y#
        return(samp.fitted)#
    }#
    samp.replicate <- (mcreplicate(reps, makeloess(dates, n)))#
    samp.replicate.dat <- as.data.frame(samp.replicate)#
    samp.replicate.dat[is.na(samp.replicate.dat)] <- 0#
    samp.replicated <- sweep(samp.replicate.dat,2,colSums(samp.replicate.dat),`/`)#
    samp.results.replicated.m <- transform(samp.replicated, MEAN=apply(X=samp.replicated, MARGIN=1, FUN=mean, na.rm = TRUE))#
    samp.results.replicated.s <- transform(samp.replicated, SD=apply(X=samp.replicated, MARGIN=1, FUN=sd, na.rm = TRUE))#
    samp.descriptive <- data.frame(time, samp.results.replicated.m$MEAN, samp.results.replicated.s$SD)#
    colnames(samp.descriptive) <- c("Age", "Mean", "SD")#
    #samp.descriptive <- arrange(samp.descriptive, desc(Age))#
    samp.all <- data.frame(time, samp.hist$Density, samp.hist$Counts, samp.descriptive$Mean, samp.descriptive$SD)#
    names(samp.all)[names(samp.all)=="time"] <- "Age"#
    names(samp.all)[names(samp.all)=="samp.descriptive.Mean"] <- "Mean"#
    names(samp.all)[names(samp.all)=="samp.descriptive.SD"] <- "SD"#
    names(samp.all)[names(samp.all)=="samp.hist.Density"] <- "Density"#
    names(samp.all)[names(samp.all)=="samp.hist.Counts"] <- "Counts"#
    samp.all <- arrange(samp.all, desc(Age))#
    return(samp.all)#
}#
#
###Traditional SCDPD#
BchronDensityCollapse <- function (dates, sigma, sites,  dfs = rep(100, length(dates)), numMix = 30,#
iterations = 10000, burn = 2000, thin = 8, updateAges = FALSE, collapse.dates=FALSE)#
{#
    collapse.the.dates <- function(sites, dates, sigma) {#
        n.t <- rep(100, length(sites))#
        df <- data.frame(sites, dates, sigma)#
        colnames(df) <- c("Sites", "Date", "Sigma")#
        df <- arrange(df, desc(Date))#
        df <- arrange(df, desc(Sites))#
        df$Ttest <- c(#
        (abs(df[1:(nrow(df)-1),2]-df[2:nrow(df), 2]))/((sqrt(df[2:nrow(df), 3]^2 + df[1:(nrow(df)-1),3]^2)*sqrt(1/100))), NA)#
        df$pvalue <- c((2*pt(df[1:nrow(df),4], 100, lower=FALSE)))#
        df$Collapse <- rep("No", length(sites))#
        df <- transform(df, Collapse = ifelse(pvalue > 0.05, "Yes", Collapse))#
        df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
        return(df)#
    }#
    uncollapse.the.dates <- function(sites, dates, sigma) {#
        df <- data.frame(sites, dates, sigma)#
        colnames(df) <- c("Sites", "Date", "Sigma")#
        return(df)#
    }#
    date.data <- if(isTRUE(collapse.dates)){#
        collapse.the.dates(sites, dates, sigma)#
    } else {#
        uncollapse.the.dates(sites, dates, sigma)#
    }#
    pathToCalCurves = system.file("data",#
    package = "Bchron")#
    calCurves <- rep("intcal13", length(date.data$Date))#
    ages <- date.data$Date#
    ageSds <- date.data$Sigma#
    if (length(ages) != length(ageSds))#
    stop("ages and 1-sigma errors must be same length")#
    if (length(ages) != length(calCurves))#
    stop("ages and Calibration curves must be same length")#
    x = BchronCalibrate(ages = ages, ageSds = ageSds, calCurves = calCurves,#
    pathToCalCurves = pathToCalCurves, eps = 0, dfs = rep(100,#
    length(ages)))#
    xSmall = BchronCalibrate(ages = ages, ageSds = ageSds, calCurves = calCurves,#
    pathToCalCurves = pathToCalCurves, dfs = rep(100, length(ages)))#
    n = length(x)#
    thetaRange = range(xSmall[[1]]$ageGrid)#
    for (i in 2:n) thetaRange = range(c(thetaRange, xSmall[[i]]$ageGrid))#
    offset = vector(length = n)#
    for (i in 1:n) {#
        offset[i] = ifelse(x[[i]]$calCurve == "normal", 61, 0)#
    }#
    gauss <- function(x, mu, sig) {#
        u <- (x - mu)/sig#
        y <- exp(-u * u/2)#
        y#
    }#
    gbase <- function(x, mus) {#
        sig <- (mus[2] - mus[1])/2#
        G <- outer(x, mus, gauss, sig)#
        G#
    }#
    clrInv = function(phi) {#
        return(exp(phi)/sum(exp(phi)))#
    }#
    J = numMix#
    mu = seq(thetaRange[1], thetaRange[2], length = numMix)#
    theta = vector(length = n)#
    for (j in 1:n) theta[j] = round(stats::rnorm(1, mean = x[[j]]$ageGrid[match(max(x[[j]]$densities),#
    x[[j]]$densities)], sd = ageSds[j]), 3)#
    phi = c(stats::runif(J - 1, -10, 10), 0)#
    p = as.numeric(clrInv(phi))#
    G = gbase(theta, mu)#
    remaining = (iterations - burn)/thin#
    thetaStore = matrix(ncol = length(theta), nrow = remaining)#
    pStore = matrix(ncol = J, nrow = remaining)#
    thetaAll = matrix(NA, ncol = n, nrow = iterations)#
    for (j in 1:n) thetaAll[, j] = sample(xSmall[[j]]$ageGrid,#
    size = iterations, prob = xSmall[[j]]$densities, replace = TRUE)#
    mu2 = mu#
    sigma2 = (mu[2] - mu[1])/2#
    my_dnorm = function(x) stats::dnorm(x, mean = mu2, sd = sigma2)#
    pb = utils::txtProgressBar(min = 1, max = iterations, style = 3,#
    width = 60, title = "Running BchronDensity")#
    for (i in 1:iterations) {#
        utils::setTxtProgressBar(pb, i)#
        if (i > burn & i%%thin == 0) {#
            ind = (i - burn)/thin#
            thetaStore[ind, ] = theta#
            pStore[ind, ] = p#
        }#
        if (updateAges) {#
            for (j in 1:n) {#
                thetaNew = round(stats::rnorm(1, theta[j], 0.5),#
                3)#
                thetaNewMatch = as.integer(thetaNew + offset[j]) +#
                1#
                thetaNewLogDens = max(log(x[[j]]$densities[thetaNewMatch]),#
                -1e+06)#
                priorNew.dens = sum(p * stats::dnorm(thetaNew,#
                mean = mu2, sd = sigma2))#
                thetaMatch = as.integer(theta[j] + offset[j]) +#
                1#
                thetaLogDens = max(log(x[[j]]$densities[thetaMatch]),#
                -1e+06)#
                priorDens = sum(p * stats::dnorm(theta[j], mean = mu2,#
                sd = sigma2))#
                logRtheta = thetaNewLogDens - thetaLogDens +#
                log(priorNew.dens) - log(priorDens)#
                if (stats::runif(1) < exp(logRtheta))#
                theta[j] = thetaNew#
            }#
        }#
        else {#
            theta = thetaAll[i, ]#
        }#
        for (j in 1:(J - 1)) {#
            phiNew = stats::rnorm(1, phi[j], 1)#
            phiAllNew = phi#
            phiAllNew[j] = phiNew#
            pNew = as.numeric(clrInv(phiAllNew))#
            phiNewLogDens = sum(log(G %*% pNew))#
            phiLogDens = sum(log(G %*% p))#
            logRphi = phiNewLogDens - phiLogDens + stats::dunif(phiNew,#
            -10, 10, log = TRUE) - stats::dunif(phi[j], -10,#
            10, log = TRUE)#
            if (stats::runif(1) < exp(logRphi)) {#
                phi[j] = phiNew#
                p = as.numeric(clrInv(phi))#
            }#
        }#
    }#
    output = list(theta = thetaStore, p = pStore, mu = mu, calAges = xSmall,#
    G = G)#
    class(output) = "BchronDensityRun"#
    return(output)#
}#
#
###Function to modify existing SCDPD from BchronDensity (modified from Bchron)#
SlugDens.t <- function (x, xmin, xmax)#
{#
    n = length(x$calAges)#
    thetaRange = range(x$calAges[[1]]$ageGrid)#
    for (i in 2:n) thetaRange = range(c(thetaRange, x$calAges[[i]]$ageGrid))#
    dateGrid = seq(xmin, xmax, length = 1000)#
    gauss <- function(x, mu, sig) {#
        u <- (x - mu)/sig#
        y <- exp(-u * u/2)#
        y#
    }#
    gbase <- function(x, mus) {#
        sig <- (mus[2] - mus[1])/2#
        G <- outer(x, mus, gauss, sig)#
        G#
    }#
    Gstar = gbase(dateGrid, x$mu)#
    dens = vector(length = length(dateGrid))#
    for (i in 1:nrow(x$p)) {#
        dens = dens + Gstar %*% x$p[i, ]#
    }#
    densFinal = dens/sum(dens)#
    slugbase <- data.frame(dateGrid,densFinal)#
    colnames(slugbase) <- c("Age", "Density")#
    slugbase <- arrange(slugbase, desc(Age))#
    return(slugbase)#
}#
#
SlugSig <- function(x, sigma, n, reps, xmin, xmax) {#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.intcal <- rep("intcal13", length(x))#
    samp.slugdens <- BchronDensity(x, sigma, samp.intcal, numMix = 30, iterations=10000, burn=2000, thin=8, updateAges=FALSE)#
    samp.hist <- SlugDens.t(samp.slugdens, xmin, xmax)#
    makeloess <- function(x, n){#
        time <- seq(xmin+5, xmax-5, 10)#
        samp.14C <- sample(x, size=n, replace=TRUE)#
        samp.sig <- sample(sigma, size=n, replace=TRUE)#
        samp.dist.n <- BchronDensity(samp.14C, samp.sig, rep("intcal13", n), numMix = 30, iterations=10000, burn=2000, thin=8, updateAges=FALSE)#
        samp.dist <- SlugDens.t(samp.dist.n, xmin, xmax)#
        samp.loess <- lowess(samp.dist$Age, samp.dist$Density, f=0.15)#
        samp.fitted <- samp.loess$y#
        return(samp.fitted)#
    }#
    samp.replicate <- (pbreplicate(reps, makeloess(x, n)))#
    samp.replicate <- as.data.frame(samp.replicate)#
    samp.replicate[is.na(samp.replicate)] <- 0#
    samp.replicate <- sweep(samp.replicate,2,colSums(samp.replicate),`/`)#
    samp.results.replicate <- transform(samp.replicate, MEAN=apply(samp.replicate,1, mean, na.rm = TRUE))#
    samp.results.replicate <- transform(samp.results.replicate, SD=apply(samp.results.replicate,1, sd, na.rm = TRUE))#
    samp.descriptive <- data.frame(samp.hist$Age, samp.results.replicate$MEAN, samp.results.replicate$SD)#
    colnames(samp.descriptive) <- c("Age", "Mean", "SD")#
    #samp.descriptive <- arrange(samp.descriptive, desc(Age))#
    samp.all <- data.frame(samp.hist$Age, samp.hist$Density, samp.descriptive$Mean, samp.descriptive$SD, samp.replicate)#
    names(samp.all)[names(samp.all)=="samp.hist.Age"] <- "Age"#
    names(samp.all)[names(samp.all)=="samp.descriptive.Mean"] <- "Mean"#
    names(samp.all)[names(samp.all)=="samp.descriptive.SD"] <- "SD"#
    names(samp.all)[names(samp.all)=="samp.hist.Density"] <- "Density"#
    samp.all <- arrange(samp.all, desc(Age))#
    return(samp.all)#
}#
########
stack.14C <- function(x, sigma, xmin, xmax){#
    samp.intcal <- rep("intcal13", length(x))#
    samp.slugdens <- BchronCalibrate(x, sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    fill <- seq(xmin, xmax, 1)#
    samp.age.grid <- c(samp.ages$ageGrid, fill)#
    samp.grid <- sort(samp.age.grid, decreasing=TRUE)#
    samp.grid <- samp.grid[samp.grid < xmax & samp.grid > xmin]#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.hist <- hist(samp.grid, breaks=length(time))#
    samp.hist <- data.frame(time, samp.hist$counts, samp.hist$counts/sum(samp.hist$counts))#
    colnames(samp.hist) <- c("Age", "Counts", "Density")#
    return(samp.hist)#
}#
median.stack.14C <- function(x, sigma, xmin, xmax){#
    samp.intcal <- rep("intcal13", length(x))#
    samp.slugdens <- BchronCalibrate(x, sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.median <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, median))#
    medians.all <-as.vector(samp.median[,1])#
    n <- length(medians.all)#
    medians <- medians.all[medians.all < xmax & medians.all > xmin]#
    return(medians)#
}#
stack.14C.4D <- function(date, sigma, xmin, xmax, lat, long){#
    date.frame <- data.frame(date, sigma, lat, long)#
    names(date.frame) <- c("Date", "Sigma", "Lat", "Long")#
    date.sub <- subset(date.frame, xmin < Date & Date < xmax)#
    ids.cus = paste("Date", 1:length(date.sub$Date), sep = "")#
    coord.sub <- data.frame(ids.cus, date.sub$Lat, date.sub$Long)#
    names(coord.sub) <- c(".id", "Lat", "Long")#
    samp.intcal <- rep("intcal13", length(date.sub$Date))#
    samp.slugdens <- BchronCalibrate(date.sub$Date, date.sub$Sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.coord <- merge(samp.ages, coord.sub, by.x=".id")#
    return(samp.coord)#
}#
median.stack.14C <- function(x, sigma, xmin, xmax){#
    samp.intcal <- rep("intcal13", length(x))#
    samp.slugdens <- BchronCalibrate(x, sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.median <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, median))#
    medians.all <-as.vector(samp.median[,1])#
    n <- length(medians.all)#
    medians <- medians.all[medians.all < xmax & medians.all > xmin]#
    return(medians)#
}#
#
mapGen <- function(map, date, sigma, xmin, xmax, lat, long, interval, x.res, y.res) {#
    calibrated.date.frame <- stack.14C.4D(date=date, sigma=sigma, xmin=xmin, xmax=xmax, lat=lat, long=long)#
    date.interval <- seq(from=xmin, to=xmax, by=interval)#
    date.interval <- rev(date.interval)#
    results.int.dur <- with(calibrated.date.frame, interp(x=Long, y=Lat, z=ageGrid, duplicate="mean", nx=x.res, ny=y.res))#
    results.int.dur.melt <- melt(results.int.dur$z, na.rm=TRUE)#
    colnames(results.int.dur.melt) <- c("x", "y", "z")#
    results.int.dur.melt$x <- results.int.dur$x[results.int.dur.melt$x]#
    results.int.dur.melt$y <- results.int.dur$y[results.int.dur.melt$y]#
    results.int.dur.melt[is.na(results.int.dur.melt)] <- 0#
    animation::saveGIF(expr=for (i in seq_along(date.interval)) {#
        num <- seq(1, length(date.interval), 1)#
        plots <- ggmap(map, alpha=0.2) +#
        #stat_contour(data=results.int.dur.melt, aes(x=x, y=y, z=z, fill=z, alpha=z))+#
        geom_tile(data=results.int.dur.melt, aes(x=x, y=y, z=z, fill=z, alpha=z))+#
        coord_equal() +#
        scale_fill_gradient(name = "14C Activity", low="white", high="red", limits = c(date.interval[i], date.interval[i]+interval)) +#
        scale_alpha(guide="none") +#
        scale_y_continuous("Latitude", limits = c(35, 46)) +#
        scale_x_continuous("Longitude", limits = c(-10, 5)) +#
        coord_map() +#
        theme_tufte() +#
        ggtitle(paste(date.interval[i])) +#
        guides(size=FALSE)#
        ggsave(plots, filename=paste("map",num[i], ".png", sep=""))#
    }, movie.name="iberia.gif", convert = "gm convert" )#
}#
#
plotGen <- function(calibrated.date.frame, interval, x.res, y.res) {#
    date.interval <- seq(from=min(calibrated.date.frame$ageGrid), to=max(calibrated.date.frame$ageGrid), by=interval)#
    date.list <- pbapply::pblapply(date.interval, function(x) subset(calibrated.date.frame, calibrated.date.frame$ageGrid > x && calibrated.date.frame$ageGrid < x+interval))#
    interpolation <- function(cal.date.frame) {#
        results.int.dur <- with(cal.date.frame, interp(x=Long, y=Lat, z=ageGrid, duplicate="mean", nx=x.res, ny=y.res))#
        results.int.dur.melt <- melt(results.int.dur$z, na.rm=TRUE)#
        colnames(results.int.dur.melt) <- c("x", "y", "z")#
        results.int.dur.melt$x <- results.int.dur$x[results.int.dur.melt$x]#
        results.int.dur.melt$y <- results.int.dur$y[results.int.dur.melt$y]#
        results.int.dur.melt[is.na(results.int.dur.melt)] <- 0#
        return(results.int.dur.melt)#
    }#
    date.list.interp <- lapply(date.list, function(x) interpolation(x))#
    for (i in seq_along(date.list.interp)) {#
        num <- seq(1, length(date.list.interp), 1)#
        plots <- ggplot() +#
        #stat_contour(data=data.frame(date.list.interp[i]), aes(x=x, y=y, z=z, fill=z, alpha=z))+#
        geom_tile(data=data.frame(date.list.interp[i]), aes(x=x, y=y, z=z, fill=z, alpha=z))+#
        coord_equal() +#
        scale_fill_gradient(name = "14C Activity", low="white", high="red", na.value="white") +#
        scale_alpha(guide="none") +#
        scale_y_continuous("Latitude", limits = c(35, 46)) +#
        scale_x_continuous("Longitude", limits = c(-10, 5)) +#
        coord_map() +#
        theme_tufte() +#
        ggtitle("10,000 BP") +#
        guides(size=FALSE)#
        ggsave(plots, filename=paste("map",num[i], ".png", sep=""))#
    }#
}#
plotGenAlt <- function(date, sigma, xmin, xmax, lat, long, interval, x.res, y.res) {#
    calibrated.date.frame <- stack.14C.4D(date=date, sigma=sigma, xmin=xmin, xmax=xmax, lat=lat, long=long)#
    date.interval <- seq(from=xmin, to=xmax, by=interval)#
    date.interval <- rev(date.interval)#
    results.int.dur <- with(calibrated.date.frame, interp(x=Long, y=Lat, z=ageGrid, duplicate="mean", nx=x.res, ny=y.res))#
    results.int.dur.melt <- melt(results.int.dur$z, na.rm=TRUE)#
    colnames(results.int.dur.melt) <- c("x", "y", "z")#
    results.int.dur.melt$x <- results.int.dur$x[results.int.dur.melt$x]#
    results.int.dur.melt$y <- results.int.dur$y[results.int.dur.melt$y]#
    results.int.dur.melt[is.na(results.int.dur.melt)] <- 0#
    animation::saveGIF(expr=for (i in seq_along(date.interval)) {#
        num <- seq(1, length(date.interval), 1)#
        plots <- ggplot() +#
        #stat_contour(data=results.int.dur.melt, aes(x=x, y=y, z=z, fill=z, alpha=z))+#
        geom_tile(data=results.int.dur.melt, aes(x=x, y=y, z=z, fill=z, alpha=z))+#
        coord_equal() +#
        scale_fill_gradient(name = "14C Activity", low="white", high="red", na.value="white", limits = c(date.interval[i], date.interval[i]+interval)) +#
        scale_alpha(guide="none") +#
        scale_y_continuous("Latitude", limits = c(35, 46)) +#
        scale_x_continuous("Longitude", limits = c(-10, 5)) +#
        coord_map() +#
        theme_tufte() +#
        ggtitle("10,000 BP") +#
        guides(size=FALSE)#
        ggsave(plots, filename=paste("map",num[i], ".png", sep=""))#
    }, movie.name="iberia.gif")#
}#
mapGenAlt <- function(map, date, sigma, xmin, xmax, lat, long, interval, x.res, y.res) {#
    calibrated.date.frame <- stack.14C.4D(date=date, sigma=sigma, xmin=xmin, xmax=xmax, lat=lat, long=long)#
    date.interval <- seq(from=xmin, to=xmax, by=interval)#
    date.interval <- rev(date.interval)#
    date.list <- pbapply::pblapply(date.interval, function(x) subset(calibrated.date.frame, calibrated.date.frame$ageGrid > x & calibrated.date.frame$ageGrid < x+interval))#
    interpolation <- function(cal.date.frame) {#
        results.int.dur <- with(cal.date.frame, interp(x=Long, y=Lat, z=ageGrid, duplicate="mean", nx=x.res, ny=y.res))#
        results.int.dur.melt <- reshape2::melt(results.int.dur$z, na.rm=TRUE)#
        colnames(results.int.dur.melt) <- c("x", "y", "z")#
        results.int.dur.melt$x <- results.int.dur$x[results.int.dur.melt$x]#
        results.int.dur.melt$y <- results.int.dur$y[results.int.dur.melt$y]#
        results.int.dur.melt[complete.cases(results.int.dur.melt),]#
        return(results.int.dur.melt)#
    }#
    date.list.interp <- pbapply::pblapply(date.list, function(x) interpolation(x))#
    animation::saveGIF(expr=for (i in seq_along(date.interval)) {#
        num <- formatC(seq(1, length(date.interval), 1), width=6, format="d", flag="0")#
        plots <- ggmap(map, alpha=0.2) +#
        geom_tile(data=data.frame(date.list.interp[i]), aes(x=x, y=y, fill=z, alpha=z))+#
        coord_equal() +#
        scale_fill_gradientn(guide="none", name = "14C Activity", colours=rev(heat.colors(20)), limits = c(date.interval[i], date.interval[i]+interval, na.value="white")) +#
        scale_alpha_continuous(guide="none", na.value=0) +#
        scale_y_continuous("Latitude", limits = c(35, 46)) +#
        scale_x_continuous("Longitude", limits = c(-10, 5)) +#
        coord_map() +#
        theme_tufte() +#
        ggtitle(paste(date.interval[i], " cal BP", sep="")) +#
        guides(size=FALSE, colour=FALSE)#
        ggsave(plots, filename=paste("heatmap",num[i], ".png", sep=""))#
    }, movie.name="iberia.gif", convert = "gm convert" )#
}#
#
mapGenPixel <- function(map, date, sigma, xmin, xmax, lat, long, interval, x.res, y.res) {#
    calibrated.date.frame <- stack.14C.4D(date=date, sigma=sigma, xmin=xmin, xmax=xmax, lat=lat, long=long)#
    date.interval <- seq(from=xmin, to=xmax, by=interval)#
    date.interval <- rev(date.interval)#
    date.list <- pbapply::pblapply(date.interval, function(x) subset(calibrated.date.frame, calibrated.date.frame$ageGrid > x & calibrated.date.frame$ageGrid < x+interval))#
    interpolation <- function(cal.date.frame) {#
        results.int.dur <- with(cal.date.frame, interp(x=Long, y=Lat, z=ageGrid, duplicate="mean", nx=x.res, ny=y.res))#
        results.int.dur.melt <- reshape2::melt(results.int.dur$z, na.rm=TRUE)#
        colnames(results.int.dur.melt) <- c("x", "y", "z")#
        results.int.dur.melt$x <- results.int.dur$x[results.int.dur.melt$x]#
        results.int.dur.melt$y <- results.int.dur$y[results.int.dur.melt$y]#
        results.int.dur.melt[complete.cases(results.int.dur.melt),]#
        return(results.int.dur.melt)#
    }#
    date.list.interp <- pbapply::pblapply(date.list, function(x) interpolation(x))#
    animation::saveGIF(expr=for (i in seq_along(date.interval)) {#
        num <- formatC(seq(1, length(date.interval), 1), width=6, format="d", flag="0")#
        plots <- ggmap(map, alpha=0.2) +#
        geom_tile(data=data.frame(date.list.interp[i]), aes(x=x, y=y, fill=mod, alpha=mod))+#
        coord_equal() +#
        scale_fill_gradientn(guide="none", name = "14C Activity", colours=rev(heat.colors(20)), limits = c(date.interval[i], date.interval[i]+interval, na.value="white")) +#
        scale_alpha_continuous(guide="none", na.value=0) +#
        scale_y_continuous("Latitude", limits = c(35, 46)) +#
        scale_x_continuous("Longitude", limits = c(-10, 5)) +#
        coord_map() +#
        theme_tufte() +#
        ggtitle(paste(date.interval[i], " cal BP", sep="")) +#
        guides(size=FALSE, colour=FALSE)#
        ggsave(plots, filename=paste("heatmap",num[i], ".png", sep=""))#
    }, movie.name="iberia.gif", convert = "gm convert" )#
}#
mapGenPoint <- function(map, date, sigma, xmin, xmax, lat, long, interval, x.res, y.res) {#
    calibrated.date.frame <- stack.14C.4D(date=date, sigma=sigma, xmin=xmin, xmax=xmax, lat=lat, long=long)#
    date.interval <- seq(from=xmin, to=xmax, by=interval)#
    date.interval <- rev(date.interval)#
    date.list <- pbapply::pblapply(date.interval, function(x) subset(calibrated.date.frame, calibrated.date.frame$ageGrid > x & calibrated.date.frame$ageGrid < x+interval))#
    animation::ani.options(convert="/usr/local/bin/convert")#
    animation::saveVideo(expr=for (i in seq_along(date.interval)) {#
        num.f <- formatC(seq(xmin, xmax, interval), width=5, format="d", flag="0")#
        num <- rev(num.f)#
        #num <- formatC(seq(1, length(date.interval), 1), width=6, format="d", flag="0")#
        plots <- ggmap(map, alpha=0.2) +#
        geom_point(data=data.frame(date.list[i]), aes(x=Long, y=Lat), colour="red", alpha=0.05, size=7, shape=15)+#
        coord_equal() +#
        scale_y_continuous("Latitude", limits = c(35, 46)) +#
        scale_x_continuous("Longitude", limits = c(-10, 5)) +#
        coord_map() +#
        theme_tufte() +#
        ggtitle(paste(date.interval[i], " cal BP", sep="")) +#
        guides(size=FALSE, colour=FALSE, alpha=FALSE, shape=FALSE)#
        ggsave(plots, filename=paste("map",num[i], ".png", sep=""))#
    }, video.name="iberia.mp4", img.name="map")#
    #ffmpeg -f image2 -i map%06d.png -vcodec mjpeg -q:v 0 -r 25 iberia.avi#
}
all.data <- read.csv(file="~/Dropbox/4.2 ky event/Radiocarbon Final/All Iberia/Just Dates-1-Table 1.csv")
col.data <- collapse.the.dates.new(sites=all.data$Site, region=all.data$Region, context=all.data$Country, dates=all.data$X14C.Yr.BP.uncal, sigma=all.data$Sigma, lat=all.data$Lat.in.Dec, long=all.data$Long.in.Dec, datemin=0, datemax=10000)
collapse.the.dates.new <- function(sites, region, context, dates, sigma, lat, long, datemin, datemax) {#
    n.t <- rep(100, length(sites))#
    df <- data.frame(sites, region, context, lat, long, as.numeric(dates), as.numeric(sigma))#
    colnames(df) <- c("Site", "Region", "Context", "Lat", "Long", "CYrBPunc", "Sigma")#
    df <- subset(df, df$CYrBPunc < datemax & df$CYrBPunc > datemin)#
    df <- arrange(df, desc(CYrBPunc))#
    df <- arrange(df, desc(Site))#
    df <- arrange(df, desc(Region))#
    df$Ttest <- c(#
    (abs(df[1:(nrow(df)-1),6]-df[2:nrow(df), 6]))/((sqrt(df[2:nrow(df), 7]^2 + df[1:(nrow(df)-1),7]^2)*sqrt(1/100))), NA)#
    df$pvalue <- c((2*pt(df[1:nrow(df),8], 100, lower=FALSE)))#
    df$Collapse <- rep("No", length(df$Site))#
    df <- transform(df, Collapse = ifelse(pvalue > 0.05, "Yes", Collapse))#
    df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
    df <- as.data.frame(df)#
    df <- df[complete.cases(df),]#
    return(df)#
}#
all.data <- read.csv(file="~/Dropbox/4.2 ky event/Radiocarbon Final/All Iberia/Just Dates-1-Table 1.csv")#
#
col.data <- collapse.the.dates.new(sites=all.data$Site, region=all.data$Region, context=all.data$Country, dates=all.data$X14C.Yr.BP.uncal, sigma=all.data$Sigma, lat=all.data$Lat.in.Dec, long=all.data$Long.in.Dec, datemin=0, datemax=10000)
mapGenHeatDensity(map=spain, date=col.data$CYrBPunc, sigma=col.data$Sigma, lat=col.data$Lat, long=col.data$Long, interval=5, x.res=250, y.res=250, land.file="/Users/lee/Dropbox/Documents/University of Iowa/countries", xmin=2950, xmax=6950)
mapGenHeatDensity <- function(map, date, sigma, xmin, xmax, lat, long, interval, x.res, y.res, land.file) {#
    stack.14C.4D <- function(date, sigma, xmin, xmax, lat, long){#
        date <- c(date, 100)#
        sigma <- c(sigma, 50)#
        lat <- c(lat, 0)#
        long <- c(long, 0)#
        date.frame <- data.frame(date, sigma, lat, long)#
        names(date.frame) <- c("Date", "Sigma", "Lat", "Long")#
        date.frame <- date.frame[complete.cases(date.frame),]#
        date.sub <- subset(date.frame, (xmin-500) < Date & Date < (xmax + 500))#
        ids.cus = paste("Date", 1:length(date.sub$Date), sep = "")#
        coord.sub <- data.frame(ids.cus, date.sub$Lat, date.sub$Long)#
        names(coord.sub) <- c(".id", "Lat", "Long")#
        samp.intcal <- rep("intcal13", length(date.sub$Date))#
        samp.slugdens <- BchronCalibrate(date.sub$Date, date.sub$Sigma, samp.intcal)#
        samp.ages <- ldply(samp.slugdens, data.frame)#
        samp.ages <- subset(samp.ages, samp.ages$densities > .0015)#
        samp.test <- merge(x=samp.ages, y=coord.sub, by.x=".id", by.y=".id")#
        samp.test$DensityScale <- reshape::rescaler.default(samp.test$densities, type = "range")#
        return(samp.test)#
    }#
    land <- readOGR(land.file)#
    polyland <- subset(land, land@data$COUNTRY==c("Spain", "Portugal"))#
    calibrated.date.frame <- stack.14C.4D(date=date, sigma=sigma, xmin=xmin, xmax=xmax, lat=lat, long=long)#
    calibrated.date.frame <- calibrated.date.frame[complete.cases(calibrated.date.frame),]#
    dateScrubOld <- function(dataframe, age.min, age.max) {#
        dataframe$point <- 0.1#
        dataframe$point[findInterval(dataframe$ageGrid, c(age.min,age.max)) == 1L] <- 1#
        dataframe$DensityPlot <- dataframe$DensityScale*dataframe$point#
        return(dataframe)#
    }#
    dateScrubBad <- function(dataframe, age.min, age.max) {#
        dataframe <- dataframe[complete.cases(dataframe),]#
        dataframe$point <- 0#
        dataframe$point[findInterval(dataframe$ageGrid, c(age.min,age.max)) == 1L] <- 1#
        dataframe.val <- subset(dataframe, dataframe$point==1)#
        dataframe.blank <- dataframe#
        dataframe.blank$densities <- dataframe.blank$densities*0#
        dataframe.blank$DensityScale <- dataframe.blank$DensityScale*0#
        dataframe.blank <- subset(dataframe.blank, dataframe$point==0)#
        all.ageGrid <- c(dataframe.val$ageGrid, dataframe.blank$ageGrid)#
        all.lat <- c(dataframe.val$Lat, dataframe.blank$Lat)#
        all.long <- c(dataframe.val$Long, dataframe.blank$Long)#
        all.densities <- c(dataframe.val$densities, dataframe.blank$densities)#
        all.densityscale <- c(dataframe.val$DensityScale, dataframe.blank$DensityScale)#
        all.legend <- c(as.vector(dataframe.val$Legend), as.vector(dataframe.blank$Legend))#
        full.date.frame <- data.frame(all.ageGrid,all.lat,all.long,all.densities, all.densityscale,all.legend)#
        colnames(full.date.frame) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale", "Legend")#
        full.date.frame <- full.date.frame[complete.cases(full.date.frame),]#
        return(full.date.frame)#
    }#
    dateScrub <- function(dataframe, age.min, age.max) {#
        dataframe$point <- 0#
        dataframe$point[findInterval(dataframe$ageGrid, c(age.min,age.max)) == 1L] <- 1#
        dataframe.val <- subset(dataframe, dataframe$point==1)#
        return(dataframe.val)#
    }#
    date.interval <- seq(from=xmin, to=xmax, by=interval)#
    date.interval <- rev(date.interval)#
    date.min <- date.interval-interval/2#
    date.max <- date.interval+interval/2#
    date.list <- pbapply::pblapply(date.interval, function(x) dateScrub(dataframe=calibrated.date.frame, age.min=x-interval/2, age.max=x+interval/2))#
    heat.function.min <- function(data.frame, x.res, y.res) {#
        data.frame <- data.frame[complete.cases(data.frame),]#
        data.frame.int <- with(data.frame, interp(x=Long, y=Lat, z=densities, duplicate="user", dupfun="max", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))#
        land.clip <- crop(data.map, polyland)#
        results <- land.clip@data#
        return(results)#
    }#
    heat.function.max <- function(data.frame, x.res, y.res) {#
        data.frame <- data.frame[complete.cases(data.frame),]#
        data.frame.int <- with(data.frame, interp(x=Long, y=Lat, z=densities, duplicate="user", dupfun="max", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))#
        land.clip <- crop(data.map, polyland)#
        results <- land.clip@data#
        return(results)#
    }#
    heat.function.mean <- function(dataframe, x.res, y.res) {#
        dataframe <- dataframe[complete.cases(dataframe),]#
        data.frame.int <- with(dataframe, interp(x=Long, y=Lat, z=DensityScale, duplicate="user", dupfun="mean", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))#
        land.clip <- crop(data.map, as(polyland, "SpatialPolygons"))#
        results <- land.clip@data#
        results <- results[complete.cases(results),]#
        #results$zmod <- reshape::rescaler.default(results$z, type = "range")#
        return(results)#
    }#
    animation::ani.options(convert="/usr/local/bin/convert")#
    animation::saveVideo(expr=for (i in seq_along(date.interval)) {#
        human.data <- date.list[[i]]#
        human.data <- data.frame(human.data$ageGrid, human.data$Lat, human.data$Long, human.data$densities, human.data$DensityScale, human.data$point)#
        colnames(human.data) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale",  "point")#
        blank.ageGrid <- c(0, 0, 0, 0)#
        blank.long <- c(-10, -10, 2.5, 2.5)#
        blank.lat <- c(45, 35, 35, 45)#
        blank.densities <- c(0, 0, 0, 0)#
        blank.point <- c(0, 0, 0, 0)#
        blank.human.frame <- data.frame(blank.ageGrid, blank.lat, blank.long, blank.densities, blank.densities, blank.point)#
        colnames(blank.human.frame) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale",  "point")#
        human.data.all <- rbind(human.data, blank.human.frame)#
        human.int <- heat.function.mean(human.data.all, x.res=x.res, y.res=y.res)#
        num <- formatC(seq(1, length(date.interval), 1), width=6, format="d", flag="0")#
        blank.human.plot <- ggmap(map) +#
        coord_equal() +#
        coord_map() +#
        scale_x_continuous("Longitude", limits=c(-10, 4)) +#
        scale_y_continuous("Latitude", limits=c(35, 45)) +#
        theme_tufte() +#
        ggtitle(paste(date.interval[i], " cal BP | Humans", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE, fill=FALSE)#
        val.human.plot <- ggmap(map) +#
        #geom_contour(data=human.int, aes(x=x, y=y, z=z), colour="red", alpha=0.2, binwidth=0.001)+#
        geom_tile(data=human.int, aes(x=x, y=y, fill=z,  alpha=z))+#
        coord_equal() +#
        coord_map() +#
        scale_alpha_continuous(range=c(0, 1), guide="none") +#
        scale_fill_gradient(name = "Latest Date", low="pink", high="red",  limits=c(0, 1)) +#
        scale_x_continuous("Longitude", limits=c(-10, 4)) +#
        scale_y_continuous("Latitude", limits=c(35, 45)) +#
        theme_tufte() +#
        ggtitle(paste(date.interval[i], " cal BP | Humans", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE, fill=FALSE)#
        human.z <- sum(human.int$z)#
        human.plot <- if(human.z==0) {#
            blank.human.plot#
        } else {#
            val.human.plot#
        }#
        ggsave(human.plot, filename=paste("/Users/lee/Dropbox/Documents/University of Iowa/Map Runs/map",num[i], ".tiff", sep=""), device="tiff", dpi=320, width=7, height=7)#
    }, video.name="iberia.mp4", img.name="map")#
    #ffmpeg -f image2 -i map%06d.tif -vcodec mjpeg -q:v 0 -r 25 iberia.mov#
}#
spain <- get_map(location="Spain", zoom=6, maptype="terrain")#
#
mapGenHeatDensity(map=spain, date=col.data$CYrBPunc, sigma=col.data$Sigma, lat=col.data$Lat, long=col.data$Long, interval=5, x.res=250, y.res=250, land.file="/Users/lee/Dropbox/Documents/University of Iowa/countries", xmin=2950, xmax=6950)
library(shiny)
superzip <- read.csv(file="~/GitHub/congressImpact/data/superzip.csv")
congress <- read.csv(file="~/GitHub/congressImpact/data/congresselections.csv")
test.merge <- merge(superzip, congress, by.x="districtcode", by.y="districtcode")
head(test.merge)
write.table(test.merge, file="total.csv", sep=',')
runApp("~/GitHub/congressImpact")
library(rsconnect)
deployApp("~/GitHub/congressImpact", appName="congressImpact")
setwd("~/GitHub/congressImpact/data")
library(dplyr)#
lm_eqn = function(m) {#
    l <- list(a = format(coef(m)[1], digits = 2),#
    b = format(abs(coef(m)[2]), digits = 2),#
    r2 = format(summary(m)$r.squared, digits = 3));#
    eq <- substitute(italic(y) == a + b %.% italic(x)*","~~italic(r)^2~"="~r2,l)#
    as.character(as.expression(eq));#
}#
#allzips <- readRDS("data/superzip.rds")#
superzip <- read.csv(file="data/superzip.csv")#
zipcodes <- read.csv(file="data/zip_codes_states.csv")#
#
allzips <- merge(x=superzip, y=zipcodes, by.x="zipcode", by.y="zip_code")
setwd("~/GitHub/congressImpact/")
library(dplyr)#
lm_eqn = function(m) {#
    l <- list(a = format(coef(m)[1], digits = 2),#
    b = format(abs(coef(m)[2]), digits = 2),#
    r2 = format(summary(m)$r.squared, digits = 3));#
    eq <- substitute(italic(y) == a + b %.% italic(x)*","~~italic(r)^2~"="~r2,l)#
    as.character(as.expression(eq));#
}#
#allzips <- readRDS("data/superzip.rds")#
superzip <- read.csv(file="data/superzip.csv")#
zipcodes <- read.csv(file="data/zip_codes_states.csv")#
#
allzips <- merge(x=superzip, y=zipcodes, by.x="zipcode", by.y="zip_code")
ls(allzips)
library(shiny)
runApp("~/GitHub/congressImpact")
runApp("~/GitHub/congressImpact")
runApp("~/GitHub/congressImpact")
runApp("~/GitHub/congressImpact")
ls(superzip)
runApp("~/GitHub/congressImpact")
superzip <- read.csv(file="data/superzip.csv")#
zipcodes <- read.csv(file="data/zip_codes_states.csv")#
congresscontact <- read.csv(file="data/CongressionalContact.csv")#
healthcaredata <- read.csv(file="data/Healthcare.csv")#
cities <- read.csv(file="data/Municipalities.csv")#
unemployment <- read.csv(file="data/Unemployment.csv")
ls(unemsuperzip <- read.csv(file="data/superzip.csv")#
)
superzip <- read.csv(file="data/superzip.csv")
ls(unemployment)
allzips.first <- merge(x=superzip, y=zipcodes, by.x="zipcode", by.y="zip_code")
ls(allzips.first)
allzips.second <- merge(x=allzips.first, y=unemployment, by.x="zipcode", by.y="Zip")
ls(allzips.second)
ls(helathcaredata)
ls(healthcaredata)
head(healthcaredata$ZCTA)
head(healthcaredata$Id)
#allzips <- readRDS("data/superzip.rds")#
superzip <- read.csv(file="data/superzip.csv")#
zipcodes <- read.csv(file="data/zip_codes_states.csv")#
congresscontact <- read.csv(file="data/CongressionalContact.csv")#
healthcaredata <- read.csv(file="data/Healthcare.csv")#
cities <- read.csv(file="data/Municipalities.csv")#
unemployment <- read.csv(file="data/Unemployment.csv")
head(healthcaredata$Id)
allzips <- merge(x=allzips, y=healthcaredata, by.x="zipcode", by.y="Id")
ls(allzips)
ls(cities)
allzips <- merge(x=allzips, y=cities, by.x="zipcode", by.y="zipcode")
ls(allzips)
#allzips <- readRDS("data/superzip.rds")#
superzip <- read.csv(file="data/superzip.csv")#
zipcodes <- read.csv(file="data/zip_codes_states.csv")#
congresscontact <- read.csv(file="data/CongressionalContact.csv")#
healthcaredata <- read.csv(file="data/Healthcare.csv")#
cities <- read.csv(file="data/Municipalities.csv")#
unemployment <- read.csv(file="data/Unemployment.csv")#
#
allzips <- merge(x=superzip, y=zipcodes, by.x="zipcode", by.y="zip_code")#
allzips <- merge(x=allzips, y=unemployment, by.x="zipcode", by.y="Zip")#
allzips <- merge(x=allzips, y=healthcaredata, by.x="zipcode", by.y="Id")#
allzips <- merge(x=allzips, y=cities, by.x="zipcode", by.y="zipcode")
ls(allzips)
ls(congresscontact)
head(allzips$districtcode)
allzips <- merge(x=allzips, y=congresscontact, by.x="districtcode", by.y="districtcode")
head(congresscontact$district)
head(congresscontact$district)
allzips <- merge(x=allzips, y=congresscontact, by.x="districtcode", by.y="districtwide")
ls(allzips)
congresselections <- read.csv(file="/Users/lee/GitHub/congressImpact/data/CongressElections.csv")
head(congresselections)
allzips <- merge(x=allzips, y=congresselections, by.x="districtcode", by.y="districtwide")
allzips <- merge(x=allzips, y=congresselections, by.x="districtcode", by.y="districtcode")
head(allzips)
runApp("~/GitHub/congressImpact)"
)
runApp("~/GitHub/congressImpact
)
runApp("~/GitHub/congressImpact")
deployApp("~/GitHub/congressImpact", appName="congressImpact")
library(rsconnect)
deployApp("~/GitHub/congressImpact", appName="congressImpact")
runApp("~/GitHub/congressImpact")
unique(congresscontact$districtcode)
unique(congresscontact$districtwide)
unique(cities$districtcode)
